!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVE	BWidgets/BColors.hpp	/^	ACTIVE		= 1,$/;"	e	enum:BColors::__anon5
AMP_GAIN	BAmp.h	/^	AMP_GAIN   = 0,$/;"	e	enum:__anon44
AMP_GUI_URI	BAmp.h	5;"	d
AMP_INPUT	BAmp.h	/^	AMP_INPUT  = 1,$/;"	e	enum:__anon44
AMP_N_PORTS	BAmp.h	6;"	d
AMP_OUTPUT	BAmp.h	/^	AMP_OUTPUT = 2$/;"	e	enum:__anon44
AMP_URI	BAmp.h	4;"	d
Amp	BAmp.cpp	/^Amp::Amp ()$/;"	f	class:Amp
Amp	BAmp.cpp	/^class Amp {$/;"	c	file:
Any	BUtilities/Any.hpp	/^        Any () {}$/;"	f	class:BUtilities::Any
Any	BUtilities/Any.hpp	/^        Any (const Any& that) : dataTypeHash (that.dataTypeHash)$/;"	f	class:BUtilities::Any
Any	BUtilities/Any.hpp	/^class Any$/;"	c	namespace:BUtilities
BAMP_H_	BAmp.h	2;"	d
BAmp_GUI	BAmp_GUI.cpp	/^BAmp_GUI::BAmp_GUI (PuglNativeView parentWindow) :$/;"	f	class:BAmp_GUI
BAmp_GUI	BAmp_GUI.cpp	/^class BAmp_GUI : public BWidgets::Window$/;"	c	file:
BCOLORS_HPP_	BWidgets/BColors.hpp	19;"	d
BColors	BWidgets/BColors.cpp	/^namespace BColors$/;"	n	file:
BColors	BWidgets/BColors.hpp	/^namespace BColors$/;"	n
BDevices	BWidgets/BDevices.hpp	/^namespace BDevices$/;"	n
BEVENTS_HPP_	BWidgets/BEvents.hpp	19;"	d
BEvents	BWidgets/BEvents.hpp	/^namespace BEvents$/;"	n
BITEMS_DEFAULT_TEXT_PADDING	BWidgets/BItems.hpp	28;"	d
BItems	BWidgets/BItems.cpp	/^namespace BItems$/;"	n	file:
BItems	BWidgets/BItems.hpp	/^namespace BItems$/;"	n
BSTYLES_HPP_	BWidgets/BStyles.hpp	19;"	d
BStyles	BWidgets/BStyles.cpp	/^namespace BStyles$/;"	n	file:
BStyles	BWidgets/BStyles.hpp	/^namespace BStyles$/;"	n
BUNDLE	makefile	/^BUNDLE = BAmp.lv2$/;"	m
BUTILITIES_ANY_HPP_	BUtilities/Any.hpp	19;"	d
BUTILITIES_MIX_HPP_	BUtilities/mix.hpp	19;"	d
BUTILITIES_PATH_HPP_	BUtilities/Path.hpp	19;"	d
BUTILITIES_PATH_SLASH	BUtilities/Path.hpp	24;"	d
BUTILITIES_PATH_SLASH	BUtilities/Path.hpp	26;"	d
BUTILITIES_POINT_HPP_	BUtilities/Point.hpp	22;"	d
BUTILITIES_RECTAREA_HPP_	BUtilities/RectArea.hpp	22;"	d
BUTILITIES_STOF_HPP_	BUtilities/stof.hpp	19;"	d
BUTILITIES_TO_STRING_HPP_	BUtilities/to_string.hpp	19;"	d
BUTTON_CLICK_EVENT	BWidgets/BEvents.hpp	/^	BUTTON_CLICK_EVENT,$/;"	e	enum:BEvents::EventType
BUTTON_HPP_	BWidgets/Button.hpp	19;"	d
BUTTON_PRESS_EVENT	BWidgets/BEvents.hpp	/^	BUTTON_PRESS_EVENT,$/;"	e	enum:BEvents::EventType
BUTTON_RELEASE_EVENT	BWidgets/BEvents.hpp	/^	BUTTON_RELEASE_EVENT,$/;"	e	enum:BEvents::EventType
BUtilities	BUtilities/Any.hpp	/^namespace BUtilities$/;"	n
BUtilities	BUtilities/Path.hpp	/^namespace BUtilities$/;"	n
BUtilities	BUtilities/Point.hpp	/^namespace BUtilities$/;"	n
BUtilities	BUtilities/RectArea.hpp	/^namespace BUtilities$/;"	n
BUtilities	BUtilities/mix.hpp	/^namespace BUtilities {$/;"	n
BUtilities	BUtilities/stof.cpp	/^namespace BUtilities {$/;"	n	file:
BUtilities	BUtilities/stof.hpp	/^namespace BUtilities {$/;"	n
BUtilities	BUtilities/to_string.cpp	/^namespace BUtilities {$/;"	n	file:
BUtilities	BUtilities/to_string.hpp	/^namespace BUtilities {$/;"	n
BWIDGETS_BDEVICES_HPP_	BWidgets/BDevices.hpp	19;"	d
BWIDGETS_BITEMS_HPP_	BWidgets/BItems.hpp	19;"	d
BWIDGETS_CHOICEBOX_HPP_	BWidgets/ChoiceBox.hpp	19;"	d
BWIDGETS_DEFAULT_BACKGROUND	BWidgets/Widget.hpp	23;"	d
BWIDGETS_DEFAULT_BGCOLORS	BWidgets/Widget.hpp	28;"	d
BWIDGETS_DEFAULT_BORDER	BWidgets/Widget.hpp	22;"	d
BWIDGETS_DEFAULT_BUTTON_BORDER	BWidgets/Button.hpp	26;"	d
BWIDGETS_DEFAULT_BUTTON_HEIGHT	BWidgets/Button.hpp	24;"	d
BWIDGETS_DEFAULT_BUTTON_RAD	BWidgets/Button.hpp	27;"	d
BWIDGETS_DEFAULT_BUTTON_WIDTH	BWidgets/Button.hpp	23;"	d
BWIDGETS_DEFAULT_CHOICEBOX_BUTTON_HEIGHT	BWidgets/ChoiceBox.hpp	30;"	d
BWIDGETS_DEFAULT_CHOICEBOX_BUTTON_NAME	BWidgets/ChoiceBox.hpp	33;"	d
BWIDGETS_DEFAULT_CHOICEBOX_HEIGHTH	BWidgets/ChoiceBox.hpp	28;"	d
BWIDGETS_DEFAULT_CHOICEBOX_ITEM_HEIGHTH	BWidgets/ChoiceBox.hpp	29;"	d
BWIDGETS_DEFAULT_CHOICEBOX_ITEM_NAME	BWidgets/ChoiceBox.hpp	34;"	d
BWIDGETS_DEFAULT_CHOICEBOX_LINE_HEIGHT	BWidgets/ChoiceBox.hpp	31;"	d
BWIDGETS_DEFAULT_CHOICEBOX_WIDTH	BWidgets/ChoiceBox.hpp	27;"	d
BWIDGETS_DEFAULT_DARKENED	BWidgets/Widget.hpp	33;"	d
BWIDGETS_DEFAULT_DIALVALUE_HEIGHT	BWidgets/DialValue.hpp	25;"	d
BWIDGETS_DEFAULT_DIALVALUE_WIDTH	BWidgets/DialValue.hpp	24;"	d
BWIDGETS_DEFAULT_DIAL_DEPTH	BWidgets/Dial.hpp	30;"	d
BWIDGETS_DEFAULT_DIAL_DOT_SIZE	BWidgets/Dial.hpp	31;"	d
BWIDGETS_DEFAULT_DIAL_HEIGHT	BWidgets/Dial.hpp	28;"	d
BWIDGETS_DEFAULT_DIAL_KNOB_SIZE	BWidgets/Dial.hpp	29;"	d
BWIDGETS_DEFAULT_DIAL_WIDTH	BWidgets/Dial.hpp	27;"	d
BWIDGETS_DEFAULT_FGCOLORS	BWidgets/Widget.hpp	27;"	d
BWIDGETS_DEFAULT_FILECHOOSER_HEIGHT	BWidgets/FileChooser.hpp	22;"	d
BWIDGETS_DEFAULT_FILECHOOSER_WIDTH	BWidgets/FileChooser.hpp	21;"	d
BWIDGETS_DEFAULT_FOCUS_IN_MS	BWidgets/Focusable.hpp	21;"	d
BWIDGETS_DEFAULT_FOCUS_NAME	BWidgets/Focusable.hpp	23;"	d
BWIDGETS_DEFAULT_FOCUS_OUT_MS	BWidgets/Focusable.hpp	22;"	d
BWIDGETS_DEFAULT_FONT	BWidgets/Widget.hpp	29;"	d
BWIDGETS_DEFAULT_HEIGHT	BWidgets/Widget.hpp	25;"	d
BWIDGETS_DEFAULT_HSCALE_DEPTH	BWidgets/HScale.hpp	25;"	d
BWIDGETS_DEFAULT_HSCALE_HEIGHT	BWidgets/HScale.hpp	24;"	d
BWIDGETS_DEFAULT_HSCALE_WIDTH	BWidgets/HScale.hpp	23;"	d
BWIDGETS_DEFAULT_HSLIDERVALUE_HEIGHT	BWidgets/HSliderValue.hpp	25;"	d
BWIDGETS_DEFAULT_HSLIDERVALUE_WIDTH	BWidgets/HSliderValue.hpp	24;"	d
BWIDGETS_DEFAULT_HSLIDER_DEPTH	BWidgets/HSlider.hpp	28;"	d
BWIDGETS_DEFAULT_HSLIDER_HEIGHT	BWidgets/HSlider.hpp	27;"	d
BWIDGETS_DEFAULT_HSLIDER_WIDTH	BWidgets/HSlider.hpp	26;"	d
BWIDGETS_DEFAULT_HSWITCH_DEPTH	BWidgets/HSwitch.hpp	26;"	d
BWIDGETS_DEFAULT_HSWITCH_HEIGHT	BWidgets/HSwitch.hpp	25;"	d
BWIDGETS_DEFAULT_HSWITCH_WIDTH	BWidgets/HSwitch.hpp	24;"	d
BWIDGETS_DEFAULT_ILLUMINATED	BWidgets/Widget.hpp	30;"	d
BWIDGETS_DEFAULT_ITEMBOX_HEIGHT	BWidgets/ItemBox.hpp	27;"	d
BWIDGETS_DEFAULT_ITEMBOX_ITEM_NAME	BWidgets/ItemBox.hpp	29;"	d
BWIDGETS_DEFAULT_ITEMBOX_WIDTH	BWidgets/ItemBox.hpp	26;"	d
BWIDGETS_DEFAULT_KNOB_DEPTH	BWidgets/Knob.hpp	25;"	d
BWIDGETS_DEFAULT_KNOB_HEIGHT	BWidgets/Knob.hpp	24;"	d
BWIDGETS_DEFAULT_KNOB_WIDTH	BWidgets/Knob.hpp	23;"	d
BWIDGETS_DEFAULT_LABEL_ALIGN	BWidgets/Label.hpp	23;"	d
BWIDGETS_DEFAULT_LABEL_HEIGHT	BWidgets/Label.hpp	22;"	d
BWIDGETS_DEFAULT_LABEL_VALIGN	BWidgets/Label.hpp	24;"	d
BWIDGETS_DEFAULT_LABEL_WIDTH	BWidgets/Label.hpp	21;"	d
BWIDGETS_DEFAULT_LISTBOX_HEIGHTH	BWidgets/ListBox.hpp	28;"	d
BWIDGETS_DEFAULT_LISTBOX_WIDTH	BWidgets/ListBox.hpp	24;"	d
BWIDGETS_DEFAULT_MENU_BACKGROUND	BWidgets/Widget.hpp	44;"	d
BWIDGETS_DEFAULT_MENU_BORDER	BWidgets/Widget.hpp	42;"	d
BWIDGETS_DEFAULT_MENU_PADDING	BWidgets/Widget.hpp	41;"	d
BWIDGETS_DEFAULT_MENU_TEXTBORDER	BWidgets/Widget.hpp	43;"	d
BWIDGETS_DEFAULT_MESSAGEBOX_BUTTON_NAME	BWidgets/MessageBox.hpp	28;"	d
BWIDGETS_DEFAULT_MESSAGEBOX_TEXT_NAME	BWidgets/MessageBox.hpp	26;"	d
BWIDGETS_DEFAULT_MESSAGEBOX_TITLE_NAME	BWidgets/MessageBox.hpp	25;"	d
BWIDGETS_DEFAULT_NORMALLIGHTED	BWidgets/Widget.hpp	31;"	d
BWIDGETS_DEFAULT_POPUPLISTBOX_BUTTON_HEIGHT	BWidgets/PopupListBox.hpp	27;"	d
BWIDGETS_DEFAULT_POPUPLISTBOX_BUTTON_NAME	BWidgets/PopupListBox.hpp	28;"	d
BWIDGETS_DEFAULT_POPUPLISTBOX_BUTTON_WIDTH	BWidgets/PopupListBox.hpp	26;"	d
BWIDGETS_DEFAULT_POPUPLISTBOX_HEIGHTH	BWidgets/PopupListBox.hpp	25;"	d
BWIDGETS_DEFAULT_POPUPLISTBOX_LISTBOX_NAME	BWidgets/PopupListBox.hpp	29;"	d
BWIDGETS_DEFAULT_POPUPLISTBOX_WIDTH	BWidgets/PopupListBox.hpp	24;"	d
BWIDGETS_DEFAULT_RANGE_MAX	BWidgets/RangeWidget.hpp	22;"	d
BWIDGETS_DEFAULT_RANGE_MIN	BWidgets/RangeWidget.hpp	21;"	d
BWIDGETS_DEFAULT_RANGE_STEP	BWidgets/RangeWidget.hpp	23;"	d
BWIDGETS_DEFAULT_SHADOWED	BWidgets/Widget.hpp	32;"	d
BWIDGETS_DEFAULT_STATE	BWidgets/Widget.hpp	26;"	d
BWIDGETS_DEFAULT_TEXT_ALIGN	BWidgets/Widget.hpp	37;"	d
BWIDGETS_DEFAULT_TEXT_COLORS	BWidgets/Widget.hpp	36;"	d
BWIDGETS_DEFAULT_TEXT_VALIGN	BWidgets/Widget.hpp	38;"	d
BWIDGETS_DEFAULT_VALUE	BWidgets/ValueWidget.hpp	24;"	d
BWIDGETS_DEFAULT_VALUE_FORMAT	BWidgets/ValueWidget.hpp	25;"	d
BWIDGETS_DEFAULT_VSCALE_DEPTH	BWidgets/VScale.hpp	25;"	d
BWIDGETS_DEFAULT_VSCALE_HEIGHT	BWidgets/VScale.hpp	24;"	d
BWIDGETS_DEFAULT_VSCALE_WIDTH	BWidgets/VScale.hpp	23;"	d
BWIDGETS_DEFAULT_VSLIDERVALUE_HEIGHT	BWidgets/VSliderValue.hpp	25;"	d
BWIDGETS_DEFAULT_VSLIDERVALUE_WIDTH	BWidgets/VSliderValue.hpp	24;"	d
BWIDGETS_DEFAULT_VSLIDER_DEPTH	BWidgets/VSlider.hpp	23;"	d
BWIDGETS_DEFAULT_VSLIDER_HEIGHT	BWidgets/VSlider.hpp	22;"	d
BWIDGETS_DEFAULT_VSLIDER_WIDTH	BWidgets/VSlider.hpp	21;"	d
BWIDGETS_DEFAULT_VSWITCH_DEPTH	BWidgets/VSwitch.hpp	26;"	d
BWIDGETS_DEFAULT_VSWITCH_HEIGHT	BWidgets/VSwitch.hpp	25;"	d
BWIDGETS_DEFAULT_VSWITCH_WIDTH	BWidgets/VSwitch.hpp	24;"	d
BWIDGETS_DEFAULT_WIDTH	BWidgets/Widget.hpp	24;"	d
BWIDGETS_DEFAULT_WINDOW_BACKGROUND	BWidgets/Window.hpp	22;"	d
BWIDGETS_DIALVALUE_HPP_	BWidgets/DialValue.hpp	19;"	d
BWIDGETS_DIAL_HPP_	BWidgets/Dial.hpp	19;"	d
BWIDGETS_DISPLAY_HPP_	BWidgets/Display.hpp	19;"	d
BWIDGETS_DOWNBUTTON_HPP_	BWidgets/DownButton.hpp	19;"	d
BWIDGETS_FILECHOOSER_HPP_	BWidgets/FileChooser.hpp	19;"	d
BWIDGETS_FOCUSABLE_HPP_	BWidgets/Focusable.hpp	19;"	d
BWIDGETS_HPIANOROLL_HPP_	BWidgets/HPianoRoll.hpp	19;"	d
BWIDGETS_HPP_	BWidgets/BWidgets.hpp	19;"	d
BWIDGETS_HSCALE_HPP_	BWidgets/HScale.hpp	19;"	d
BWIDGETS_HSLIDERVALUE_HPP_	BWidgets/HSliderValue.hpp	19;"	d
BWIDGETS_HSLIDER_HPP_	BWidgets/HSlider.hpp	19;"	d
BWIDGETS_HSWITCH_HPP_	BWidgets/HSwitch.hpp	19;"	d
BWIDGETS_ITEMBOX_HPP_	BWidgets/ItemBox.hpp	19;"	d
BWIDGETS_KEYCOORDS_	BWidgets/PianoWidget.hpp	30;"	d
BWIDGETS_KEYWORD_BACKGROUND	BWidgets/Widget.hpp	48;"	d
BWIDGETS_KEYWORD_BGCOLORS	BWidgets/Widget.hpp	51;"	d
BWIDGETS_KEYWORD_BORDER	BWidgets/Widget.hpp	47;"	d
BWIDGETS_KEYWORD_BUTTONCOLORS	BWidgets/Button.hpp	25;"	d
BWIDGETS_KEYWORD_FGCOLORS	BWidgets/Widget.hpp	50;"	d
BWIDGETS_KEYWORD_FONT	BWidgets/Widget.hpp	49;"	d
BWIDGETS_KEYWORD_TEXTCOLORS	BWidgets/Widget.hpp	52;"	d
BWIDGETS_KNOB_HPP_	BWidgets/Knob.hpp	19;"	d
BWIDGETS_LABEL_EDIT_ENTERED_MESSAGE	BWidgets/Label.hpp	27;"	d
BWIDGETS_LABEL_HPP_	BWidgets/Label.hpp	19;"	d
BWIDGETS_LABEL_TEXT_CHANGED_MESSAGE	BWidgets/Label.hpp	26;"	d
BWIDGETS_LEFTBUTTON_HPP_	BWidgets/LeftButton.hpp	19;"	d
BWIDGETS_LISTBOX_HPP_	BWidgets/ListBox.hpp	19;"	d
BWIDGETS_MESSAGEBOX_HPP_	BWidgets/MessageBox.hpp	19;"	d
BWIDGETS_MINUSBUTTON_HPP_	BWidgets/MinusButton.hpp	19;"	d
BWIDGETS_PIANOWIDGET_HPP_	BWidgets/PianoWidget.hpp	19;"	d
BWIDGETS_PIANO_KEY_PRESSED_MESSAGE	BWidgets/PianoWidget.hpp	23;"	d
BWIDGETS_PIANO_KEY_RELEASED_MESSAGE	BWidgets/PianoWidget.hpp	24;"	d
BWIDGETS_PLUSBUTTON_HPP_	BWidgets/PlusButton.hpp	19;"	d
BWIDGETS_POPUPLISTBOX_HPP_	BWidgets/PopupListBox.hpp	19;"	d
BWIDGETS_RANGEWIDGET_HPP_	BWidgets/RangeWidget.hpp	19;"	d
BWIDGETS_RIGHTBUTTON_HPP_	BWidgets/RightButton.hpp	19;"	d
BWIDGETS_STATEDISPLAY_HPP_	BWidgets/StateDisplay.hpp	19;"	d
BWIDGETS_TEXTBUTTON_HPP_	BWidgets/TextButton.hpp	19;"	d
BWIDGETS_TEXTTOGGLEBUTTON_HPP_	BWidgets/TextToggleButton.hpp	19;"	d
BWIDGETS_TEXT_HPP_	BWidgets/Text.hpp	19;"	d
BWIDGETS_TOGGLEBUTTON_HPP_	BWidgets/ToggleButton.hpp	19;"	d
BWIDGETS_UPBUTTON_HPP_	BWidgets/UpButton.hpp	19;"	d
BWIDGETS_VALUEWIDGET_HPP_	BWidgets/ValueWidget.hpp	19;"	d
BWIDGETS_VSCALE_HPP_	BWidgets/VScale.hpp	19;"	d
BWIDGETS_VSLIDERVALUE_HPP_	BWidgets/VSliderValue.hpp	19;"	d
BWIDGETS_VSLIDER_HPP_	BWidgets/VSlider.hpp	19;"	d
BWIDGETS_VSWITCH_HPP_	BWidgets/VSwitch.hpp	19;"	d
BWIDGETS_WIDGET_HPP_	BWidgets/Widget.hpp	19;"	d
BWIDGETS_WINDOW_HPP_	BWidgets/Window.hpp	19;"	d
BWidgets	BWidgets/BDevices.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/BEvents.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Button.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Button.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/ChoiceBox.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/ChoiceBox.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Dial.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Dial.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/DialValue.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/DialValue.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Display.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Display.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/DownButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/DownButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/DrawingSurface.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/DrawingSurface.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/FileChooser.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/FileChooser.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Focusable.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/HPianoRoll.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/HPianoRoll.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/HScale.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/HScale.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/HSlider.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/HSlider.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/HSliderValue.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/HSliderValue.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/HSwitch.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/HSwitch.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Icon.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Icon.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/ImageIcon.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/ImageIcon.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/ItemBox.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/ItemBox.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Knob.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Knob.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Label.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Label.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/LeftButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/LeftButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/ListBox.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/ListBox.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/MessageBox.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/MessageBox.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/MinusButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/MinusButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/PianoWidget.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/PianoWidget.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/PlusButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/PlusButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/PopupListBox.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/PopupListBox.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/RangeWidget.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/RangeWidget.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/RightButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/RightButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/StateDisplay.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/StateDisplay.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Text.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Text.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/TextButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/TextButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/TextToggleButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/TextToggleButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/ToggleButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/ToggleButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/UpButton.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/UpButton.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/VScale.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/VScale.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/VSlider.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/VSlider.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/VSliderValue.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/VSliderValue.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/VSwitch.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/VSwitch.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/ValueWidget.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/ValueWidget.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Widget.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Widget.hpp	/^namespace BWidgets$/;"	n
BWidgets	BWidgets/Window.cpp	/^namespace BWidgets$/;"	n	file:
BWidgets	BWidgets/Window.hpp	/^namespace BWidgets$/;"	n
Border	BWidgets/BStyles.cpp	/^Border::Border () : Border (noLine, 0.0, 0.0, 0.0) {}$/;"	f	class:BStyles::Border
Border	BWidgets/BStyles.cpp	/^Border::Border (const Line& line) : Border (line, 0.0, 0.0, 0.0) {}$/;"	f	class:BStyles::Border
Border	BWidgets/BStyles.cpp	/^Border::Border (const Line& line, const double margin, const double padding) : Border (line, margin, padding, 0.0) {}$/;"	f	class:BStyles::Border
Border	BWidgets/BStyles.cpp	/^Border::Border (const Line& line, const double margin, const double padding, const double radius) :$/;"	f	class:BStyles::Border
Border	BWidgets/BStyles.hpp	/^class Border$/;"	c	namespace:BStyles
Button	BWidgets/Button.cpp	/^Button::Button () : Button (0.0, 0.0, BWIDGETS_DEFAULT_BUTTON_WIDTH, BWIDGETS_DEFAULT_BUTTON_HEIGHT, "button", 0.0) {}$/;"	f	class:BWidgets::Button
Button	BWidgets/Button.cpp	/^Button::Button (const Button& that) : ValueWidget (that), bgColors (that.bgColors) {}$/;"	f	class:BWidgets::Button
Button	BWidgets/Button.cpp	/^Button::Button (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::Button
Button	BWidgets/Button.hpp	/^class Button : public ValueWidget$/;"	c	namespace:BWidgets
Button	BWidgets/pugl_cairo_test.c	/^} Button;$/;"	t	typeref:struct:__anon1	file:
ButtonCode	BWidgets/BDevices.hpp	/^enum ButtonCode$/;"	g	namespace:BDevices
CAIROPLUS_H_	BWidgets/cairoplus.h	19;"	d
CAIRO_RGBA	BWidgets/BColors.hpp	29;"	d
CC	makefile	/^CC ?= gcc$/;"	m
CLIPBOARD	BWidgets/pugl/x11.h	/^  Atom CLIPBOARD;$/;"	m	struct:__anon7
CLOSE_REQUEST_EVENT	BWidgets/BEvents.hpp	/^	CLOSE_REQUEST_EVENT,$/;"	e	enum:BEvents::EventType
CONFIGURE_REQUEST_EVENT	BWidgets/BEvents.hpp	/^	CONFIGURE_REQUEST_EVENT,$/;"	e	enum:BEvents::EventType
CXX	makefile	/^CXX ?= g++$/;"	m
ChoiceBox	BWidgets/ChoiceBox.cpp	/^ChoiceBox::ChoiceBox () : ChoiceBox (0.0, 0.0, 0.0, 0.0, "choicebox") {}$/;"	f	class:BWidgets::ChoiceBox
ChoiceBox	BWidgets/ChoiceBox.cpp	/^ChoiceBox::ChoiceBox (const ChoiceBox& that) :$/;"	f	class:BWidgets::ChoiceBox
ChoiceBox	BWidgets/ChoiceBox.cpp	/^ChoiceBox::ChoiceBox (const double x, const double y, const double width, const double height,$/;"	f	class:BWidgets::ChoiceBox
ChoiceBox	BWidgets/ChoiceBox.cpp	/^ChoiceBox::ChoiceBox (const double x, const double y, const double width,$/;"	f	class:BWidgets::ChoiceBox
ChoiceBox	BWidgets/ChoiceBox.hpp	/^class ChoiceBox : public ValueWidget$/;"	c	namespace:BWidgets
Color	BWidgets/BColors.cpp	/^Color::Color () : Color (0.0, 0.0, 0.0, 0.0) {};$/;"	f	class:BColors::Color
Color	BWidgets/BColors.cpp	/^Color::Color (const double red, const double green, const double blue, const double alpha) :$/;"	f	class:BColors::Color
Color	BWidgets/BColors.cpp	/^Color::Color (const uint32_t red32, const uint32_t green32, const uint32_t blue32, const uint32_t alpha32) :$/;"	f	class:BColors::Color
Color	BWidgets/BColors.hpp	/^class Color$/;"	c	namespace:BColors
ColorSet	BWidgets/BColors.cpp	/^ColorSet::ColorSet () : ColorSet ({grey, lightgrey, darkgrey}) {};$/;"	f	class:BColors::ColorSet
ColorSet	BWidgets/BColors.cpp	/^ColorSet::ColorSet (const std::vector<Color> vectorOfColors) : colors (vectorOfColors) {};$/;"	f	class:BColors::ColorSet
ColorSet	BWidgets/BColors.hpp	/^class ColorSet$/;"	c	namespace:BColors
DB_CO	BAmp.cpp	6;"	d	file:
DRAWINGSURFACE_HPP_	BWidgets/DrawingSurface.hpp	19;"	d
DSPFLAGS	makefile	/^DSPFLAGS = `pkg-config --cflags --libs lv2`$/;"	m
Data	BUtilities/Any.hpp	/^                Data (const T& t) : data (t) {}$/;"	f	struct:BUtilities::Any::Data
Data	BUtilities/Any.hpp	/^        template <class T> struct Data : Envelope$/;"	s	class:BUtilities::Any
DeviceGrab	BWidgets/BDevices.hpp	/^	DeviceGrab () : DeviceGrab (nullptr, std::set<T> {}) {}$/;"	f	class:BDevices::DeviceGrab
DeviceGrab	BWidgets/BDevices.hpp	/^	DeviceGrab (BWidgets::Widget* widget) :$/;"	f	class:BDevices::DeviceGrab
DeviceGrab	BWidgets/BDevices.hpp	/^	DeviceGrab (BWidgets::Widget* widget, const T& device) :$/;"	f	class:BDevices::DeviceGrab
DeviceGrab	BWidgets/BDevices.hpp	/^	DeviceGrab (BWidgets::Widget* widget, const std::set<T>& devices) :$/;"	f	class:BDevices::DeviceGrab
DeviceGrab	BWidgets/BDevices.hpp	/^template<typename T> class DeviceGrab$/;"	c	namespace:BDevices
DeviceGrabStack	BWidgets/BDevices.hpp	/^template<typename T> class DeviceGrabStack : std::list<DeviceGrab<T>>$/;"	c	namespace:BDevices
Dial	BWidgets/Dial.cpp	/^Dial::Dial () : Dial (0.0, 0.0, BWIDGETS_DEFAULT_DIAL_WIDTH, BWIDGETS_DEFAULT_DIAL_HEIGHT, "dial",$/;"	f	class:BWidgets::Dial
Dial	BWidgets/Dial.cpp	/^Dial::Dial (const Dial& that) :$/;"	f	class:BWidgets::Dial
Dial	BWidgets/Dial.cpp	/^Dial::Dial (const double x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::Dial
Dial	BWidgets/Dial.hpp	/^class Dial : public RangeWidget, public Focusable$/;"	c	namespace:BWidgets
DialValue	BWidgets/DialValue.cpp	/^DialValue::DialValue () :$/;"	f	class:BWidgets::DialValue
DialValue	BWidgets/DialValue.cpp	/^DialValue::DialValue (const DialValue& that) :$/;"	f	class:BWidgets::DialValue
DialValue	BWidgets/DialValue.cpp	/^DialValue::DialValue (const double x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::DialValue
DialValue	BWidgets/DialValue.hpp	/^class DialValue : public Dial$/;"	c	namespace:BWidgets
Display	BWidgets/Display.cpp	/^Display::Display () : Display (0.0, 0.0, 0.0, 0.0, "display") {}$/;"	f	class:BWidgets::Display
Display	BWidgets/Display.cpp	/^Display::Display (const double x, const double y, const double width,$/;"	f	class:BWidgets::Display
Display	BWidgets/Display.hpp	/^class Display : public Widget$/;"	c	namespace:BWidgets
DownButton	BWidgets/DownButton.cpp	/^DownButton::DownButton () :$/;"	f	class:BWidgets::DownButton
DownButton	BWidgets/DownButton.cpp	/^DownButton::DownButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::DownButton
DownButton	BWidgets/DownButton.hpp	/^class DownButton : public Button$/;"	c	namespace:BWidgets
DrawingSurface	BWidgets/DrawingSurface.cpp	/^DrawingSurface::DrawingSurface () : DrawingSurface (0.0, 0.0, BWIDGETS_DEFAULT_WIDTH, BWIDGETS_DEFAULT_HEIGHT, "drawingsurface") {}$/;"	f	class:BWidgets::DrawingSurface
DrawingSurface	BWidgets/DrawingSurface.cpp	/^DrawingSurface::DrawingSurface (const DrawingSurface& that) :$/;"	f	class:BWidgets::DrawingSurface
DrawingSurface	BWidgets/DrawingSurface.cpp	/^DrawingSurface::DrawingSurface (const double x, const double y, const double width, const double height, const std::string& name) :$/;"	f	class:BWidgets::DrawingSurface
DrawingSurface	BWidgets/DrawingSurface.hpp	/^class DrawingSurface : public Widget$/;"	c	namespace:BWidgets
EXPOSE_REQUEST_EVENT	BWidgets/BEvents.hpp	/^	EXPOSE_REQUEST_EVENT,$/;"	e	enum:BEvents::EventType
Envelope	BUtilities/Any.hpp	/^        struct Envelope$/;"	s	class:BUtilities::Any
Event	BWidgets/BEvents.hpp	/^	Event () :$/;"	f	class:BEvents::Event
Event	BWidgets/BEvents.hpp	/^	Event (BWidgets::Widget* widget, const EventType type) :$/;"	f	class:BEvents::Event
Event	BWidgets/BEvents.hpp	/^class Event$/;"	c	namespace:BEvents
EventType	BWidgets/BEvents.hpp	/^enum EventType$/;"	g	namespace:BEvents
ExposeEvent	BWidgets/BEvents.hpp	/^	ExposeEvent () :$/;"	f	class:BEvents::ExposeEvent
ExposeEvent	BWidgets/BEvents.hpp	/^	ExposeEvent (BWidgets::Widget* eventWidget, BWidgets::Widget* requestWidget, const EventType type,$/;"	f	class:BEvents::ExposeEvent
ExposeEvent	BWidgets/BEvents.hpp	/^class ExposeEvent : public WidgetEvent$/;"	c	namespace:BEvents
FABS	BWidgets/cairoplus.c	25;"	d	file:
FAIL_IF	BWidgets/pugl/implementation.c	313;"	d	file:
FOCUS_IN_EVENT	BWidgets/BEvents.hpp	/^	FOCUS_IN_EVENT,$/;"	e	enum:BEvents::EventType
FOCUS_OUT_EVENT	BWidgets/BEvents.hpp	/^	FOCUS_OUT_EVENT,$/;"	e	enum:BEvents::EventType
FileChooser	BWidgets/FileChooser.cpp	/^FileChooser::FileChooser () : FileChooser (0.0, 0.0, 0.0, 0.0, "FileChooser") {}$/;"	f	class:BWidgets::FileChooser
FileChooser	BWidgets/FileChooser.cpp	/^FileChooser::FileChooser (const FileChooser& that) :$/;"	f	class:BWidgets::FileChooser
FileChooser	BWidgets/FileChooser.cpp	/^FileChooser::FileChooser (const double x, const double y, const double width, const double height, const std::string& name) :$/;"	f	class:BWidgets::FileChooser
FileChooser	BWidgets/FileChooser.cpp	/^FileChooser::FileChooser (const double x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::FileChooser
FileChooser	BWidgets/FileChooser.hpp	/^class FileChooser : public ValueWidget$/;"	c	namespace:BWidgets
FileFilter	BWidgets/FileChooser.hpp	/^struct FileFilter$/;"	s	namespace:BWidgets
Fill	BWidgets/BStyles.cpp	/^Fill::Fill () : fillColor (BColors::invisible), fillSurface (nullptr) {}$/;"	f	class:BStyles::Fill
Fill	BWidgets/BStyles.cpp	/^Fill::Fill (const BColors::Color& color) : fillColor (color), fillSurface (nullptr) {}$/;"	f	class:BStyles::Fill
Fill	BWidgets/BStyles.cpp	/^Fill::Fill (const Fill& that)$/;"	f	class:BStyles::Fill
Fill	BWidgets/BStyles.cpp	/^Fill::Fill (const std::string& filename) : fillColor (BColors::invisible), fillSurface (nullptr)$/;"	f	class:BStyles::Fill
Fill	BWidgets/BStyles.hpp	/^class Fill$/;"	c	namespace:BStyles
FocusEvent	BWidgets/BEvents.hpp	/^	FocusEvent () :$/;"	f	class:BEvents::FocusEvent
FocusEvent	BWidgets/BEvents.hpp	/^	FocusEvent (BWidgets::Widget* widget, const EventType type, const BUtilities::Point& point) :$/;"	f	class:BEvents::FocusEvent
FocusEvent	BWidgets/BEvents.hpp	/^	FocusEvent (BWidgets::Widget* widget, const EventType type, const double x, const double y) :$/;"	f	class:BEvents::FocusEvent
FocusEvent	BWidgets/BEvents.hpp	/^class FocusEvent : public Event$/;"	c	namespace:BEvents
Focusable	BWidgets/Focusable.hpp	/^        Focusable (const std::chrono::milliseconds focusInMs, const std::chrono::milliseconds focusOutMs) :$/;"	f	class:BWidgets::Focusable
Focusable	BWidgets/Focusable.hpp	/^class Focusable$/;"	c	namespace:BWidgets
Font	BWidgets/BStyles.cpp	/^Font::Font () : Font ("Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL, 12.0) {}$/;"	f	class:BStyles::Font
Font	BWidgets/BStyles.cpp	/^Font::Font (const std::string& family, const cairo_font_slant_t slant, const cairo_font_weight_t weight, const double size,$/;"	f	class:BStyles::Font
Font	BWidgets/BStyles.hpp	/^class Font$/;"	c	namespace:BStyles
GUICFLAGS	makefile	/^GUICFLAGS = `pkg-config --cflags lv2 x11 cairo`$/;"	m
GUILFLAGS	makefile	/^GUILFLAGS = `pkg-config --libs lv2 x11 cairo`$/;"	m
GWLP_USERDATA	BWidgets/pugl/win.c	44;"	d	file:
HPianoRoll	BWidgets/HPianoRoll.cpp	/^HPianoRoll::HPianoRoll () : HPianoRoll (0, 0, 0, 0, "piano", 0, 0) {}$/;"	f	class:BWidgets::HPianoRoll
HPianoRoll	BWidgets/HPianoRoll.cpp	/^HPianoRoll::HPianoRoll (const double x, const double y, const double width, const double height, const std::string& name) :$/;"	f	class:BWidgets::HPianoRoll
HPianoRoll	BWidgets/HPianoRoll.cpp	/^HPianoRoll::HPianoRoll (const double x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::HPianoRoll
HPianoRoll	BWidgets/HPianoRoll.hpp	/^class HPianoRoll : public PianoWidget$/;"	c	namespace:BWidgets
HScale	BWidgets/HScale.cpp	/^HScale::HScale () : HScale (0.0, 0.0, BWIDGETS_DEFAULT_HSCALE_WIDTH, BWIDGETS_DEFAULT_HSCALE_HEIGHT, "hscale",$/;"	f	class:BWidgets::HScale
HScale	BWidgets/HScale.cpp	/^HScale::HScale (const HScale& that) :$/;"	f	class:BWidgets::HScale
HScale	BWidgets/HScale.cpp	/^HScale::HScale (const double  x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::HScale
HScale	BWidgets/HScale.hpp	/^class HScale : public RangeWidget$/;"	c	namespace:BWidgets
HSlider	BWidgets/HSlider.cpp	/^HSlider::HSlider () : HSlider (0.0, 0.0, BWIDGETS_DEFAULT_HSLIDER_WIDTH, BWIDGETS_DEFAULT_HSLIDER_HEIGHT, "hslider",$/;"	f	class:BWidgets::HSlider
HSlider	BWidgets/HSlider.cpp	/^HSlider::HSlider (const HSlider& that) :$/;"	f	class:BWidgets::HSlider
HSlider	BWidgets/HSlider.cpp	/^HSlider::HSlider (const double  x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::HSlider
HSlider	BWidgets/HSlider.hpp	/^class HSlider : public HScale, public Focusable$/;"	c	namespace:BWidgets
HSliderValue	BWidgets/HSliderValue.cpp	/^HSliderValue::HSliderValue () :$/;"	f	class:BWidgets::HSliderValue
HSliderValue	BWidgets/HSliderValue.cpp	/^HSliderValue::HSliderValue (const HSliderValue& that) :$/;"	f	class:BWidgets::HSliderValue
HSliderValue	BWidgets/HSliderValue.cpp	/^HSliderValue::HSliderValue (const double x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::HSliderValue
HSliderValue	BWidgets/HSliderValue.hpp	/^class HSliderValue : public HSlider$/;"	c	namespace:BWidgets
HSwitch	BWidgets/HSwitch.cpp	/^HSwitch::HSwitch () : HSwitch (0.0, 0.0, BWIDGETS_DEFAULT_HSWITCH_WIDTH, BWIDGETS_DEFAULT_HSWITCH_HEIGHT, "hswitch", BWIDGETS_DEFAULT_VALUE) {}$/;"	f	class:BWidgets::HSwitch
HSwitch	BWidgets/HSwitch.cpp	/^HSwitch::HSwitch (const double  x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::HSwitch
HSwitch	BWidgets/HSwitch.hpp	/^class HSwitch : public HSlider$/;"	c	namespace:BWidgets
ICON_HPP_	BWidgets/Icon.hpp	19;"	d
IMAGEICON_HPP_	BWidgets/ImageIcon.hpp	19;"	d
INACTIVE	BWidgets/BColors.hpp	/^	INACTIVE	= 2,$/;"	e	enum:BColors::__anon5
Icon	BWidgets/Icon.cpp	/^Icon::Icon () : Icon (0.0, 0.0, BWIDGETS_DEFAULT_WIDTH, BWIDGETS_DEFAULT_HEIGHT, "icon") {}$/;"	f	class:BWidgets::Icon
Icon	BWidgets/Icon.cpp	/^Icon::Icon (const Icon& that) : Widget (that)$/;"	f	class:BWidgets::Icon
Icon	BWidgets/Icon.cpp	/^Icon::Icon (const double x, const double y, const double width, const double height, const std::string& name) :$/;"	f	class:BWidgets::Icon
Icon	BWidgets/Icon.hpp	/^class Icon : public Widget$/;"	c	namespace:BWidgets
ImageIcon	BWidgets/ImageIcon.cpp	/^ImageIcon::ImageIcon () : ImageIcon (0.0, 0.0, BWIDGETS_DEFAULT_WIDTH, BWIDGETS_DEFAULT_HEIGHT, "icon") {}$/;"	f	class:BWidgets::ImageIcon
ImageIcon	BWidgets/ImageIcon.cpp	/^ImageIcon::ImageIcon (const double x, const double y, const double width, const double height,$/;"	f	class:BWidgets::ImageIcon
ImageIcon	BWidgets/ImageIcon.hpp	/^class ImageIcon : public Icon$/;"	c	namespace:BWidgets
Item	BWidgets/BItems.cpp	/^Item::Item () : Item (UNSELECTED, nullptr) {}$/;"	f	class:BItems::Item
Item	BWidgets/BItems.cpp	/^Item::Item (const Item& that) :$/;"	f	class:BItems::Item
Item	BWidgets/BItems.cpp	/^Item::Item (const double value, BWidgets::Widget* widget) :$/;"	f	class:BItems::Item
Item	BWidgets/BItems.cpp	/^Item::Item (const double value, const std::string& text) :$/;"	f	class:BItems::Item
Item	BWidgets/BItems.hpp	/^class Item$/;"	c	namespace:BItems
ItemBox	BWidgets/ItemBox.cpp	/^ItemBox::ItemBox () :$/;"	f	class:BWidgets::ItemBox
ItemBox	BWidgets/ItemBox.cpp	/^ItemBox::ItemBox (const ItemBox& that) :$/;"	f	class:BWidgets::ItemBox
ItemBox	BWidgets/ItemBox.cpp	/^ItemBox::ItemBox (const double x, const double y, const double width,$/;"	f	class:BWidgets::ItemBox
ItemBox	BWidgets/ItemBox.hpp	/^class ItemBox : public ValueWidget$/;"	c	namespace:BWidgets
ItemList	BWidgets/BItems.cpp	/^ItemList::ItemList () : std::list<Item> () {}$/;"	f	class:BItems::ItemList
ItemList	BWidgets/BItems.cpp	/^ItemList::ItemList (BWidgets::Widget* widget) :$/;"	f	class:BItems::ItemList
ItemList	BWidgets/BItems.cpp	/^ItemList::ItemList (const Item& item) : std::list<Item> ({item}) {}$/;"	f	class:BItems::ItemList
ItemList	BWidgets/BItems.cpp	/^ItemList::ItemList (const std::initializer_list<BWidgets::Widget*>& widgets) :$/;"	f	class:BItems::ItemList
ItemList	BWidgets/BItems.cpp	/^ItemList::ItemList (const std::initializer_list<std::string>& texts) :$/;"	f	class:BItems::ItemList
ItemList	BWidgets/BItems.cpp	/^ItemList::ItemList (const std::list<Item>& items) :$/;"	f	class:BItems::ItemList
ItemList	BWidgets/BItems.cpp	/^ItemList::ItemList (const std::string& text) :$/;"	f	class:BItems::ItemList
ItemList	BWidgets/BItems.hpp	/^class ItemList : private std::list<Item>$/;"	c	namespace:BItems
KEY_ALT	BWidgets/BDevices.hpp	/^	KEY_ALT,$/;"	e	enum:BDevices::KeyCode
KEY_CTRL	BWidgets/BDevices.hpp	/^	KEY_CTRL,$/;"	e	enum:BDevices::KeyCode
KEY_DOWN	BWidgets/BDevices.hpp	/^	KEY_DOWN,$/;"	e	enum:BDevices::KeyCode
KEY_END	BWidgets/BDevices.hpp	/^	KEY_END,$/;"	e	enum:BDevices::KeyCode
KEY_F1	BWidgets/BDevices.hpp	/^	KEY_F1 = 0xE000,$/;"	e	enum:BDevices::KeyCode
KEY_F10	BWidgets/BDevices.hpp	/^	KEY_F10,$/;"	e	enum:BDevices::KeyCode
KEY_F11	BWidgets/BDevices.hpp	/^	KEY_F11,$/;"	e	enum:BDevices::KeyCode
KEY_F12	BWidgets/BDevices.hpp	/^	KEY_F12,$/;"	e	enum:BDevices::KeyCode
KEY_F2	BWidgets/BDevices.hpp	/^	KEY_F2,$/;"	e	enum:BDevices::KeyCode
KEY_F3	BWidgets/BDevices.hpp	/^	KEY_F3,$/;"	e	enum:BDevices::KeyCode
KEY_F4	BWidgets/BDevices.hpp	/^	KEY_F4,$/;"	e	enum:BDevices::KeyCode
KEY_F5	BWidgets/BDevices.hpp	/^	KEY_F5,$/;"	e	enum:BDevices::KeyCode
KEY_F6	BWidgets/BDevices.hpp	/^	KEY_F6,$/;"	e	enum:BDevices::KeyCode
KEY_F7	BWidgets/BDevices.hpp	/^	KEY_F7,$/;"	e	enum:BDevices::KeyCode
KEY_F8	BWidgets/BDevices.hpp	/^	KEY_F8,$/;"	e	enum:BDevices::KeyCode
KEY_F9	BWidgets/BDevices.hpp	/^	KEY_F9,$/;"	e	enum:BDevices::KeyCode
KEY_HOME	BWidgets/BDevices.hpp	/^	KEY_HOME,$/;"	e	enum:BDevices::KeyCode
KEY_INSERT	BWidgets/BDevices.hpp	/^	KEY_INSERT,$/;"	e	enum:BDevices::KeyCode
KEY_LEFT	BWidgets/BDevices.hpp	/^	KEY_LEFT,$/;"	e	enum:BDevices::KeyCode
KEY_PAGE_DOWN	BWidgets/BDevices.hpp	/^	KEY_PAGE_DOWN,$/;"	e	enum:BDevices::KeyCode
KEY_PAGE_UP	BWidgets/BDevices.hpp	/^	KEY_PAGE_UP,$/;"	e	enum:BDevices::KeyCode
KEY_PRESS_EVENT	BWidgets/BEvents.hpp	/^	KEY_PRESS_EVENT,$/;"	e	enum:BEvents::EventType
KEY_RELEASE_EVENT	BWidgets/BEvents.hpp	/^	KEY_RELEASE_EVENT,$/;"	e	enum:BEvents::EventType
KEY_RIGHT	BWidgets/BDevices.hpp	/^	KEY_RIGHT,$/;"	e	enum:BDevices::KeyCode
KEY_SHIFT	BWidgets/BDevices.hpp	/^	KEY_SHIFT,$/;"	e	enum:BDevices::KeyCode
KEY_SUPER	BWidgets/BDevices.hpp	/^	KEY_SUPER$/;"	e	enum:BDevices::KeyCode
KEY_UP	BWidgets/BDevices.hpp	/^	KEY_UP,$/;"	e	enum:BDevices::KeyCode
KeyCode	BWidgets/BDevices.hpp	/^enum KeyCode {$/;"	g	namespace:BDevices
KeyCoords	BWidgets/PianoWidget.hpp	/^} KeyCoords;$/;"	t	namespace:BWidgets	typeref:struct:BWidgets::__anon6
KeyEvent	BWidgets/BEvents.hpp	/^	KeyEvent () :$/;"	f	class:BEvents::KeyEvent
KeyEvent	BWidgets/BEvents.hpp	/^	KeyEvent (BWidgets::Widget* widget, const EventType type, const BUtilities::Point& position, const uint32_t unicode) :$/;"	f	class:BEvents::KeyEvent
KeyEvent	BWidgets/BEvents.hpp	/^	KeyEvent (BWidgets::Widget* widget, const EventType type, const double x, const double y, const uint32_t unicode) :$/;"	f	class:BEvents::KeyEvent
KeyEvent	BWidgets/BEvents.hpp	/^ class KeyEvent : public Event$/;"	c	namespace:BEvents
Knob	BWidgets/Knob.cpp	/^Knob::Knob () : Knob (0.0, 0.0, BWIDGETS_DEFAULT_KNOB_WIDTH, BWIDGETS_DEFAULT_KNOB_HEIGHT, BWIDGETS_DEFAULT_KNOB_DEPTH, "knob") {}$/;"	f	class:BWidgets::Knob
Knob	BWidgets/Knob.cpp	/^Knob::Knob (const Knob& that) : Widget (that), knobDepth (that.knobDepth), bgColors (that.bgColors){}$/;"	f	class:BWidgets::Knob
Knob	BWidgets/Knob.cpp	/^Knob::Knob (const double  x, const double y, const double width, const double height, const double depth, const std::string& name) :$/;"	f	class:BWidgets::Knob
Knob	BWidgets/Knob.hpp	/^class Knob : public Widget$/;"	c	namespace:BWidgets
LABEL_BOTTOM	BWidgets/Label.hpp	/^	LABEL_BOTTOM,$/;"	e	enum:BWidgets::LabelPosition
LABEL_CENTER	BWidgets/Label.hpp	/^	LABEL_CENTER,$/;"	e	enum:BWidgets::LabelPosition
LABEL_LEFT	BWidgets/Label.hpp	/^	LABEL_LEFT$/;"	e	enum:BWidgets::LabelPosition
LABEL_RIGHT	BWidgets/Label.hpp	/^	LABEL_RIGHT,$/;"	e	enum:BWidgets::LabelPosition
LABEL_TOP	BWidgets/Label.hpp	/^	LABEL_TOP,$/;"	e	enum:BWidgets::LabelPosition
LEFT_BUTTON	BWidgets/BDevices.hpp	/^	LEFT_BUTTON	= 1,$/;"	e	enum:BDevices::ButtonCode
LIMIT	BWidgets/BColors.cpp	21;"	d	file:
LIMIT	BWidgets/BColors.hpp	26;"	d
LIMIT	BWidgets/RangeWidget.cpp	21;"	d	file:
LV2DIR	makefile	/^LV2DIR ?= $(PREFIX)\/lib\/lv2$/;"	m
Label	BWidgets/Label.cpp	/^Label::Label () : Label (0.0, 0.0, 0.0, 0.0, "label", "") {}$/;"	f	class:BWidgets::Label
Label	BWidgets/Label.cpp	/^Label::Label (const double x, const double y, const double width, const double height, const std::string& name, const std::string& text) :$/;"	f	class:BWidgets::Label
Label	BWidgets/Label.cpp	/^Label::Label (const double x, const double y, const double width, const double height, const std::string& text) :$/;"	f	class:BWidgets::Label
Label	BWidgets/Label.hpp	/^class Label : public Widget$/;"	c	namespace:BWidgets
LabelPosition	BWidgets/Label.hpp	/^enum LabelPosition$/;"	g	namespace:BWidgets
LeftButton	BWidgets/LeftButton.cpp	/^LeftButton::LeftButton () :$/;"	f	class:BWidgets::LeftButton
LeftButton	BWidgets/LeftButton.cpp	/^LeftButton::LeftButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::LeftButton
LeftButton	BWidgets/LeftButton.hpp	/^class LeftButton : public Button$/;"	c	namespace:BWidgets
Line	BWidgets/BStyles.cpp	/^Line::Line () : Line (BColors::invisible, 0.0) {}$/;"	f	class:BStyles::Line
Line	BWidgets/BStyles.cpp	/^Line::Line (const BColors::Color& color, const double width) : lineColor (color), lineWidth (width) {}$/;"	f	class:BStyles::Line
Line	BWidgets/BStyles.hpp	/^class Line$/;"	c	namespace:BStyles
ListBox	BWidgets/ListBox.cpp	/^ListBox::ListBox () :$/;"	f	class:BWidgets::ListBox
ListBox	BWidgets/ListBox.cpp	/^ListBox::ListBox (const ListBox& that) : ChoiceBox (that), listTop (that.listTop) {}$/;"	f	class:BWidgets::ListBox
ListBox	BWidgets/ListBox.cpp	/^ListBox::ListBox (const double x, const double y, const double width, const double height,$/;"	f	class:BWidgets::ListBox
ListBox	BWidgets/ListBox.hpp	/^class ListBox : public ChoiceBox$/;"	c	namespace:BWidgets
MAX	BWidgets/pugl/x11.c	63;"	d	file:
MESSAGE_EVENT	BWidgets/BEvents.hpp	/^	MESSAGE_EVENT,$/;"	e	enum:BEvents::EventType
MIDDLE_BUTTON	BWidgets/BDevices.hpp	/^	MIDDLE_BUTTON	= 2,$/;"	e	enum:BDevices::ButtonCode
MIN	BWidgets/pugl/x11.c	59;"	d	file:
MessageBox	BWidgets/MessageBox.cpp	/^MessageBox::MessageBox () : MessageBox (0.0, 0.0, 0.0, 0.0, "messagebox", "", "MessageBox") {}$/;"	f	class:BWidgets::MessageBox
MessageBox	BWidgets/MessageBox.cpp	/^MessageBox::MessageBox (const MessageBox& that) : ValueWidget (that)$/;"	f	class:BWidgets::MessageBox
MessageBox	BWidgets/MessageBox.cpp	/^MessageBox::MessageBox (const double x, const double y, const double width, const double height,$/;"	f	class:BWidgets::MessageBox
MessageBox	BWidgets/MessageBox.hpp	/^class MessageBox : public ValueWidget$/;"	c	namespace:BWidgets
MessageEvent	BWidgets/BEvents.hpp	/^	MessageEvent () :$/;"	f	class:BEvents::MessageEvent
MessageEvent	BWidgets/BEvents.hpp	/^	MessageEvent (BWidgets::Widget* widget, const std::string& name, const BUtilities::Any& content) :$/;"	f	class:BEvents::MessageEvent
MessageEvent	BWidgets/BEvents.hpp	/^class MessageEvent : public Event$/;"	c	namespace:BEvents
MinusButton	BWidgets/MinusButton.cpp	/^MinusButton::MinusButton () :$/;"	f	class:BWidgets::MinusButton
MinusButton	BWidgets/MinusButton.cpp	/^MinusButton::MinusButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::MinusButton
MinusButton	BWidgets/MinusButton.hpp	/^class MinusButton : public Button$/;"	c	namespace:BWidgets
MouseDevice	BWidgets/BDevices.hpp	/^	MouseDevice () : MouseDevice (NO_BUTTON, BUtilities::Point ()) {}$/;"	f	class:BDevices::MouseDevice
MouseDevice	BWidgets/BDevices.hpp	/^	MouseDevice (const ButtonCode but) : MouseDevice (but, BUtilities::Point ()) {}$/;"	f	class:BDevices::MouseDevice
MouseDevice	BWidgets/BDevices.hpp	/^	MouseDevice (const ButtonCode but, const BUtilities::Point& pos) :$/;"	f	class:BDevices::MouseDevice
MouseDevice	BWidgets/BDevices.hpp	/^class MouseDevice$/;"	c	namespace:BDevices
NET_WM_NAME	BWidgets/pugl/x11.h	/^  Atom NET_WM_NAME;$/;"	m	struct:__anon7
NET_WM_STATE	BWidgets/pugl/x11.h	/^  Atom NET_WM_STATE;$/;"	m	struct:__anon7
NET_WM_STATE_DEMANDS_ATTENTION	BWidgets/pugl/x11.h	/^  Atom NET_WM_STATE_DEMANDS_ATTENTION;$/;"	m	struct:__anon7
NORMAL	BWidgets/BColors.hpp	/^	NORMAL		= 0,$/;"	e	enum:BColors::__anon5
NO_BUTTON	BWidgets/BDevices.hpp	/^	NO_BUTTON	= 0,$/;"	e	enum:BDevices::ButtonCode
NO_EVENT	BWidgets/BEvents.hpp	/^	NO_EVENT$/;"	e	enum:BEvents::EventType
NR_OF_BUTTONS	BWidgets/BDevices.hpp	/^	NR_OF_BUTTONS	= 4$/;"	e	enum:BDevices::ButtonCode
OFF	BWidgets/BColors.hpp	/^	OFF		= 3,$/;"	e	enum:BColors::__anon5
PFN_SetProcessDPIAware	BWidgets/pugl/win.c	/^typedef BOOL(WINAPI* PFN_SetProcessDPIAware)(void);$/;"	t	file:
PI	BWidgets/cairoplus.c	21;"	d	file:
POINTER_DRAG_EVENT	BWidgets/BEvents.hpp	/^	POINTER_DRAG_EVENT,$/;"	e	enum:BEvents::EventType
POINTER_MOTION_EVENT	BWidgets/BEvents.hpp	/^	POINTER_MOTION_EVENT,$/;"	e	enum:BEvents::EventType
PREFIX	makefile	/^PREFIX ?= \/usr\/local$/;"	m
PUGL_ALPHA_BITS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_ALPHA_BITS,            \/\/\/< Number of bits for alpha channel$/;"	e	enum:__anon38
PUGL_API	BWidgets/pugl/pugl/pugl.h	24;"	d
PUGL_BACKEND_FAILED	BWidgets/pugl/pugl/pugl.h	/^  PUGL_BACKEND_FAILED,        \/\/\/< Backend initialization failed$/;"	e	enum:__anon35
PUGL_BAD_BACKEND	BWidgets/pugl/pugl/pugl.h	/^  PUGL_BAD_BACKEND,           \/\/\/< Invalid or missing backend$/;"	e	enum:__anon35
PUGL_BAD_CONFIGURATION	BWidgets/pugl/pugl/pugl.h	/^  PUGL_BAD_CONFIGURATION,     \/\/\/< Invalid view configuration$/;"	e	enum:__anon35
PUGL_BAD_PARAMETER	BWidgets/pugl/pugl/pugl.h	/^  PUGL_BAD_PARAMETER,         \/\/\/< Invalid parameter$/;"	e	enum:__anon35
PUGL_BEGIN_DECLS	BWidgets/pugl/pugl/pugl.h	47;"	d
PUGL_BEGIN_DECLS	BWidgets/pugl/pugl/pugl.h	50;"	d
PUGL_BLUE_BITS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_BLUE_BITS,             \/\/\/< Number of bits for blue channel$/;"	e	enum:__anon38
PUGL_BUTTON_PRESS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_BUTTON_PRESS,   \/\/\/< Mouse button pressed, a #PuglEventButton$/;"	e	enum:__anon18
PUGL_BUTTON_RELEASE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_BUTTON_RELEASE, \/\/\/< Mouse button released, a #PuglEventButton$/;"	e	enum:__anon18
PUGL_CAIRO_H	BWidgets/pugl/pugl/cairo.h	18;"	d
PUGL_CLIENT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CLIENT,         \/\/\/< Custom client message, a #PuglEventClient$/;"	e	enum:__anon18
PUGL_CLIENT_MSG	BWidgets/pugl/x11.h	/^  Atom PUGL_CLIENT_MSG;$/;"	m	struct:__anon7
PUGL_CLOSE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CLOSE,          \/\/\/< View will be closed, a #PuglEventClose$/;"	e	enum:__anon18
PUGL_CONFIGURE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CONFIGURE,      \/\/\/< View moved\/resized, a #PuglEventConfigure$/;"	e	enum:__anon18
PUGL_CONST_API	BWidgets/pugl/pugl/pugl.h	42;"	d
PUGL_CONST_FUNC	BWidgets/pugl/pugl/pugl.h	37;"	d
PUGL_CONST_FUNC	BWidgets/pugl/pugl/pugl.h	39;"	d
PUGL_CONTEXT_VERSION_MAJOR	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CONTEXT_VERSION_MAJOR, \/\/\/< OpenGL context major version$/;"	e	enum:__anon38
PUGL_CONTEXT_VERSION_MINOR	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CONTEXT_VERSION_MINOR, \/\/\/< OpenGL context minor version$/;"	e	enum:__anon38
PUGL_CREATE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CREATE,         \/\/\/< View created, a #PuglEventCreate$/;"	e	enum:__anon18
PUGL_CREATE_CONTEXT_FAILED	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CREATE_CONTEXT_FAILED, \/\/\/< Failed to create drawing context$/;"	e	enum:__anon35
PUGL_CROSSING_GRAB	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CROSSING_GRAB,   \/\/\/< Crossing due to a grab$/;"	e	enum:__anon20
PUGL_CROSSING_NORMAL	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CROSSING_NORMAL, \/\/\/< Crossing due to pointer motion$/;"	e	enum:__anon20
PUGL_CROSSING_UNGRAB	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CROSSING_UNGRAB  \/\/\/< Crossing due to a grab release$/;"	e	enum:__anon20
PUGL_CURSOR_ARROW	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CURSOR_ARROW,      \/\/\/< Default pointing arrow$/;"	e	enum:__anon40
PUGL_CURSOR_CARET	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CURSOR_CARET,      \/\/\/< Caret (I-Beam) for text entry$/;"	e	enum:__anon40
PUGL_CURSOR_CROSSHAIR	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CURSOR_CROSSHAIR,  \/\/\/< Cross-hair$/;"	e	enum:__anon40
PUGL_CURSOR_HAND	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CURSOR_HAND,       \/\/\/< Hand with a pointing finger$/;"	e	enum:__anon40
PUGL_CURSOR_LEFT_RIGHT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CURSOR_LEFT_RIGHT, \/\/\/< Left\/right arrow for horizontal resize$/;"	e	enum:__anon40
PUGL_CURSOR_NO	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CURSOR_NO,         \/\/\/< Operation not allowed$/;"	e	enum:__anon40
PUGL_CURSOR_UP_DOWN	BWidgets/pugl/pugl/pugl.h	/^  PUGL_CURSOR_UP_DOWN,    \/\/\/< Up\/down arrow for vertical resize$/;"	e	enum:__anon40
PUGL_DEPRECATED_BY	BWidgets/pugl/pugl/pugl.h	/^  PUGL_ENTER_NOTIFY  PUGL_DEPRECATED_BY("PUGL_POINTER_IN")  = PUGL_POINTER_IN,$/;"	e	enum:__anon18
PUGL_DEPRECATED_BY	BWidgets/pugl/pugl/pugl.h	/^  PUGL_LEAVE_NOTIFY  PUGL_DEPRECATED_BY("PUGL_POINTER_OUT") = PUGL_POINTER_OUT,$/;"	e	enum:__anon18
PUGL_DEPRECATED_BY	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MOTION_NOTIFY PUGL_DEPRECATED_BY("PUGL_MOTION")      = PUGL_MOTION,$/;"	e	enum:__anon18
PUGL_DEPRECATED_BY	BWidgets/pugl/pugl/pugl.h	28;"	d
PUGL_DEPRECATED_BY	BWidgets/pugl/pugl/pugl.h	30;"	d
PUGL_DEPRECATED_BY	BWidgets/pugl/pugl/pugl.h	32;"	d
PUGL_DEPTH_BITS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_DEPTH_BITS,            \/\/\/< Number of bits for depth buffer$/;"	e	enum:__anon38
PUGL_DESTROY	BWidgets/pugl/pugl/pugl.h	/^  PUGL_DESTROY,        \/\/\/< View destroyed, a #PuglEventDestroy$/;"	e	enum:__anon18
PUGL_DETAIL_MAC_H	BWidgets/pugl/mac.h	19;"	d
PUGL_DETAIL_STUB_H	BWidgets/pugl/stub.h	18;"	d
PUGL_DETAIL_TYPES_H	BWidgets/pugl/types.h	18;"	d
PUGL_DETAIL_WIN_H	BWidgets/pugl/win.h	18;"	d
PUGL_DETAIL_X11_H	BWidgets/pugl/x11.h	18;"	d
PUGL_DONT_CARE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_DONT_CARE = -1, \/\/\/< Use best available value$/;"	e	enum:__anon39
PUGL_DOUBLE_BUFFER	BWidgets/pugl/pugl/pugl.h	/^  PUGL_DOUBLE_BUFFER,         \/\/\/< True if double buffering should be used$/;"	e	enum:__anon38
PUGL_END_DECLS	BWidgets/pugl/pugl/pugl.h	48;"	d
PUGL_END_DECLS	BWidgets/pugl/pugl/pugl.h	51;"	d
PUGL_ENTER_NOTIFY	BWidgets/pugl/pugl/pugl.h	/^  PUGL_ENTER_NOTIFY  PUGL_DEPRECATED_BY("PUGL_POINTER_IN")  = PUGL_POINTER_IN,$/;"	e	enum:__anon18
PUGL_EXPOSE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_EXPOSE,         \/\/\/< View must be drawn, a #PuglEventExpose$/;"	e	enum:__anon18
PUGL_FAILURE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_FAILURE,               \/\/\/< Non-fatal failure$/;"	e	enum:__anon35
PUGL_FALSE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_FALSE     = 0,  \/\/\/< Explicitly false$/;"	e	enum:__anon39
PUGL_FOCUS_IN	BWidgets/pugl/pugl/pugl.h	/^  PUGL_FOCUS_IN,       \/\/\/< Keyboard focus entered view, a #PuglEventFocus$/;"	e	enum:__anon18
PUGL_FOCUS_OUT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_FOCUS_OUT,      \/\/\/< Keyboard focus left view, a #PuglEventFocus$/;"	e	enum:__anon18
PUGL_GL_H	BWidgets/pugl/pugl/gl.h	18;"	d
PUGL_GREEN_BITS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_GREEN_BITS,            \/\/\/< Number of bits for green channel$/;"	e	enum:__anon38
PUGL_IGNORE_KEY_REPEAT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_IGNORE_KEY_REPEAT,     \/\/\/< True if key repeat events are ignored$/;"	e	enum:__anon38
PUGL_IMPLEMENTATION_H	BWidgets/pugl/implementation.h	18;"	d
PUGL_IS_HINT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_IS_HINT       = 2  \/\/\/< Event is a hint (not direct user input)$/;"	e	enum:__anon19
PUGL_IS_SEND_EVENT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_IS_SEND_EVENT = 1, \/\/\/< Event is synthetic$/;"	e	enum:__anon19
PUGL_KEY_ALT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_ALT,$/;"	e	enum:__anon17
PUGL_KEY_ALT_L	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_ALT_L = PUGL_KEY_ALT,$/;"	e	enum:__anon17
PUGL_KEY_ALT_R	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_ALT_R,$/;"	e	enum:__anon17
PUGL_KEY_BACKSPACE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_BACKSPACE = 0x08,$/;"	e	enum:__anon17
PUGL_KEY_CAPS_LOCK	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_CAPS_LOCK,$/;"	e	enum:__anon17
PUGL_KEY_CTRL	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_CTRL,$/;"	e	enum:__anon17
PUGL_KEY_CTRL_L	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_CTRL_L = PUGL_KEY_CTRL,$/;"	e	enum:__anon17
PUGL_KEY_CTRL_R	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_CTRL_R,$/;"	e	enum:__anon17
PUGL_KEY_DELETE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_DELETE    = 0x7F,$/;"	e	enum:__anon17
PUGL_KEY_DOWN	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_DOWN,$/;"	e	enum:__anon17
PUGL_KEY_END	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_END,$/;"	e	enum:__anon17
PUGL_KEY_ESCAPE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_ESCAPE    = 0x1B,$/;"	e	enum:__anon17
PUGL_KEY_F1	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F1 = 0xE000,$/;"	e	enum:__anon17
PUGL_KEY_F10	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F10,$/;"	e	enum:__anon17
PUGL_KEY_F11	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F11,$/;"	e	enum:__anon17
PUGL_KEY_F12	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F12,$/;"	e	enum:__anon17
PUGL_KEY_F2	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F2,$/;"	e	enum:__anon17
PUGL_KEY_F3	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F3,$/;"	e	enum:__anon17
PUGL_KEY_F4	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F4,$/;"	e	enum:__anon17
PUGL_KEY_F5	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F5,$/;"	e	enum:__anon17
PUGL_KEY_F6	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F6,$/;"	e	enum:__anon17
PUGL_KEY_F7	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F7,$/;"	e	enum:__anon17
PUGL_KEY_F8	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F8,$/;"	e	enum:__anon17
PUGL_KEY_F9	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_F9,$/;"	e	enum:__anon17
PUGL_KEY_HOME	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_HOME,$/;"	e	enum:__anon17
PUGL_KEY_INSERT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_INSERT,$/;"	e	enum:__anon17
PUGL_KEY_LEFT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_LEFT,$/;"	e	enum:__anon17
PUGL_KEY_MENU	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_MENU,$/;"	e	enum:__anon17
PUGL_KEY_NUM_LOCK	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_NUM_LOCK,$/;"	e	enum:__anon17
PUGL_KEY_PAGE_DOWN	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_PAGE_DOWN,$/;"	e	enum:__anon17
PUGL_KEY_PAGE_UP	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_PAGE_UP,$/;"	e	enum:__anon17
PUGL_KEY_PAUSE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_PAUSE$/;"	e	enum:__anon17
PUGL_KEY_PRESS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_PRESS,      \/\/\/< Key pressed, a #PuglEventKey$/;"	e	enum:__anon18
PUGL_KEY_PRINT_SCREEN	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_PRINT_SCREEN,$/;"	e	enum:__anon17
PUGL_KEY_RELEASE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_RELEASE,    \/\/\/< Key released, a #PuglEventKey$/;"	e	enum:__anon18
PUGL_KEY_RIGHT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_RIGHT,$/;"	e	enum:__anon17
PUGL_KEY_SCROLL_LOCK	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_SCROLL_LOCK,$/;"	e	enum:__anon17
PUGL_KEY_SHIFT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_SHIFT,$/;"	e	enum:__anon17
PUGL_KEY_SHIFT_L	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_SHIFT_L = PUGL_KEY_SHIFT,$/;"	e	enum:__anon17
PUGL_KEY_SHIFT_R	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_SHIFT_R,$/;"	e	enum:__anon17
PUGL_KEY_SUPER	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_SUPER,$/;"	e	enum:__anon17
PUGL_KEY_SUPER_L	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_SUPER_L = PUGL_KEY_SUPER,$/;"	e	enum:__anon17
PUGL_KEY_SUPER_R	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_SUPER_R,$/;"	e	enum:__anon17
PUGL_KEY_UP	BWidgets/pugl/pugl/pugl.h	/^  PUGL_KEY_UP,$/;"	e	enum:__anon17
PUGL_LEAVE_NOTIFY	BWidgets/pugl/pugl/pugl.h	/^  PUGL_LEAVE_NOTIFY  PUGL_DEPRECATED_BY("PUGL_POINTER_OUT") = PUGL_POINTER_OUT,$/;"	e	enum:__anon18
PUGL_LOCAL_CLIENT_MSG	BWidgets/pugl/win.c	49;"	d	file:
PUGL_LOCAL_CLOSE_MSG	BWidgets/pugl/win.c	47;"	d	file:
PUGL_LOCAL_MARK_MSG	BWidgets/pugl/win.c	48;"	d	file:
PUGL_LOOP_ENTER	BWidgets/pugl/pugl/pugl.h	/^  PUGL_LOOP_ENTER,     \/\/\/< Recursive loop entered, a #PuglEventLoopEnter$/;"	e	enum:__anon18
PUGL_LOOP_LEAVE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_LOOP_LEAVE,     \/\/\/< Recursive loop left, a #PuglEventLoopLeave$/;"	e	enum:__anon18
PUGL_MAP	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MAP,            \/\/\/< View made visible, a #PuglEventMap$/;"	e	enum:__anon18
PUGL_MODULE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MODULE   \/\/\/< Plugin or module within a larger application$/;"	e	enum:__anon36
PUGL_MOD_ALT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MOD_ALT   = 1u << 2u, \/\/\/< Alt\/Option key$/;"	e	enum:__anon16
PUGL_MOD_CTRL	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MOD_CTRL  = 1u << 1u, \/\/\/< Control key$/;"	e	enum:__anon16
PUGL_MOD_SHIFT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MOD_SHIFT = 1u << 0u, \/\/\/< Shift key$/;"	e	enum:__anon16
PUGL_MOD_SUPER	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MOD_SUPER = 1u << 3u  \/\/\/< Mod4\/Command\/Windows key$/;"	e	enum:__anon16
PUGL_MOTION	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MOTION,         \/\/\/< Pointer moved, a #PuglEventMotion$/;"	e	enum:__anon18
PUGL_MOTION_NOTIFY	BWidgets/pugl/pugl/pugl.h	/^  PUGL_MOTION_NOTIFY PUGL_DEPRECATED_BY("PUGL_MOTION")      = PUGL_MOTION,$/;"	e	enum:__anon18
PUGL_NOTHING	BWidgets/pugl/pugl/pugl.h	/^  PUGL_NOTHING,        \/\/\/< No event$/;"	e	enum:__anon18
PUGL_NUM_VIEW_HINTS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_NUM_VIEW_HINTS$/;"	e	enum:__anon38
PUGL_POINTER_IN	BWidgets/pugl/pugl/pugl.h	/^  PUGL_POINTER_IN,     \/\/\/< Pointer entered view, a #PuglEventCrossing$/;"	e	enum:__anon18
PUGL_POINTER_OUT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_POINTER_OUT,    \/\/\/< Pointer left view, a #PuglEventCrossing$/;"	e	enum:__anon18
PUGL_PROGRAM	BWidgets/pugl/pugl/pugl.h	/^  PUGL_PROGRAM, \/\/\/< Top-level application$/;"	e	enum:__anon36
PUGL_PUGL_H	BWidgets/pugl/pugl/pugl.h	18;"	d
PUGL_REALIZE_FAILED	BWidgets/pugl/pugl/pugl.h	/^  PUGL_REALIZE_FAILED,        \/\/\/< System view realization failed$/;"	e	enum:__anon35
PUGL_RED_BITS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_RED_BITS,              \/\/\/< Number of bits for red channel$/;"	e	enum:__anon38
PUGL_REFRESH_RATE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_REFRESH_RATE,          \/\/\/< Refresh rate in Hz$/;"	e	enum:__anon38
PUGL_REGISTRATION_FAILED	BWidgets/pugl/pugl/pugl.h	/^  PUGL_REGISTRATION_FAILED,   \/\/\/< Class registration failed$/;"	e	enum:__anon35
PUGL_RESIZABLE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_RESIZABLE,             \/\/\/< True if view should be resizable$/;"	e	enum:__anon38
PUGL_SAMPLES	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SAMPLES,               \/\/\/< Number of samples per pixel (AA)$/;"	e	enum:__anon38
PUGL_SCROLL	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SCROLL,         \/\/\/< Scrolled, a #PuglEventScroll$/;"	e	enum:__anon18
PUGL_SCROLL_DOWN	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SCROLL_DOWN,  \/\/\/< Scroll down$/;"	e	enum:__anon21
PUGL_SCROLL_LEFT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SCROLL_LEFT,  \/\/\/< Scroll left$/;"	e	enum:__anon21
PUGL_SCROLL_RIGHT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SCROLL_RIGHT, \/\/\/< Scroll right$/;"	e	enum:__anon21
PUGL_SCROLL_SMOOTH	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SCROLL_SMOOTH \/\/\/< Smooth scroll in any direction$/;"	e	enum:__anon21
PUGL_SCROLL_UP	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SCROLL_UP,    \/\/\/< Scroll up$/;"	e	enum:__anon21
PUGL_SET_FORMAT_FAILED	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SET_FORMAT_FAILED,     \/\/\/< Failed to set pixel format$/;"	e	enum:__anon35
PUGL_STENCIL_BITS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_STENCIL_BITS,          \/\/\/< Number of bits for stencil buffer$/;"	e	enum:__anon38
PUGL_STUB_H	BWidgets/pugl/pugl/stub.h	18;"	d
PUGL_SUCCESS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SUCCESS,               \/\/\/< Success$/;"	e	enum:__anon35
PUGL_SWAP_INTERVAL	BWidgets/pugl/pugl/pugl.h	/^  PUGL_SWAP_INTERVAL,         \/\/\/< Number of frames between buffer swaps$/;"	e	enum:__anon38
PUGL_TEXT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_TEXT,           \/\/\/< Character entered, a #PuglEventText$/;"	e	enum:__anon18
PUGL_TIMER	BWidgets/pugl/pugl/pugl.h	/^  PUGL_TIMER,          \/\/\/< Timer triggered, a #PuglEventTimer$/;"	e	enum:__anon18
PUGL_TRUE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_TRUE      = 1   \/\/\/< Explicitly true$/;"	e	enum:__anon39
PUGL_UNKNOWN_ERROR	BWidgets/pugl/pugl/pugl.h	/^  PUGL_UNKNOWN_ERROR,         \/\/\/< Unknown system error$/;"	e	enum:__anon35
PUGL_UNMAP	BWidgets/pugl/pugl/pugl.h	/^  PUGL_UNMAP,          \/\/\/< View made invisible, a #PuglEventUnmap$/;"	e	enum:__anon18
PUGL_UNSUPPORTED_TYPE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_UNSUPPORTED_TYPE,      \/\/\/< Unsupported data type$/;"	e	enum:__anon35
PUGL_UNUSED	BWidgets/pugl/types.h	28;"	d
PUGL_UNUSED	BWidgets/pugl/types.h	30;"	d
PUGL_UNUSED	BWidgets/pugl/types.h	32;"	d
PUGL_UNUSED	BWidgets/pugl/win.c	/^                       PuglWorldFlags PUGL_UNUSED(flags))$/;"	f
PUGL_UNUSED	BWidgets/pugl/win.c	/^puglGetNativeWorld(PuglWorld* PUGL_UNUSED(world))$/;"	f
PUGL_UNUSED	BWidgets/pugl/win.c	/^puglWaitForEvent(PuglView* PUGL_UNUSED(view))$/;"	f
PUGL_UNUSED	BWidgets/pugl/win_vulkan.c	/^puglNewVulkanLoader(PuglWorld* PUGL_UNUSED(world))$/;"	f
PUGL_UNUSED	BWidgets/pugl/x11_vulkan.c	/^puglNewVulkanLoader(PuglWorld* PUGL_UNUSED(world))$/;"	f
PUGL_UPDATE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_UPDATE,         \/\/\/< View ready to draw, a #PuglEventUpdate$/;"	e	enum:__anon18
PUGL_USER_TIMER_MIN	BWidgets/pugl/win.c	50;"	d	file:
PUGL_USE_COMPAT_PROFILE	BWidgets/pugl/pugl/pugl.h	/^  PUGL_USE_COMPAT_PROFILE,    \/\/\/< Use compatible (not core) OpenGL profile$/;"	e	enum:__anon38
PUGL_USE_DEBUG_CONTEXT	BWidgets/pugl/pugl/pugl.h	/^  PUGL_USE_DEBUG_CONTEXT,     \/\/\/< True to use a debug OpenGL context$/;"	e	enum:__anon38
PUGL_VULKAN_H	BWidgets/pugl/pugl/vulkan.h	24;"	d
PUGL_WORLD_THREADS	BWidgets/pugl/pugl/pugl.h	/^  PUGL_WORLD_THREADS = 1u << 0u$/;"	e	enum:__anon37
Path	BUtilities/Path.hpp	/^        Path () : dir_(), file_(), ext_() {}$/;"	f	class:BUtilities::Path
Path	BUtilities/Path.hpp	/^        Path (const std::string& path) {split (path);}$/;"	f	class:BUtilities::Path
Path	BUtilities/Path.hpp	/^class Path$/;"	c	namespace:BUtilities
PianoWidget	BWidgets/PianoWidget.cpp	/^PianoWidget::PianoWidget () : PianoWidget (0, 0, 0, 0, "piano", 0, 0) {}$/;"	f	class:BWidgets::PianoWidget
PianoWidget	BWidgets/PianoWidget.cpp	/^PianoWidget::PianoWidget (const double x, const double y, const double width, const double height, const std::string& name) :$/;"	f	class:BWidgets::PianoWidget
PianoWidget	BWidgets/PianoWidget.cpp	/^PianoWidget::PianoWidget (const double x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::PianoWidget
PianoWidget	BWidgets/PianoWidget.hpp	/^class PianoWidget : public Widget$/;"	c	namespace:BWidgets
PlusButton	BWidgets/PlusButton.cpp	/^PlusButton::PlusButton () :$/;"	f	class:BWidgets::PlusButton
PlusButton	BWidgets/PlusButton.cpp	/^PlusButton::PlusButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::PlusButton
PlusButton	BWidgets/PlusButton.hpp	/^class PlusButton : public Button$/;"	c	namespace:BWidgets
Point	BUtilities/Point.hpp	/^	Point () : Point (0, 0) {}$/;"	f	struct:BUtilities::Point
Point	BUtilities/Point.hpp	/^	Point (double x, double y) : x (x), y (y) {}$/;"	f	struct:BUtilities::Point
Point	BUtilities/Point.hpp	/^struct Point$/;"	s	namespace:BUtilities
PointerEvent	BWidgets/BEvents.hpp	/^	PointerEvent () :$/;"	f	class:BEvents::PointerEvent
PointerEvent	BWidgets/BEvents.hpp	/^	PointerEvent (BWidgets::Widget* widget, const EventType type, const BUtilities::Point& point,$/;"	f	class:BEvents::PointerEvent
PointerEvent	BWidgets/BEvents.hpp	/^	PointerEvent (BWidgets::Widget* widget, const EventType type,$/;"	f	class:BEvents::PointerEvent
PointerEvent	BWidgets/BEvents.hpp	/^class PointerEvent : public Event$/;"	c	namespace:BEvents
PopupListBox	BWidgets/PopupListBox.cpp	/^PopupListBox::PopupListBox () :$/;"	f	class:BWidgets::PopupListBox
PopupListBox	BWidgets/PopupListBox.cpp	/^PopupListBox::PopupListBox (const PopupListBox& that) :$/;"	f	class:BWidgets::PopupListBox
PopupListBox	BWidgets/PopupListBox.cpp	/^PopupListBox::PopupListBox (const double x, const double y, const double width,$/;"	f	class:BWidgets::PopupListBox
PopupListBox	BWidgets/PopupListBox.hpp	/^class PopupListBox : public ItemBox$/;"	c	namespace:BWidgets
PortIndex	BAmp.h	/^} PortIndex;$/;"	t	typeref:enum:__anon44
PuglBackend	BWidgets/pugl/pugl/pugl.h	/^typedef struct PuglBackendImpl PuglBackend;$/;"	t	typeref:struct:PuglBackendImpl
PuglBackendImpl	BWidgets/pugl/types.h	/^struct PuglBackendImpl {$/;"	s
PuglBlob	BWidgets/pugl/types.h	/^} PuglBlob;$/;"	t	typeref:struct:__anon10
PuglCrossingMode	BWidgets/pugl/pugl/pugl.h	/^} PuglCrossingMode;$/;"	t	typeref:enum:__anon20
PuglCursor	BWidgets/pugl/pugl/pugl.h	/^} PuglCursor;$/;"	t	typeref:enum:__anon40
PuglEvent	BWidgets/pugl/pugl/pugl.h	/^} PuglEvent;$/;"	t	typeref:union:__anon34
PuglEventAny	BWidgets/pugl/pugl/pugl.h	/^} PuglEventAny;$/;"	t	typeref:struct:__anon22
PuglEventButton	BWidgets/pugl/pugl/pugl.h	/^} PuglEventButton;$/;"	t	typeref:struct:__anon29
PuglEventClient	BWidgets/pugl/pugl/pugl.h	/^} PuglEventClient;$/;"	t	typeref:struct:__anon32
PuglEventClose	BWidgets/pugl/pugl/pugl.h	/^typedef PuglEventAny PuglEventClose;$/;"	t
PuglEventConfigure	BWidgets/pugl/pugl/pugl.h	/^} PuglEventConfigure;$/;"	t	typeref:struct:__anon23
PuglEventCreate	BWidgets/pugl/pugl/pugl.h	/^typedef PuglEventAny PuglEventCreate;$/;"	t
PuglEventCrossing	BWidgets/pugl/pugl/pugl.h	/^} PuglEventCrossing;$/;"	t	typeref:struct:__anon28
PuglEventDestroy	BWidgets/pugl/pugl/pugl.h	/^typedef PuglEventAny PuglEventDestroy;$/;"	t
PuglEventExpose	BWidgets/pugl/pugl/pugl.h	/^} PuglEventExpose;$/;"	t	typeref:struct:__anon24
PuglEventFlag	BWidgets/pugl/pugl/pugl.h	/^} PuglEventFlag;$/;"	t	typeref:enum:__anon19
PuglEventFlags	BWidgets/pugl/pugl/pugl.h	/^typedef uint32_t PuglEventFlags;$/;"	t
PuglEventFocus	BWidgets/pugl/pugl/pugl.h	/^} PuglEventFocus;$/;"	t	typeref:struct:__anon25
PuglEventFunc	BWidgets/pugl/pugl/pugl.h	/^typedef PuglStatus (*PuglEventFunc)(PuglView* view, const PuglEvent* event);$/;"	t
PuglEventKey	BWidgets/pugl/pugl/pugl.h	/^} PuglEventKey;$/;"	t	typeref:struct:__anon26
PuglEventLoopEnter	BWidgets/pugl/pugl/pugl.h	/^typedef PuglEventAny PuglEventLoopEnter;$/;"	t
PuglEventLoopLeave	BWidgets/pugl/pugl/pugl.h	/^typedef PuglEventAny PuglEventLoopLeave;$/;"	t
PuglEventMap	BWidgets/pugl/pugl/pugl.h	/^typedef PuglEventAny PuglEventMap;$/;"	t
PuglEventMotion	BWidgets/pugl/pugl/pugl.h	/^} PuglEventMotion;$/;"	t	typeref:struct:__anon30
PuglEventScroll	BWidgets/pugl/pugl/pugl.h	/^} PuglEventScroll;$/;"	t	typeref:struct:__anon31
PuglEventText	BWidgets/pugl/pugl/pugl.h	/^} PuglEventText;$/;"	t	typeref:struct:__anon27
PuglEventTimer	BWidgets/pugl/pugl/pugl.h	/^} PuglEventTimer;$/;"	t	typeref:struct:__anon33
PuglEventType	BWidgets/pugl/pugl/pugl.h	/^} PuglEventType;$/;"	t	typeref:enum:__anon18
PuglEventUnmap	BWidgets/pugl/pugl/pugl.h	/^typedef PuglEventAny PuglEventUnmap;$/;"	t
PuglEventUpdate	BWidgets/pugl/pugl/pugl.h	/^typedef PuglEventAny PuglEventUpdate;$/;"	t
PuglFakeWindow	BWidgets/pugl/win_gl.c	/^} PuglFakeWindow;$/;"	t	typeref:struct:__anon14	file:
PuglGlFunc	BWidgets/pugl/pugl/gl.h	/^typedef void (*PuglGlFunc)(void);$/;"	t
PuglHandle	BWidgets/pugl/pugl/pugl.h	/^typedef void* PuglHandle;$/;"	t
PuglHints	BWidgets/pugl/types.h	/^typedef int PuglHints[PUGL_NUM_VIEW_HINTS];$/;"	t
PuglInternals	BWidgets/pugl/types.h	/^typedef struct PuglInternalsImpl PuglInternals;$/;"	t	typeref:struct:PuglInternalsImpl
PuglInternalsImpl	BWidgets/pugl/mac.h	/^struct PuglInternalsImpl {$/;"	s
PuglInternalsImpl	BWidgets/pugl/win.h	/^struct PuglInternalsImpl {$/;"	s
PuglInternalsImpl	BWidgets/pugl/x11.h	/^struct PuglInternalsImpl {$/;"	s
PuglKey	BWidgets/pugl/pugl/pugl.h	/^} PuglKey;$/;"	t	typeref:enum:__anon17
PuglMod	BWidgets/pugl/pugl/pugl.h	/^} PuglMod;$/;"	t	typeref:enum:__anon16
PuglMods	BWidgets/pugl/pugl/pugl.h	/^typedef uint32_t PuglMods;$/;"	t
PuglNativeView	BWidgets/pugl/pugl/pugl.h	/^typedef uintptr_t PuglNativeView;$/;"	t
PuglNativeWindow	BWidgets/pugl/pugl/pugl.h	/^typedef uintptr_t PuglNativeWindow;$/;"	t
PuglRect	BWidgets/pugl/pugl/pugl.h	/^} PuglRect;$/;"	t	typeref:struct:__anon15
PuglScrollDirection	BWidgets/pugl/pugl/pugl.h	/^} PuglScrollDirection;$/;"	t	typeref:enum:__anon21
PuglStatus	BWidgets/pugl/pugl/pugl.h	/^} PuglStatus;$/;"	t	typeref:enum:__anon35
PuglSurface	BWidgets/pugl/types.h	/^typedef void PuglSurface;$/;"	t
PuglTimer	BWidgets/pugl/x11.h	/^} PuglTimer;$/;"	t	typeref:struct:__anon8
PuglView	BWidgets/pugl/pugl/pugl.h	/^typedef struct PuglViewImpl PuglView;$/;"	t	typeref:struct:PuglViewImpl
PuglViewHint	BWidgets/pugl/pugl/pugl.h	/^} PuglViewHint;$/;"	t	typeref:enum:__anon38
PuglViewHintValue	BWidgets/pugl/pugl/pugl.h	/^} PuglViewHintValue;$/;"	t	typeref:enum:__anon39
PuglViewImpl	BWidgets/pugl/types.h	/^struct PuglViewImpl {$/;"	s
PuglVulkanLoader	BWidgets/pugl/pugl/vulkan.h	/^typedef struct PuglVulkanLoaderImpl PuglVulkanLoader;$/;"	t	typeref:struct:PuglVulkanLoaderImpl
PuglVulkanLoaderImpl	BWidgets/pugl/win_vulkan.c	/^struct PuglVulkanLoaderImpl {$/;"	s	file:
PuglVulkanLoaderImpl	BWidgets/pugl/x11_vulkan.c	/^struct PuglVulkanLoaderImpl {$/;"	s	file:
PuglWinCairoSurface	BWidgets/pugl/win_cairo.c	/^} PuglWinCairoSurface;$/;"	t	typeref:struct:__anon41	file:
PuglWinGlProcs	BWidgets/pugl/win_gl.c	/^} PuglWinGlProcs;$/;"	t	typeref:struct:__anon12	file:
PuglWinGlSurface	BWidgets/pugl/win_gl.c	/^} PuglWinGlSurface;$/;"	t	typeref:struct:__anon13	file:
PuglWinPFD	BWidgets/pugl/win.h	/^typedef PIXELFORMATDESCRIPTOR PuglWinPFD;$/;"	t
PuglWorld	BWidgets/pugl/pugl/pugl.h	/^typedef struct PuglWorldImpl PuglWorld;$/;"	t	typeref:struct:PuglWorldImpl
PuglWorldFlag	BWidgets/pugl/pugl/pugl.h	/^} PuglWorldFlag;$/;"	t	typeref:enum:__anon37
PuglWorldFlags	BWidgets/pugl/pugl/pugl.h	/^typedef uint32_t PuglWorldFlags;$/;"	t
PuglWorldHandle	BWidgets/pugl/pugl/pugl.h	/^typedef void* PuglWorldHandle;$/;"	t
PuglWorldImpl	BWidgets/pugl/types.h	/^struct PuglWorldImpl {$/;"	s
PuglWorldInternals	BWidgets/pugl/types.h	/^typedef struct PuglWorldInternalsImpl PuglWorldInternals;$/;"	t	typeref:struct:PuglWorldInternalsImpl
PuglWorldInternalsImpl	BWidgets/pugl/mac.h	/^struct PuglWorldInternalsImpl {$/;"	s
PuglWorldInternalsImpl	BWidgets/pugl/win.h	/^struct PuglWorldInternalsImpl {$/;"	s
PuglWorldInternalsImpl	BWidgets/pugl/x11.h	/^struct PuglWorldInternalsImpl {$/;"	s
PuglWorldType	BWidgets/pugl/pugl/pugl.h	/^} PuglWorldType;$/;"	t	typeref:enum:__anon36
PuglX11Atoms	BWidgets/pugl/x11.h	/^} PuglX11Atoms;$/;"	t	typeref:struct:__anon7
PuglX11CairoSurface	BWidgets/pugl/x11_cairo.c	/^} PuglX11CairoSurface;$/;"	t	typeref:struct:__anon9	file:
PuglX11GlSurface	BWidgets/pugl/x11_gl.c	/^} PuglX11GlSurface;$/;"	t	typeref:struct:__anon11	file:
RIGHT_BUTTON	BWidgets/BDevices.hpp	/^	RIGHT_BUTTON	= 3,$/;"	e	enum:BDevices::ButtonCode
RangeWidget	BWidgets/RangeWidget.cpp	/^RangeWidget::RangeWidget () :$/;"	f	class:BWidgets::RangeWidget
RangeWidget	BWidgets/RangeWidget.cpp	/^RangeWidget::RangeWidget (const RangeWidget& that) :$/;"	f	class:BWidgets::RangeWidget
RangeWidget	BWidgets/RangeWidget.cpp	/^RangeWidget::RangeWidget (const double  x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::RangeWidget
RangeWidget	BWidgets/RangeWidget.hpp	/^class RangeWidget : public ValueWidget$/;"	c	namespace:BWidgets
RectArea	BUtilities/RectArea.hpp	/^	RectArea () : RectArea (Point (), Point ()) {}$/;"	f	class:BUtilities::RectArea
RectArea	BUtilities/RectArea.hpp	/^	RectArea (const Point& p1, const Point& p2) :$/;"	f	class:BUtilities::RectArea
RectArea	BUtilities/RectArea.hpp	/^	RectArea (const double x1, const double y1, const double width, const double height) :$/;"	f	class:BUtilities::RectArea
RectArea	BUtilities/RectArea.hpp	/^class RectArea$/;"	c	namespace:BUtilities
RightButton	BWidgets/RightButton.cpp	/^RightButton::RightButton () :$/;"	f	class:BWidgets::RightButton
RightButton	BWidgets/RightButton.cpp	/^RightButton::RightButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::RightButton
RightButton	BWidgets/RightButton.hpp	/^class RightButton : public Button$/;"	c	namespace:BWidgets
STACKING_CATCH	BWidgets/Widget.hpp	/^	STACKING_CATCH,$/;"	e	enum:BWidgets::WidgetStacking
STACKING_NORMAL	BWidgets/Widget.hpp	/^	STACKING_NORMAL,$/;"	e	enum:BWidgets::WidgetStacking
STACKING_OVERSIZE	BWidgets/Widget.hpp	/^	STACKING_OVERSIZE$/;"	e	enum:BWidgets::WidgetStacking
STYLEPTR	BWidgets/BStyles.hpp	30;"	d
State	BWidgets/BColors.hpp	/^} State;$/;"	t	namespace:BColors	typeref:enum:BColors::__anon5
StateDisplay	BWidgets/StateDisplay.cpp	/^StateDisplay::StateDisplay () : StateDisplay (0.0, 0.0, 0.0, 0.0, "display") {}$/;"	f	class:BWidgets::StateDisplay
StateDisplay	BWidgets/StateDisplay.cpp	/^StateDisplay::StateDisplay (const double x, const double y, const double width,$/;"	f	class:BWidgets::StateDisplay
StateDisplay	BWidgets/StateDisplay.hpp	/^class StateDisplay : public Display$/;"	c	namespace:BWidgets
Style	BWidgets/BStyles.hpp	/^} Style;$/;"	t	namespace:BStyles	typeref:struct:BStyles::__anon4
StyleSet	BWidgets/BStyles.cpp	/^StyleSet::StyleSet () {}$/;"	f	class:BStyles::StyleSet
StyleSet	BWidgets/BStyles.cpp	/^StyleSet::StyleSet (const std::string& name, const std::vector<Style>& styles) : stylesetName (name), styleVector (styles) {}$/;"	f	class:BStyles::StyleSet
StyleSet	BWidgets/BStyles.hpp	/^class StyleSet {$/;"	c	namespace:BStyles
TEXT_ALIGN_CENTER	BWidgets/BStyles.hpp	/^	TEXT_ALIGN_CENTER,$/;"	e	enum:BStyles::__anon2
TEXT_ALIGN_LEFT	BWidgets/BStyles.hpp	/^	TEXT_ALIGN_LEFT,$/;"	e	enum:BStyles::__anon2
TEXT_ALIGN_RIGHT	BWidgets/BStyles.hpp	/^	TEXT_ALIGN_RIGHT,$/;"	e	enum:BStyles::__anon2
TEXT_VALIGN_BOTTOM	BWidgets/BStyles.hpp	/^	TEXT_VALIGN_BOTTOM$/;"	e	enum:BStyles::__anon3
TEXT_VALIGN_MIDDLE	BWidgets/BStyles.hpp	/^	TEXT_VALIGN_MIDDLE,$/;"	e	enum:BStyles::__anon3
TEXT_VALIGN_TOP	BWidgets/BStyles.hpp	/^	TEXT_VALIGN_TOP,$/;"	e	enum:BStyles::__anon3
TKC	makefile	/^TKC =	BWidgets\/cairoplus.c \\$/;"	m
TKCXX	makefile	/^TKCXX =	BWidgets\/DrawingSurface.cpp \\$/;"	m
Text	BWidgets/Text.cpp	/^Text::Text () : Text (0.0, 0.0, 0.0, 0.0, "text", "") {}$/;"	f	class:BWidgets::Text
Text	BWidgets/Text.cpp	/^Text::Text (const Text& that) : Widget (that)$/;"	f	class:BWidgets::Text
Text	BWidgets/Text.cpp	/^Text::Text (const double x, const double y, const double width, const double height, const std::string& name, const std::string& text, bool resizable) :$/;"	f	class:BWidgets::Text
Text	BWidgets/Text.cpp	/^Text::Text (const double x, const double y, const double width, const double height, const std::string& text) :$/;"	f	class:BWidgets::Text
Text	BWidgets/Text.cpp	/^Text::Text (const std::string& text) : Text (0.0, 0.0, BWIDGETS_DEFAULT_WIDTH, BWIDGETS_DEFAULT_HEIGHT, text, text) {}$/;"	f	class:BWidgets::Text
Text	BWidgets/Text.hpp	/^class Text : public Widget$/;"	c	namespace:BWidgets
TextAlign	BWidgets/BStyles.hpp	/^} TextAlign;$/;"	t	namespace:BStyles	typeref:enum:BStyles::__anon2
TextButton	BWidgets/TextButton.cpp	/^TextButton::TextButton () :$/;"	f	class:BWidgets::TextButton
TextButton	BWidgets/TextButton.cpp	/^TextButton::TextButton (const TextButton& that) : Button (that), buttonLabel (that.buttonLabel)$/;"	f	class:BWidgets::TextButton
TextButton	BWidgets/TextButton.cpp	/^TextButton::TextButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::TextButton
TextButton	BWidgets/TextButton.cpp	/^TextButton::TextButton (const double x, const double y, const double width, const double height,$/;"	f	class:BWidgets::TextButton
TextButton	BWidgets/TextButton.hpp	/^class TextButton : public Button$/;"	c	namespace:BWidgets
TextToggleButton	BWidgets/TextToggleButton.cpp	/^TextToggleButton::TextToggleButton () : TextToggleButton (0.0, 0.0, BWIDGETS_DEFAULT_BUTTON_WIDTH, BWIDGETS_DEFAULT_BUTTON_HEIGHT,$/;"	f	class:BWidgets::TextToggleButton
TextToggleButton	BWidgets/TextToggleButton.cpp	/^TextToggleButton::TextToggleButton (const TextToggleButton& that) : ToggleButton (that), buttonLabel (that.buttonLabel)$/;"	f	class:BWidgets::TextToggleButton
TextToggleButton	BWidgets/TextToggleButton.cpp	/^TextToggleButton::TextToggleButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::TextToggleButton
TextToggleButton	BWidgets/TextToggleButton.cpp	/^TextToggleButton::TextToggleButton (const double x, const double y, const double width, const double height,$/;"	f	class:BWidgets::TextToggleButton
TextToggleButton	BWidgets/TextToggleButton.hpp	/^class TextToggleButton : public ToggleButton$/;"	c	namespace:BWidgets
TextVAlign	BWidgets/BStyles.hpp	/^} TextVAlign;$/;"	t	namespace:BStyles	typeref:enum:BStyles::__anon3
Theme	BWidgets/BStyles.cpp	/^Theme::Theme () {};$/;"	f	class:BStyles::Theme
Theme	BWidgets/BStyles.cpp	/^Theme::Theme (const std::vector<StyleSet>& theme): stylesetVector (theme) {};$/;"	f	class:BStyles::Theme
Theme	BWidgets/BStyles.hpp	/^class Theme$/;"	c	namespace:BStyles
ToggleButton	BWidgets/ToggleButton.cpp	/^ToggleButton::ToggleButton () : ToggleButton (0.0, 0.0, BWIDGETS_DEFAULT_BUTTON_WIDTH, BWIDGETS_DEFAULT_BUTTON_HEIGHT, "togglebutton", 0.0) {}$/;"	f	class:BWidgets::ToggleButton
ToggleButton	BWidgets/ToggleButton.cpp	/^ToggleButton::ToggleButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::ToggleButton
ToggleButton	BWidgets/ToggleButton.hpp	/^class ToggleButton : public Button$/;"	c	namespace:BWidgets
UNSELECTED	BWidgets/BItems.hpp	27;"	d
UNSELECTED	BWidgets/ChoiceBox.hpp	37;"	d
UNSELECTED	BWidgets/ItemBox.hpp	32;"	d
USER_DEFINED	BWidgets/BColors.hpp	/^	USER_DEFINED	= 4$/;"	e	enum:BColors::__anon5
UTF8_STRING	BWidgets/pugl/x11.h	/^  Atom UTF8_STRING;$/;"	m	struct:__anon7
UpButton	BWidgets/UpButton.cpp	/^UpButton::UpButton () :$/;"	f	class:BWidgets::UpButton
UpButton	BWidgets/UpButton.cpp	/^UpButton::UpButton (const double x, const double y, const double width, const double height, const std::string& name, double defaultValue) :$/;"	f	class:BWidgets::UpButton
UpButton	BWidgets/UpButton.hpp	/^class UpButton : public Button$/;"	c	namespace:BWidgets
VALUE_CHANGED_EVENT	BWidgets/BEvents.hpp	/^	VALUE_CHANGED_EVENT,$/;"	e	enum:BEvents::EventType
VK_NO_PROTOTYPES	BWidgets/pugl/win_vulkan.c	17;"	d	file:
VK_NO_PROTOTYPES	BWidgets/pugl/x11_vulkan.c	17;"	d	file:
VScale	BWidgets/VScale.cpp	/^VScale::VScale () : VScale (0.0, 0.0, BWIDGETS_DEFAULT_VSCALE_WIDTH, BWIDGETS_DEFAULT_VSCALE_HEIGHT, "vscale",$/;"	f	class:BWidgets::VScale
VScale	BWidgets/VScale.cpp	/^VScale::VScale (const VScale& that) :$/;"	f	class:BWidgets::VScale
VScale	BWidgets/VScale.cpp	/^VScale::VScale (const double  x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::VScale
VScale	BWidgets/VScale.hpp	/^class VScale : public RangeWidget$/;"	c	namespace:BWidgets
VSlider	BWidgets/VSlider.cpp	/^VSlider::VSlider () : VSlider (0.0, 0.0, BWIDGETS_DEFAULT_VSLIDER_WIDTH, BWIDGETS_DEFAULT_VSLIDER_HEIGHT, "vslider",$/;"	f	class:BWidgets::VSlider
VSlider	BWidgets/VSlider.cpp	/^VSlider::VSlider (const VSlider& that) :$/;"	f	class:BWidgets::VSlider
VSlider	BWidgets/VSlider.cpp	/^VSlider::VSlider (const double  x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::VSlider
VSlider	BWidgets/VSlider.hpp	/^class VSlider : public VScale, public Focusable$/;"	c	namespace:BWidgets
VSliderValue	BWidgets/VSliderValue.cpp	/^VSliderValue::VSliderValue () :$/;"	f	class:BWidgets::VSliderValue
VSliderValue	BWidgets/VSliderValue.cpp	/^VSliderValue::VSliderValue (const VSliderValue& that) :$/;"	f	class:BWidgets::VSliderValue
VSliderValue	BWidgets/VSliderValue.cpp	/^VSliderValue::VSliderValue (const double x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::VSliderValue
VSliderValue	BWidgets/VSliderValue.hpp	/^class VSliderValue : public VSlider$/;"	c	namespace:BWidgets
VSwitch	BWidgets/VSwitch.cpp	/^VSwitch::VSwitch () : VSwitch (0.0, 0.0, BWIDGETS_DEFAULT_VSWITCH_WIDTH, BWIDGETS_DEFAULT_VSWITCH_HEIGHT, "vswitch", BWIDGETS_DEFAULT_VALUE) {}$/;"	f	class:BWidgets::VSwitch
VSwitch	BWidgets/VSwitch.cpp	/^VSwitch::VSwitch (const double  x, const double y, const double width, const double height, const std::string& name,$/;"	f	class:BWidgets::VSwitch
VSwitch	BWidgets/VSwitch.hpp	/^class VSwitch : public VSlider$/;"	c	namespace:BWidgets
ValueChangedEvent	BWidgets/BEvents.hpp	/^	ValueChangedEvent () :$/;"	f	class:BEvents::ValueChangedEvent
ValueChangedEvent	BWidgets/BEvents.hpp	/^	ValueChangedEvent (BWidgets::Widget* widget, const double val) :$/;"	f	class:BEvents::ValueChangedEvent
ValueChangedEvent	BWidgets/BEvents.hpp	/^class ValueChangedEvent : public Event$/;"	c	namespace:BEvents
ValueWidget	BWidgets/ValueWidget.cpp	/^ValueWidget::ValueWidget () : ValueWidget (0, 0, BWIDGETS_DEFAULT_WIDTH, BWIDGETS_DEFAULT_HEIGHT, "valuewidget", BWIDGETS_DEFAULT_VALUE) {}$/;"	f	class:BWidgets::ValueWidget
ValueWidget	BWidgets/ValueWidget.cpp	/^ValueWidget::ValueWidget (const ValueWidget& that) :$/;"	f	class:BWidgets::ValueWidget
ValueWidget	BWidgets/ValueWidget.cpp	/^ValueWidget::ValueWidget (const double  x, const double y, const double width, const double height, const std::string& name, const double value) :$/;"	f	class:BWidgets::ValueWidget
ValueWidget	BWidgets/ValueWidget.hpp	/^class ValueWidget : public Widget$/;"	c	namespace:BWidgets
WGL_ACCELERATION_ARB	BWidgets/pugl/win_gl.c	31;"	d	file:
WGL_ALPHA_BITS_ARB	BWidgets/pugl/win_gl.c	38;"	d	file:
WGL_BLUE_BITS_ARB	BWidgets/pugl/win_gl.c	37;"	d	file:
WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB	BWidgets/pugl/win_gl.c	52;"	d	file:
WGL_CONTEXT_CORE_PROFILE_BIT_ARB	BWidgets/pugl/win_gl.c	51;"	d	file:
WGL_CONTEXT_DEBUG_BIT_ARB	BWidgets/pugl/win_gl.c	53;"	d	file:
WGL_CONTEXT_FLAGS_ARB	BWidgets/pugl/win_gl.c	48;"	d	file:
WGL_CONTEXT_MAJOR_VERSION_ARB	BWidgets/pugl/win_gl.c	46;"	d	file:
WGL_CONTEXT_MINOR_VERSION_ARB	BWidgets/pugl/win_gl.c	47;"	d	file:
WGL_CONTEXT_PROFILE_MASK_ARB	BWidgets/pugl/win_gl.c	49;"	d	file:
WGL_DEPTH_BITS_ARB	BWidgets/pugl/win_gl.c	39;"	d	file:
WGL_DOUBLE_BUFFER_ARB	BWidgets/pugl/win_gl.c	33;"	d	file:
WGL_DRAW_TO_WINDOW_ARB	BWidgets/pugl/win_gl.c	30;"	d	file:
WGL_FULL_ACCELERATION_ARB	BWidgets/pugl/win_gl.c	41;"	d	file:
WGL_GREEN_BITS_ARB	BWidgets/pugl/win_gl.c	36;"	d	file:
WGL_PIXEL_TYPE_ARB	BWidgets/pugl/win_gl.c	34;"	d	file:
WGL_RED_BITS_ARB	BWidgets/pugl/win_gl.c	35;"	d	file:
WGL_SAMPLES_ARB	BWidgets/pugl/win_gl.c	44;"	d	file:
WGL_SAMPLE_BUFFERS_ARB	BWidgets/pugl/win_gl.c	43;"	d	file:
WGL_STENCIL_BITS_ARB	BWidgets/pugl/win_gl.c	40;"	d	file:
WGL_SUPPORT_OPENGL_ARB	BWidgets/pugl/win_gl.c	32;"	d	file:
WGL_TYPE_RGBA_ARB	BWidgets/pugl/win_gl.c	42;"	d	file:
WHEEL_DELTA	BWidgets/pugl/win.c	41;"	d	file:
WHEEL_SCROLL_EVENT	BWidgets/BEvents.hpp	/^	WHEEL_SCROLL_EVENT,$/;"	e	enum:BEvents::EventType
WM_DELETE_WINDOW	BWidgets/pugl/x11.h	/^  Atom WM_DELETE_WINDOW;$/;"	m	struct:__anon7
WM_MOUSEHWHEEL	BWidgets/pugl/win.c	38;"	d	file:
WM_MOUSEWHEEL	BWidgets/pugl/win.c	35;"	d	file:
WM_PROTOCOLS	BWidgets/pugl/x11.h	/^  Atom WM_PROTOCOLS;$/;"	m	struct:__anon7
WM_STATE_ADD	BWidgets/pugl/x11.c	/^  WM_STATE_ADD,$/;"	e	enum:WmClientStateMessageAction	file:
WM_STATE_REMOVE	BWidgets/pugl/x11.c	/^  WM_STATE_REMOVE,$/;"	e	enum:WmClientStateMessageAction	file:
WM_STATE_TOGGLE	BWidgets/pugl/x11.c	/^  WM_STATE_TOGGLE$/;"	e	enum:WmClientStateMessageAction	file:
WglChoosePixelFormat	BWidgets/pugl/win_gl.c	/^  *WglChoosePixelFormat)(HDC, const int*, const FLOAT*, UINT, int*, UINT*);$/;"	t	file:
WglCreateContextAttribs	BWidgets/pugl/win_gl.c	/^typedef HGLRC (*WglCreateContextAttribs)(HDC, HGLRC, const int*);$/;"	t	file:
WglSwapInterval	BWidgets/pugl/win_gl.c	/^typedef BOOL (*WglSwapInterval)(int);$/;"	t	file:
WheelEvent	BWidgets/BEvents.hpp	/^	WheelEvent () :$/;"	f	class:BEvents::WheelEvent
WheelEvent	BWidgets/BEvents.hpp	/^	WheelEvent (BWidgets::Widget* widget, const EventType type, const BUtilities::Point& point, const BUtilities::Point delta) :$/;"	f	class:BEvents::WheelEvent
WheelEvent	BWidgets/BEvents.hpp	/^	WheelEvent (BWidgets::Widget* widget, const EventType type, const double x, const double y, const double deltaX, const double deltaY) :$/;"	f	class:BEvents::WheelEvent
WheelEvent	BWidgets/BEvents.hpp	/^class WheelEvent : public Event$/;"	c	namespace:BEvents
Widget	BWidgets/Widget.cpp	/^Widget::Widget () : Widget (0.0, 0.0, BWIDGETS_DEFAULT_WIDTH, BWIDGETS_DEFAULT_HEIGHT, "widget") {}$/;"	f	class:BWidgets::Widget
Widget	BWidgets/Widget.cpp	/^Widget::Widget (const Widget& that) :$/;"	f	class:BWidgets::Widget
Widget	BWidgets/Widget.cpp	/^Widget::Widget (const double x, const double y, const double width, const double height) : Widget (x, y, width, height, "widget") {}$/;"	f	class:BWidgets::Widget
Widget	BWidgets/Widget.cpp	/^Widget::Widget(const double x, const double y, const double width, const double height, const std::string& name) :$/;"	f	class:BWidgets::Widget
Widget	BWidgets/Widget.hpp	/^class Widget$/;"	c	namespace:BWidgets
WidgetEvent	BWidgets/BEvents.hpp	/^ 	WidgetEvent () :$/;"	f	class:BEvents::WidgetEvent
WidgetEvent	BWidgets/BEvents.hpp	/^ 	WidgetEvent (BWidgets::Widget* eventWidget, BWidgets::Widget* requestWidget, const EventType type) :$/;"	f	class:BEvents::WidgetEvent
WidgetEvent	BWidgets/BEvents.hpp	/^ class WidgetEvent : public Event$/;"	c	namespace:BEvents
WidgetStacking	BWidgets/Widget.hpp	/^enum WidgetStacking$/;"	g	namespace:BWidgets
Window	BWidgets/Window.cpp	/^Window::Window () : Window (BWIDGETS_DEFAULT_WIDTH, BWIDGETS_DEFAULT_HEIGHT, "window", 0) {}$/;"	f	class:BWidgets::Window
Window	BWidgets/Window.cpp	/^Window::Window (const double width, const double height, const std::string& title, PuglNativeView nativeWindow, bool resizable,$/;"	f	class:BWidgets::Window
Window	BWidgets/Window.hpp	/^class Window : public Widget$/;"	c	namespace:BWidgets
WmClientStateMessageAction	BWidgets/pugl/x11.c	/^enum WmClientStateMessageAction {$/;"	g	file:
_POSIX_C_SOURCE	BWidgets/pugl/x11.c	19;"	d	file:
actKeyNr	BWidgets/HPianoRoll.hpp	/^	int actKeyNr;$/;"	m	class:BWidgets::HPianoRoll
activate	BAmp.cpp	/^activate(LV2_Handle instance)$/;"	f	file:
activateKeys	BWidgets/PianoWidget.cpp	/^void PianoWidget::activateKeys (std::vector<bool>& keys)$/;"	f	class:BWidgets::PianoWidget
activeKeys	BWidgets/PianoWidget.hpp	/^	std::vector<bool> activeKeys;$/;"	m	class:BWidgets::PianoWidget
activeNr	BWidgets/ChoiceBox.hpp	/^	int activeNr;$/;"	m	class:BWidgets::ChoiceBox
add	BWidgets/BDevices.hpp	/^	void add (BWidgets::Widget* widget) {add (DeviceGrab<T> (widget, std::set<T>{}));}$/;"	f	class:BDevices::DeviceGrabStack
add	BWidgets/BDevices.hpp	/^	void add (const DeviceGrab<T>& deviceGrab)$/;"	f	class:BDevices::DeviceGrabStack
add	BWidgets/Widget.cpp	/^void Widget::add (Widget& child)$/;"	f	class:BWidgets::Widget
addButton	BWidgets/MessageBox.cpp	/^void MessageBox::addButton (const std::string& label)$/;"	f	class:BWidgets::MessageBox
addButtons	BWidgets/MessageBox.cpp	/^void MessageBox::addButtons (std::vector<std::string> labels)$/;"	f	class:BWidgets::MessageBox
addColor	BWidgets/BColors.cpp	/^void ColorSet::addColor (const State state, const Color& color)$/;"	f	class:BColors::ColorSet
addEventToQueue	BWidgets/Window.cpp	/^void Window::addEventToQueue (BEvents::Event* event)$/;"	f	class:BWidgets::Window
addItem	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::addItem (const BItems::Item& newItem)$/;"	f	class:BWidgets::ChoiceBox
addItem	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::addItem (const BItems::ItemList& newItems)$/;"	f	class:BWidgets::ChoiceBox
addStyle	BWidgets/BStyles.cpp	/^void StyleSet::addStyle (const std::string& styleName, void* ptr)$/;"	f	class:BStyles::StyleSet
addStyle	BWidgets/BStyles.cpp	/^void Theme::addStyle (const std::string& setName, const std::string& styleName, void* ptr)$/;"	f	class:BStyles::Theme
alarm	BWidgets/pugl/x11.h	/^  XID       alarm;$/;"	m	struct:__anon8
alpha	BWidgets/cairoplus.h	/^	double alpha;$/;"	m	struct:__anon42
alpha_	BWidgets/BColors.hpp	/^	double red_, green_, blue_, alpha_;$/;"	m	class:BColors::Color
any	BWidgets/pugl/pugl/pugl.h	/^  PuglEventAny       any;       \/\/\/< Valid for all event types$/;"	m	union:__anon34
app	BWidgets/pugl/mac.h	/^  NSApplication*     app;$/;"	m	struct:PuglWorldInternalsImpl
app	BWidgets/pugl/mac.h	/^  NSApplication*   app;$/;"	m	struct:PuglInternalsImpl
applyBrightness	BWidgets/BColors.cpp	/^void Color::applyBrightness (const double brightness)$/;"	f	class:BColors::Color
applyEdit	BWidgets/Label.cpp	/^void Label::applyEdit ()$/;"	f	class:BWidgets::Label
applyTheme	BWidgets/Button.cpp	/^void Button::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::Button
applyTheme	BWidgets/Button.cpp	/^void Button::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::Button
applyTheme	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::ChoiceBox
applyTheme	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::ChoiceBox
applyTheme	BWidgets/Dial.cpp	/^void Dial::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::Dial
applyTheme	BWidgets/Dial.cpp	/^void Dial::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::Dial
applyTheme	BWidgets/DialValue.cpp	/^void DialValue::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::DialValue
applyTheme	BWidgets/DialValue.cpp	/^void DialValue::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::DialValue
applyTheme	BWidgets/FileChooser.cpp	/^void FileChooser::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::FileChooser
applyTheme	BWidgets/FileChooser.cpp	/^void FileChooser::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::FileChooser
applyTheme	BWidgets/HScale.cpp	/^void HScale::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::HScale
applyTheme	BWidgets/HScale.cpp	/^void HScale::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::HScale
applyTheme	BWidgets/HSlider.cpp	/^void HSlider::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::HSlider
applyTheme	BWidgets/HSlider.cpp	/^void HSlider::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::HSlider
applyTheme	BWidgets/HSliderValue.cpp	/^void HSliderValue::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::HSliderValue
applyTheme	BWidgets/HSliderValue.cpp	/^void HSliderValue::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::HSliderValue
applyTheme	BWidgets/ItemBox.cpp	/^void ItemBox::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::ItemBox
applyTheme	BWidgets/ItemBox.cpp	/^void ItemBox::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::ItemBox
applyTheme	BWidgets/Knob.cpp	/^void Knob::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::Knob
applyTheme	BWidgets/Knob.cpp	/^void Knob::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::Knob
applyTheme	BWidgets/Label.cpp	/^void Label::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::Label
applyTheme	BWidgets/Label.cpp	/^void Label::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::Label
applyTheme	BWidgets/MessageBox.cpp	/^void MessageBox::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::MessageBox
applyTheme	BWidgets/MessageBox.cpp	/^void MessageBox::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::MessageBox
applyTheme	BWidgets/PopupListBox.cpp	/^void PopupListBox::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::PopupListBox
applyTheme	BWidgets/PopupListBox.cpp	/^void PopupListBox::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::PopupListBox
applyTheme	BWidgets/Text.cpp	/^void Text::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::Text
applyTheme	BWidgets/Text.cpp	/^void Text::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::Text
applyTheme	BWidgets/TextButton.cpp	/^void TextButton::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::TextButton
applyTheme	BWidgets/TextButton.cpp	/^void TextButton::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::TextButton
applyTheme	BWidgets/TextToggleButton.cpp	/^void TextToggleButton::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::TextToggleButton
applyTheme	BWidgets/TextToggleButton.cpp	/^void TextToggleButton::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::TextToggleButton
applyTheme	BWidgets/VScale.cpp	/^void VScale::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::VScale
applyTheme	BWidgets/VScale.cpp	/^void VScale::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::VScale
applyTheme	BWidgets/VSlider.cpp	/^void VSlider::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::VSlider
applyTheme	BWidgets/VSlider.cpp	/^void VSlider::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::VSlider
applyTheme	BWidgets/VSliderValue.cpp	/^void VSliderValue::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::VSliderValue
applyTheme	BWidgets/VSliderValue.cpp	/^void VSliderValue::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::VSliderValue
applyTheme	BWidgets/Widget.cpp	/^void Widget::applyTheme (BStyles::Theme& theme) {applyTheme (theme, name_);}$/;"	f	class:BWidgets::Widget
applyTheme	BWidgets/Widget.cpp	/^void Widget::applyTheme (BStyles::Theme& theme, const std::string& name)$/;"	f	class:BWidgets::Widget
area_	BWidgets/Widget.hpp	/^	BUtilities::RectArea area_;$/;"	m	class:BWidgets::Widget
atoms	BWidgets/pugl/x11.h	/^  PuglX11Atoms atoms;$/;"	m	struct:PuglWorldInternalsImpl
autoreleasePool	BWidgets/pugl/mac.h	/^  NSAutoreleasePool* autoreleasePool;$/;"	m	struct:PuglWorldInternalsImpl
back	BWidgets/pugl/x11_cairo.c	/^  cairo_surface_t* back;$/;"	m	struct:__anon9	file:
backend	BWidgets/pugl/types.h	/^  const PuglBackend* backend;$/;"	m	struct:PuglViewImpl
background_	BWidgets/Widget.hpp	/^	BStyles::Fill background_;$/;"	m	class:BWidgets::Widget
bgColors	BWidgets/Button.hpp	/^	BColors::ColorSet bgColors;$/;"	m	class:BWidgets::Button
bgColors	BWidgets/Dial.hpp	/^	BColors::ColorSet bgColors;$/;"	m	class:BWidgets::Dial
bgColors	BWidgets/FileChooser.hpp	/^	BColors::ColorSet bgColors;$/;"	m	class:BWidgets::FileChooser
bgColors	BWidgets/HScale.hpp	/^	BColors::ColorSet bgColors;$/;"	m	class:BWidgets::HScale
bgColors	BWidgets/Knob.hpp	/^	BColors::ColorSet bgColors;$/;"	m	class:BWidgets::Knob
bgColors	BWidgets/VScale.hpp	/^	BColors::ColorSet bgColors;$/;"	m	class:BWidgets::VScale
black	BWidgets/BColors.hpp	/^const Color black = Color (0.0, 0.0, 0.0, 1.0);$/;"	m	namespace:BColors
blackBgColors	BWidgets/HPianoRoll.hpp	/^	BColors::ColorSet blackBgColors;$/;"	m	class:BWidgets::HPianoRoll
blackBorder1pt	BWidgets/BStyles.hpp	/^const Border blackBorder1pt = Border (blackLine1pt);$/;"	m	namespace:BStyles
blackFill	BWidgets/BStyles.hpp	/^const Fill blackFill = Fill (BColors::black);$/;"	m	namespace:BStyles
blackLine1pt	BWidgets/BStyles.hpp	/^const Line blackLine1pt = Line (BColors::black, 1.0);$/;"	m	namespace:BStyles
blue	BWidgets/BColors.hpp	/^const Color blue = Color (0.0, 0.0, 1.0, 1.0);$/;"	m	namespace:BColors
blue	BWidgets/cairoplus.h	/^	double blue;$/;"	m	struct:__anon42
blueFill	BWidgets/BStyles.hpp	/^const Fill blueFill = Fill (BColors::blue);$/;"	m	namespace:BStyles
blue_	BWidgets/BColors.hpp	/^	double red_, green_, blue_, alpha_;$/;"	m	class:BColors::Color
blues	BWidgets/BColors.hpp	/^const ColorSet blues = ColorSet ({blue, lightblue, darkblue, black});$/;"	m	namespace:BColors
borderLine	BWidgets/BStyles.hpp	/^	Line borderLine;$/;"	m	class:BStyles::Border
borderMargin	BWidgets/BStyles.hpp	/^	double borderMargin;$/;"	m	class:BStyles::Border
borderPadding	BWidgets/BStyles.hpp	/^	double borderPadding;$/;"	m	class:BStyles::Border
borderRadius	BWidgets/BStyles.hpp	/^	double borderRadius;$/;"	m	class:BStyles::Border
border_	BWidgets/Widget.hpp	/^	BStyles::Border border_;$/;"	m	class:BWidgets::Widget
button	BWidgets/BDevices.hpp	/^	ButtonCode button;$/;"	m	class:BDevices::MouseDevice
button	BWidgets/pugl/pugl/pugl.h	/^  PuglEventButton    button;    \/\/\/< #PUGL_BUTTON_PRESS, #PUGL_BUTTON_RELEASE$/;"	m	union:__anon34
button	BWidgets/pugl/pugl/pugl.h	/^  uint32_t       button; \/\/\/< Button number starting from 1$/;"	m	struct:__anon29
buttonDraw	BWidgets/pugl_cairo_test.c	/^buttonDraw(cairo_t* cr, const Button* but)$/;"	f	file:
buttonGrabStack_	BWidgets/Window.hpp	/^	BDevices::DeviceGrabStack<BDevices::MouseDevice> buttonGrabStack_;$/;"	m	class:BWidgets::Window
buttonLabel	BWidgets/TextButton.hpp	/^	Label buttonLabel;$/;"	m	class:BWidgets::TextButton
buttonLabel	BWidgets/TextToggleButton.hpp	/^	Label buttonLabel;$/;"	m	class:BWidgets::TextToggleButton
buttonNr	BWidgets/BEvents.hpp	/^	BDevices::ButtonCode buttonNr;$/;"	m	class:BEvents::PointerEvent
buttonTouches	BWidgets/pugl_cairo_test.c	/^buttonTouches(const Button* but, double x, double y)$/;"	f	file:
buttons	BWidgets/MessageBox.hpp	/^	std::vector<TextButton*> buttons;$/;"	m	class:BWidgets::MessageBox
cairo_create_text_fitted	BWidgets/cairoplus.c	/^char* cairo_create_text_fitted (cairo_t* cr, double width, cairo_text_decorations decorations, char* text)$/;"	f
cairo_image_surface_clone_from_image_surface	BWidgets/cairoplus.c	/^cairo_surface_t* cairo_image_surface_clone_from_image_surface (cairo_surface_t* sourceSurface)$/;"	f
cairo_nil_text	BWidgets/cairoplus.c	/^char cairo_nil_text[1] = "";$/;"	v
cairo_rectangle_rounded	BWidgets/cairoplus.c	/^void cairo_rectangle_rounded (cairo_t* cr, double x, double y, double width, double height, double radius, uint8_t corners)$/;"	f
cairo_rgba	BWidgets/cairoplus.h	/^} cairo_rgba;$/;"	t	typeref:struct:__anon42
cairo_surface_clear	BWidgets/cairoplus.c	/^void cairo_surface_clear (cairo_surface_t* surface)$/;"	f
cairo_text_decorations	BWidgets/cairoplus.h	/^} cairo_text_decorations;$/;"	t	typeref:struct:__anon43
cairo_text_destroy	BWidgets/cairoplus.c	/^void cairo_text_destroy (char* text)$/;"	f
callIdle	BAmp_GUI.cpp	/^static int callIdle(LV2UI_Handle ui)$/;"	f	file:
callResize	BAmp_GUI.cpp	/^static int callResize (LV2UI_Handle ui, int width, int height)$/;"	f	file:
cancelButton	BWidgets/FileChooser.hpp	/^	TextButton cancelButton;$/;"	m	class:BWidgets::FileChooser
cancelButtonClickedCallback	BWidgets/FileChooser.cpp	/^void FileChooser::cancelButtonClickedCallback (BEvents::Event* event)$/;"	f	class:BWidgets::FileChooser
cbfunction_	BWidgets/Widget.hpp	/^	std::array<std::function<void (BEvents::Event*)>, BEvents::EventType::NO_EVENT> cbfunction_;$/;"	m	class:BWidgets::Widget
character	BWidgets/pugl/pugl/pugl.h	/^  uint32_t       character; \/\/\/< Unicode character code$/;"	m	struct:__anon27
children_	BWidgets/Widget.hpp	/^	std::vector <Widget*> children_;$/;"	m	class:BWidgets::Widget
className	BWidgets/pugl/types.h	/^  char*               className;$/;"	m	struct:PuglWorldImpl
cleanup	BAmp.cpp	/^cleanup(LV2_Handle instance)$/;"	f	file:
cleanup	BAmp_GUI.cpp	/^static void cleanup(LV2UI_Handle ui)$/;"	f	file:
clickable_	BWidgets/Widget.hpp	/^	bool clickable_;$/;"	m	class:BWidgets::Widget
client	BWidgets/pugl/pugl/pugl.h	/^  PuglEventClient    client;    \/\/\/< #PUGL_CLIENT$/;"	m	union:__anon34
clipboard	BWidgets/pugl/types.h	/^  PuglBlob           clipboard;$/;"	m	struct:PuglViewImpl
clone	BUtilities/Any.hpp	/^                virtual Envelope* clone () {return new Envelope (*this);}$/;"	f	struct:BUtilities::Any::Envelope
clone	BUtilities/Any.hpp	/^        Envelope* clone () const$/;"	f	class:BUtilities::Any
clone	BWidgets/Button.cpp	/^Widget* Button::clone () const {return new Button (*this);}$/;"	f	class:BWidgets::Button
clone	BWidgets/ChoiceBox.cpp	/^Widget* ChoiceBox::clone () const {return new ChoiceBox (*this);}$/;"	f	class:BWidgets::ChoiceBox
clone	BWidgets/Dial.cpp	/^Widget* Dial::clone () const {return new Dial (*this);}$/;"	f	class:BWidgets::Dial
clone	BWidgets/DialValue.cpp	/^Widget* DialValue::clone () const {return new DialValue (*this);}$/;"	f	class:BWidgets::DialValue
clone	BWidgets/Display.cpp	/^Widget* Display::clone () const {return new Display (*this);}$/;"	f	class:BWidgets::Display
clone	BWidgets/DownButton.cpp	/^Widget* DownButton::clone () const {return new DownButton (*this);}$/;"	f	class:BWidgets::DownButton
clone	BWidgets/DrawingSurface.cpp	/^Widget* DrawingSurface::clone () const {return new DrawingSurface (*this);}$/;"	f	class:BWidgets::DrawingSurface
clone	BWidgets/FileChooser.cpp	/^Widget* FileChooser::clone () const {return new FileChooser (*this);}$/;"	f	class:BWidgets::FileChooser
clone	BWidgets/HPianoRoll.cpp	/^Widget* HPianoRoll::clone () const {return new HPianoRoll (*this);}$/;"	f	class:BWidgets::HPianoRoll
clone	BWidgets/HScale.cpp	/^Widget* HScale::clone () const {return new HScale (*this);}$/;"	f	class:BWidgets::HScale
clone	BWidgets/HSlider.cpp	/^Widget* HSlider::clone () const {return new HSlider (*this);}$/;"	f	class:BWidgets::HSlider
clone	BWidgets/HSliderValue.cpp	/^Widget* HSliderValue::clone () const {return new HSliderValue (*this);}$/;"	f	class:BWidgets::HSliderValue
clone	BWidgets/HSwitch.cpp	/^Widget* HSwitch::clone () const {return new HSwitch (*this);}$/;"	f	class:BWidgets::HSwitch
clone	BWidgets/Icon.cpp	/^Widget* Icon::clone () const {return new Icon (*this);}$/;"	f	class:BWidgets::Icon
clone	BWidgets/ImageIcon.cpp	/^Widget* ImageIcon::clone () const {return new ImageIcon (*this);}$/;"	f	class:BWidgets::ImageIcon
clone	BWidgets/ItemBox.cpp	/^Widget* ItemBox::clone () const {return new ItemBox (*this);}$/;"	f	class:BWidgets::ItemBox
clone	BWidgets/Knob.cpp	/^Widget* Knob::clone () const {return new Knob (*this);}$/;"	f	class:BWidgets::Knob
clone	BWidgets/Label.cpp	/^Widget* Label::clone () const {return new Label (*this);}$/;"	f	class:BWidgets::Label
clone	BWidgets/LeftButton.cpp	/^Widget* LeftButton::clone () const {return new LeftButton (*this);}$/;"	f	class:BWidgets::LeftButton
clone	BWidgets/ListBox.cpp	/^Widget* ListBox::clone () const {return new ListBox (*this);}$/;"	f	class:BWidgets::ListBox
clone	BWidgets/MessageBox.cpp	/^Widget* MessageBox::clone () const {return new MessageBox (*this);}$/;"	f	class:BWidgets::MessageBox
clone	BWidgets/MinusButton.cpp	/^Widget* MinusButton::clone () const {return new MinusButton (*this);}$/;"	f	class:BWidgets::MinusButton
clone	BWidgets/PianoWidget.cpp	/^Widget* PianoWidget::clone () const {return new PianoWidget (*this);}$/;"	f	class:BWidgets::PianoWidget
clone	BWidgets/PlusButton.cpp	/^Widget* PlusButton::clone () const {return new PlusButton (*this);}$/;"	f	class:BWidgets::PlusButton
clone	BWidgets/PopupListBox.cpp	/^Widget* PopupListBox::clone () const {return new PopupListBox (*this);}$/;"	f	class:BWidgets::PopupListBox
clone	BWidgets/RangeWidget.cpp	/^Widget* RangeWidget::clone () const {return new RangeWidget (*this);}$/;"	f	class:BWidgets::RangeWidget
clone	BWidgets/RightButton.cpp	/^Widget* RightButton::clone () const {return new RightButton (*this);}$/;"	f	class:BWidgets::RightButton
clone	BWidgets/StateDisplay.cpp	/^Widget* StateDisplay::clone () const {return new StateDisplay (*this);}$/;"	f	class:BWidgets::StateDisplay
clone	BWidgets/Text.cpp	/^Widget* Text::clone () const {return new Text (*this);}$/;"	f	class:BWidgets::Text
clone	BWidgets/TextButton.cpp	/^Widget* TextButton::clone () const {return new TextButton (*this);}$/;"	f	class:BWidgets::TextButton
clone	BWidgets/TextToggleButton.cpp	/^Widget* TextToggleButton::clone () const {return new TextToggleButton (*this);}$/;"	f	class:BWidgets::TextToggleButton
clone	BWidgets/ToggleButton.cpp	/^Widget* ToggleButton::clone () const {return new ToggleButton (*this);}$/;"	f	class:BWidgets::ToggleButton
clone	BWidgets/UpButton.cpp	/^Widget* UpButton::clone () const {return new UpButton (*this);}$/;"	f	class:BWidgets::UpButton
clone	BWidgets/VScale.cpp	/^Widget* VScale::clone () const {return new VScale (*this);}$/;"	f	class:BWidgets::VScale
clone	BWidgets/VSlider.cpp	/^Widget* VSlider::clone () const {return new VSlider (*this);}$/;"	f	class:BWidgets::VSlider
clone	BWidgets/VSliderValue.cpp	/^Widget* VSliderValue::clone () const {return new VSliderValue (*this);}$/;"	f	class:BWidgets::VSliderValue
clone	BWidgets/VSwitch.cpp	/^Widget* VSwitch::clone () const {return new VSwitch (*this);}$/;"	f	class:BWidgets::VSwitch
clone	BWidgets/ValueWidget.cpp	/^Widget* ValueWidget::clone () const {return new ValueWidget (*this);}$/;"	f	class:BWidgets::ValueWidget
clone	BWidgets/Widget.cpp	/^Widget* Widget::clone () const {return new Widget (*this);}$/;"	f	class:BWidgets::Widget
cloneWidgetFrom	BWidgets/BItems.cpp	/^void Item::cloneWidgetFrom (BWidgets::Widget* widget)$/;"	f	class:BItems::Item
colors	BWidgets/BColors.hpp	/^	std::vector<Color> colors;$/;"	m	class:BColors::ColorSet
compare	BWidgets/BColors.cpp	/^int Color::compare (const Color& that) const$/;"	f	class:BColors::Color
compare	BWidgets/BColors.cpp	/^int ColorSet::compare (const ColorSet& that) const {return (colors == that.colors ? 0 : 1);}$/;"	f	class:BColors::ColorSet
configure	BWidgets/pugl/pugl/pugl.h	/^  PuglEventConfigure configure; \/\/\/< #PUGL_CONFIGURE$/;"	m	union:__anon34
configure	BWidgets/pugl/types.h	/^  PuglStatus (*configure)(PuglView*);$/;"	m	struct:PuglBackendImpl
connect_port	BAmp.cpp	/^connect_port(LV2_Handle instance, uint32_t port, void* data)$/;"	f	file:
connect_port	BAmp.cpp	/^void Amp::connect_port (uint32_t portnr, float* data)$/;"	f	class:Amp
constrainAspect	BWidgets/pugl/win.c	/^constrainAspect(const PuglView* const view,$/;"	f	file:
contains	BUtilities/RectArea.hpp	/^	bool contains (const Point& p) const$/;"	f	class:BUtilities::RectArea
contains	BWidgets/BDevices.hpp	/^	bool contains (BWidgets::Widget* widget)$/;"	f	class:BDevices::DeviceGrabStack
contains	BWidgets/BDevices.hpp	/^	bool contains (const T& device) const$/;"	f	class:BDevices::DeviceGrab
controller	BAmp_GUI.cpp	/^	LV2UI_Controller controller;$/;"	m	class:BAmp_GUI	file:
cr	BWidgets/pugl/win_cairo.c	/^  cairo_t*         cr;$/;"	m	struct:__anon41	file:
cr	BWidgets/pugl/x11_cairo.c	/^  cairo_t*         cr;$/;"	m	struct:__anon9	file:
create	BWidgets/pugl/types.h	/^  PuglStatus (*create)(PuglView*);$/;"	m	struct:PuglBackendImpl
crossing	BWidgets/pugl/pugl/pugl.h	/^  PuglEventCrossing  crossing;  \/\/\/< #PUGL_POINTER_IN, #PUGL_POINTER_OUT$/;"	m	union:__anon34
ctx	BWidgets/pugl/x11_gl.c	/^  GLXContext  ctx;$/;"	m	struct:__anon11	file:
cursor	BWidgets/pugl/mac.h	/^  NSCursor*        cursor;$/;"	m	struct:PuglInternalsImpl
cursor	BWidgets/pugl/win.h	/^  HCURSOR      cursor;$/;"	m	struct:PuglInternalsImpl
cursorFrom	BWidgets/Label.hpp	/^	size_t cursorFrom;$/;"	m	class:BWidgets::Label
cursorShape	BWidgets/pugl/x11.h	/^  unsigned cursorShape;$/;"	m	struct:PuglInternalsImpl
cursorTo	BWidgets/Label.hpp	/^	size_t cursorTo;$/;"	m	class:BWidgets::Label
cursor_ids	BWidgets/pugl/win.c	/^static const char* const cursor_ids[] = {$/;"	v	file:
cursor_nums	BWidgets/pugl/x11.c	/^static const unsigned cursor_nums[] = {$/;"	v	file:
darkblue	BWidgets/BColors.hpp	/^const Color darkblue = Color (0.0, 0.0, 0.5, 1.0);$/;"	m	namespace:BColors
darkdarkgrey	BWidgets/BColors.hpp	/^const Color darkdarkgrey = Color (0.1, 0.1, 0.1, 1.0);$/;"	m	namespace:BColors
darkgreen	BWidgets/BColors.hpp	/^const Color darkgreen = Color (0.0, 0.5, 0.0, 1.0);$/;"	m	namespace:BColors
darkgrey	BWidgets/BColors.hpp	/^const Color darkgrey = Color (0.25, 0.25, 0.25, 1.0);$/;"	m	namespace:BColors
darkgreyFill	BWidgets/BStyles.hpp	/^const Fill darkgreyFill = Fill (BColors::darkgrey);$/;"	m	namespace:BStyles
darkred	BWidgets/BColors.hpp	/^const Color darkred = Color (0.5, 0.0, 0.0, 1.0);$/;"	m	namespace:BColors
darks	BWidgets/BColors.hpp	/^const ColorSet darks = ColorSet ({darkgrey, grey, darkdarkgrey, black});$/;"	m	namespace:BColors
data	BUtilities/Any.hpp	/^                T data;$/;"	m	struct:BUtilities::Any::Data
data	BWidgets/pugl/types.h	/^  void*  data; \/\/\/< Dynamically allocated data$/;"	m	struct:__anon10
data1	BWidgets/pugl/pugl/pugl.h	/^  uintptr_t      data1; \/\/\/< Client-specific data$/;"	m	struct:__anon32
data2	BWidgets/pugl/pugl/pugl.h	/^  uintptr_t      data2; \/\/\/< Client-specific data$/;"	m	struct:__anon32
dataTypeHash	BUtilities/Any.hpp	/^        size_t dataTypeHash = typeid (void).hash_code ();$/;"	m	class:BUtilities::Any
dataptr	BUtilities/Any.hpp	/^        Envelope* dataptr = nullptr;$/;"	m	class:BUtilities::Any
deactivate	BAmp.cpp	/^deactivate(LV2_Handle instance)$/;"	f	file:
defaultCallback	BWidgets/Widget.cpp	/^void Widget::defaultCallback (BEvents::Event* event) {}$/;"	f	class:BWidgets::Widget
defaultHeight	BWidgets/pugl/types.h	/^  int                defaultHeight;$/;"	m	struct:PuglViewImpl
defaultWidth	BWidgets/pugl/types.h	/^  int                defaultWidth;$/;"	m	struct:PuglViewImpl
deleteInternal	BWidgets/BItems.cpp	/^void Item::deleteInternal ()$/;"	f	class:BItems::Item
delta	BWidgets/BEvents.hpp	/^	BUtilities::Point delta;$/;"	m	class:BEvents::WheelEvent
delta	BWidgets/BEvents.hpp	/^	BUtilities::Point point, origin, delta;$/;"	m	class:BEvents::PointerEvent
descriptor	BAmp.cpp	/^static const LV2_Descriptor descriptor = {$/;"	v	file:
destroy	BWidgets/pugl/types.h	/^  PuglStatus (*destroy)(PuglView*);$/;"	m	struct:PuglBackendImpl
devices_	BWidgets/BDevices.hpp	/^	std::set<T> devices_;$/;"	m	class:BDevices::DeviceGrab
dial	BAmp_GUI.cpp	/^	BWidgets::DialValue dial;$/;"	m	class:BAmp_GUI	file:
dialCenter	BWidgets/Dial.hpp	/^	BUtilities::Point dialCenter;$/;"	m	class:BWidgets::Dial
dialRadius	BWidgets/Dial.hpp	/^	double dialRadius;$/;"	m	class:BWidgets::Dial
dir	BUtilities/Path.hpp	/^        std::string dir() const {return dir_;}$/;"	f	class:BUtilities::Path
dir_	BUtilities/Path.hpp	/^        std::string dir_;$/;"	m	class:BUtilities::Path
direction	BWidgets/pugl/pugl/pugl.h	/^  PuglScrollDirection direction; \/\/\/< Scroll direction$/;"	m	struct:__anon31
dirs	BWidgets/FileChooser.hpp	/^	std::vector<std::string> dirs;$/;"	m	class:BWidgets::FileChooser
discardEdit	BWidgets/Label.cpp	/^void Label::discardEdit ()$/;"	f	class:BWidgets::Label
dispatchingEvents	BWidgets/pugl/x11.h	/^  bool         dispatchingEvents;$/;"	m	struct:PuglWorldInternalsImpl
display	BWidgets/pugl/x11.h	/^  Display*     display;$/;"	m	struct:PuglInternalsImpl
display	BWidgets/pugl/x11.h	/^  Display*     display;$/;"	m	struct:PuglWorldInternalsImpl
displayArea	BWidgets/HSliderValue.hpp	/^	BUtilities::RectArea displayArea;$/;"	m	class:BWidgets::HSliderValue
displayArea	BWidgets/VSliderValue.hpp	/^	BUtilities::RectArea displayArea;$/;"	m	class:BWidgets::VSliderValue
displayDraggedCallback	BWidgets/DialValue.cpp	/^void DialValue::displayDraggedCallback (BEvents::Event* event)$/;"	f	class:BWidgets::DialValue
displayDraggedCallback	BWidgets/HSliderValue.cpp	/^void HSliderValue::displayDraggedCallback (BEvents::Event* event)$/;"	f	class:BWidgets::HSliderValue
displayDraggedCallback	BWidgets/VSliderValue.cpp	/^void VSliderValue::displayDraggedCallback (BEvents::Event* event)$/;"	f	class:BWidgets::VSliderValue
displayMessageCallback	BWidgets/DialValue.cpp	/^void DialValue::displayMessageCallback (BEvents::Event* event)$/;"	f	class:BWidgets::DialValue
displayMessageCallback	BWidgets/HSliderValue.cpp	/^void HSliderValue::displayMessageCallback (BEvents::Event* event)$/;"	f	class:BWidgets::HSliderValue
displayMessageCallback	BWidgets/VSliderValue.cpp	/^void VSliderValue::displayMessageCallback (BEvents::Event* event)$/;"	f	class:BWidgets::VSliderValue
dot	BWidgets/Dial.hpp	/^	DrawingSurface dot;$/;"	m	class:BWidgets::Dial
downButton	BWidgets/ChoiceBox.hpp	/^	DownButton downButton;$/;"	m	class:BWidgets::ChoiceBox
downButton	BWidgets/PopupListBox.hpp	/^	DownButton downButton;$/;"	m	class:BWidgets::PopupListBox
dragAndDropCallback	BWidgets/Widget.cpp	/^void Widget::dragAndDropCallback (BEvents::Event* event)$/;"	f	class:BWidgets::Widget
draggable_	BWidgets/Widget.hpp	/^	bool draggable_;$/;"	m	class:BWidgets::Widget
dragged	BWidgets/HSwitch.hpp	/^	bool dragged;$/;"	m	class:BWidgets::HSwitch
dragged	BWidgets/VSwitch.hpp	/^	bool dragged;$/;"	m	class:BWidgets::VSwitch
draw	BWidgets/Button.cpp	/^void Button::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Button
draw	BWidgets/Dial.cpp	/^void Dial::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Dial
draw	BWidgets/DownButton.cpp	/^void DownButton::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::DownButton
draw	BWidgets/DrawingSurface.cpp	/^void DrawingSurface::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::DrawingSurface
draw	BWidgets/HPianoRoll.cpp	/^void HPianoRoll::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::HPianoRoll
draw	BWidgets/HScale.cpp	/^void HScale::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::HScale
draw	BWidgets/Icon.cpp	/^void Icon::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Icon
draw	BWidgets/Knob.cpp	/^void Knob::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Knob
draw	BWidgets/Label.cpp	/^void Label::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Label
draw	BWidgets/LeftButton.cpp	/^void LeftButton::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::LeftButton
draw	BWidgets/MinusButton.cpp	/^void MinusButton::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::MinusButton
draw	BWidgets/PlusButton.cpp	/^void PlusButton::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::PlusButton
draw	BWidgets/RightButton.cpp	/^void RightButton::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::RightButton
draw	BWidgets/Text.cpp	/^void Text::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Text
draw	BWidgets/UpButton.cpp	/^void UpButton::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::UpButton
draw	BWidgets/VScale.cpp	/^void VScale::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::VScale
draw	BWidgets/Widget.cpp	/^void Widget::draw (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Widget
drawBitmap	BWidgets/pugl/win_cairo.c	/^  HBITMAP          drawBitmap;$/;"	m	struct:__anon41	file:
drawDc	BWidgets/pugl/win_cairo.c	/^  HDC              drawDc;$/;"	m	struct:__anon41	file:
drawDot	BWidgets/Dial.cpp	/^void Dial::drawDot ()$/;"	f	class:BWidgets::Dial
drawView	BWidgets/pugl/mac.h	/^  NSView*          drawView;$/;"	m	struct:PuglInternalsImpl
drawingSurface	BWidgets/DrawingSurface.hpp	/^	cairo_surface_t* drawingSurface;$/;"	m	class:BWidgets::DrawingSurface
dx	BWidgets/pugl/pugl/pugl.h	/^  double              dx;        \/\/\/< Scroll X distance in lines$/;"	m	struct:__anon31
dx1	BWidgets/PianoWidget.hpp	/^	double dx1;$/;"	m	struct:BWidgets::__anon6
dx2	BWidgets/PianoWidget.hpp	/^	double dx2;$/;"	m	struct:BWidgets::__anon6
dy	BWidgets/pugl/pugl/pugl.h	/^  double              dy;        \/\/\/< Scroll Y distance in lines$/;"	m	struct:__anon31
editMode	BWidgets/Label.hpp	/^	bool editMode;$/;"	m	class:BWidgets::Label
editable	BWidgets/Label.hpp	/^	bool editable;$/;"	m	class:BWidgets::Label
endMidiKey	BWidgets/PianoWidget.hpp	/^	int endMidiKey;$/;"	m	class:BWidgets::PianoWidget
enter	BWidgets/pugl/types.h	/^  PuglStatus (*enter)(PuglView*, const PuglEventExpose*);$/;"	m	struct:PuglBackendImpl
enterDir	BWidgets/FileChooser.cpp	/^void FileChooser::enterDir ()$/;"	f	class:BWidgets::FileChooser
entered	BWidgets/pugl_cairo_test.c	/^static bool entered = false;$/;"	v	file:
eventFunc	BWidgets/pugl/types.h	/^  PuglEventFunc      eventFunc;$/;"	m	struct:PuglViewImpl
eventQueue_	BWidgets/Window.hpp	/^	std::deque<BEvents::Event*> eventQueue_;		\/\/ TODO: std::list ?$/;"	m	class:BWidgets::Window
eventType	BWidgets/BEvents.hpp	/^	EventType eventType;$/;"	m	class:BEvents::Event
eventWidget	BWidgets/BEvents.hpp	/^	BWidgets::Widget* eventWidget;$/;"	m	class:BEvents::Event
expose	BWidgets/pugl/pugl/pugl.h	/^  PuglEventExpose    expose;    \/\/\/< #PUGL_EXPOSE$/;"	m	union:__anon34
exposeArea	BWidgets/BEvents.hpp	/^	BUtilities::RectArea exposeArea;$/;"	m	class:BEvents::ExposeEvent
ext	BUtilities/Path.hpp	/^        std::string ext() const {return ext_;}$/;"	f	class:BUtilities::Path
ext_	BUtilities/Path.hpp	/^        std::string ext_;$/;"	m	class:BUtilities::Path
extend	BUtilities/RectArea.hpp	/^	void extend (const RectArea& ra)$/;"	f	class:BUtilities::RectArea
extensionData	BAmp_GUI.cpp	/^static const void* extensionData(const char* uri)$/;"	f	file:
extension_data	BAmp.cpp	/^extension_data(const char* uri)$/;"	f	file:
family	BWidgets/cairoplus.h	/^	char family[64];$/;"	m	struct:__anon43
fb_config	BWidgets/pugl/x11_gl.c	/^  GLXFBConfig fb_config;$/;"	m	struct:__anon11	file:
fgColors	BWidgets/Dial.hpp	/^	BColors::ColorSet fgColors;$/;"	m	class:BWidgets::Dial
fgColors	BWidgets/HScale.hpp	/^	BColors::ColorSet fgColors;$/;"	m	class:BWidgets::HScale
fgColors	BWidgets/VScale.hpp	/^	BColors::ColorSet fgColors;$/;"	m	class:BWidgets::VScale
fileListBox	BWidgets/FileChooser.hpp	/^	ListBox fileListBox;$/;"	m	class:BWidgets::FileChooser
fileListBoxClickedCallback	BWidgets/FileChooser.cpp	/^void FileChooser::fileListBoxClickedCallback (BEvents::Event* event)$/;"	f	class:BWidgets::FileChooser
fileListBoxDirLabel	BWidgets/FileChooser.hpp	/^	Label fileListBoxDirLabel;$/;"	m	class:BWidgets::FileChooser
fileListBoxFileLabel	BWidgets/FileChooser.hpp	/^	Label fileListBoxFileLabel;$/;"	m	class:BWidgets::FileChooser
fileNameBox	BWidgets/FileChooser.hpp	/^	Label fileNameBox;$/;"	m	class:BWidgets::FileChooser
fileNameLabel	BWidgets/FileChooser.hpp	/^	Label fileNameLabel;$/;"	m	class:BWidgets::FileChooser
file_	BUtilities/Path.hpp	/^        std::string file_;$/;"	m	class:BUtilities::Path
filename	BUtilities/Path.hpp	/^        std::string filename() const {return file_ + (ext_.empty() ? "" : "." + ext_);}$/;"	f	class:BUtilities::Path
files	BWidgets/FileChooser.hpp	/^	std::vector<std::string> files;$/;"	m	class:BWidgets::FileChooser
fillColor	BWidgets/BStyles.hpp	/^	BColors::Color fillColor;$/;"	m	class:BStyles::Fill
fillSurface	BWidgets/BStyles.hpp	/^	cairo_surface_t* fillSurface;$/;"	m	class:BStyles::Fill
filter	BWidgets/Display.cpp	/^bool Display::filter (Widget* widget) {return true;}$/;"	f	class:BWidgets::Display
filter	BWidgets/StateDisplay.cpp	/^bool StateDisplay::filter (Widget* widget) {return (getState () == widget->getState ());}$/;"	f	class:BWidgets::StateDisplay
filter	BWidgets/Widget.cpp	/^bool Widget::filter (Widget* widget) {return true;}$/;"	f	class:BWidgets::Widget
filterPopupListBox	BWidgets/FileChooser.hpp	/^	PopupListBox filterPopupListBox;$/;"	m	class:BWidgets::FileChooser
filterPopupListBoxClickedCallback	BWidgets/FileChooser.cpp	/^void FileChooser::filterPopupListBoxClickedCallback (BEvents::Event* event)$/;"	f	class:BWidgets::FileChooser
filterPopupListBoxFilterLabel	BWidgets/FileChooser.hpp	/^	Label filterPopupListBoxFilterLabel;$/;"	m	class:BWidgets::FileChooser
filters	BWidgets/FileChooser.hpp	/^	std::vector<FileFilter> filters;$/;"	m	class:BWidgets::FileChooser
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags      flags;     \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon31
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags   flags; \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon25
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags   flags; \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon28
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags;     \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon27
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags;   \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon26
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags;  \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon23
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags;  \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon24
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags;  \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon29
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags; \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon22
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags; \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon30
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags; \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon32
flags	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFlags flags; \/\/\/< Bitwise OR of #PuglEventFlag values$/;"	m	struct:__anon33
flashing	BWidgets/pugl/win.h	/^  bool         flashing;$/;"	m	struct:PuglInternalsImpl
flushExposures	BWidgets/pugl/x11.c	/^flushExposures(PuglWorld* world)$/;"	f	file:
focus	BWidgets/pugl/pugl/pugl.h	/^  PuglEventFocus     focus;     \/\/\/< #PUGL_FOCUS_IN, #PUGL_FOCUS_OUT$/;"	m	union:__anon34
focusInCallback	BWidgets/Widget.cpp	/^void Widget::focusInCallback (BEvents::Event* event) {}$/;"	f	class:BWidgets::Widget
focusInMs	BWidgets/Focusable.hpp	/^        std::chrono::milliseconds focusInMs;$/;"	m	class:BWidgets::Focusable
focusLabel	BWidgets/Dial.hpp	/^	Label focusLabel;$/;"	m	class:BWidgets::Dial
focusLabel	BWidgets/HSlider.hpp	/^	Label focusLabel;$/;"	m	class:BWidgets::HSlider
focusLabel	BWidgets/VSlider.hpp	/^	Label focusLabel;$/;"	m	class:BWidgets::VSlider
focusOutCallback	BWidgets/Widget.cpp	/^void Widget::focusOutCallback (BEvents::Event* event) {}$/;"	f	class:BWidgets::Widget
focusOutMs	BWidgets/Focusable.hpp	/^	std::chrono::milliseconds focusOutMs;$/;"	m	class:BWidgets::Focusable
focusable_	BWidgets/Widget.hpp	/^	bool focusable_;$/;"	m	class:BWidgets::Widget
focused_	BWidgets/Window.hpp	/^	bool focused_;$/;"	m	class:BWidgets::Window
fontFamily	BWidgets/BStyles.hpp	/^	std::string fontFamily;$/;"	m	class:BStyles::Font
fontSize	BWidgets/BStyles.hpp	/^	double fontSize;$/;"	m	class:BStyles::Font
fontSlant	BWidgets/BStyles.hpp	/^	cairo_font_slant_t fontSlant;$/;"	m	class:BStyles::Font
fontWeight	BWidgets/BStyles.hpp	/^	cairo_font_weight_t fontWeight;$/;"	m	class:BStyles::Font
forEachChild	BWidgets/Widget.cpp	/^void Widget::forEachChild (std::function<bool (Widget* widget)> func)$/;"	f	class:BWidgets::Widget
forEachChild	BWidgets/Widget.cpp	/^void Widget::forEachChild (std::vector<Widget*>::iterator first, std::vector<Widget*>::iterator last,$/;"	f	class:BWidgets::Widget
frame	BWidgets/pugl/types.h	/^  PuglRect           frame;$/;"	m	struct:PuglViewImpl
front	BWidgets/pugl/x11_cairo.c	/^  cairo_surface_t* front;$/;"	m	struct:__anon9	file:
get	BUtilities/Any.hpp	/^        template <class T> T get () const$/;"	f	class:BUtilities::Any
getAbsoluteArea	BWidgets/Widget.cpp	/^BUtilities::RectArea Widget::getAbsoluteArea () const$/;"	f	class:BWidgets::Widget
getAbsolutePosition	BWidgets/Widget.cpp	/^BUtilities::Point Widget::getAbsolutePosition () const$/;"	f	class:BWidgets::Widget
getAbsoluteTotalArea	BWidgets/Widget.cpp	/^BUtilities::RectArea Widget::getAbsoluteTotalArea (std::function<bool (Widget* widget)> func)$/;"	f	class:BWidgets::Widget
getActive	BWidgets/ChoiceBox.cpp	/^int ChoiceBox::getActive () const {return activeNr;}$/;"	f	class:BWidgets::ChoiceBox
getActiveItem	BWidgets/ChoiceBox.cpp	/^BItems::Item* ChoiceBox::getActiveItem ()$/;"	f	class:BWidgets::ChoiceBox
getActiveKeys	BWidgets/PianoWidget.cpp	/^std::vector<bool> PianoWidget::getActiveKeys () const {return activeKeys;}$/;"	f	class:BWidgets::PianoWidget
getAlpha	BWidgets/BColors.cpp	/^double Color::getAlpha() const {return alpha_;}$/;"	f	class:BColors::Color
getArea	BWidgets/BEvents.hpp	/^	BUtilities::RectArea getArea () const$/;"	f	class:BEvents::ExposeEvent
getArea	BWidgets/Widget.cpp	/^BUtilities::RectArea Widget::getArea () const {return area_;}$/;"	f	class:BWidgets::Widget
getBackground	BWidgets/Widget.cpp	/^BStyles::Fill* Widget::getBackground () {return &background_;}$/;"	f	class:BWidgets::Widget
getBlue	BWidgets/BColors.cpp	/^double Color::getBlue() const {return blue_;}$/;"	f	class:BColors::Color
getBorder	BWidgets/Widget.cpp	/^BStyles::Border* Widget::getBorder () {return &border_;}$/;"	f	class:BWidgets::Widget
getBottom	BWidgets/ChoiceBox.cpp	/^int ChoiceBox::getBottom () {return (getTop () + getLines () - 1);}$/;"	f	class:BWidgets::ChoiceBox
getButton	BWidgets/BEvents.hpp	/^	BDevices::ButtonCode getButton () const$/;"	f	class:BEvents::PointerEvent
getButtonGrabStack	BWidgets/Window.cpp	/^BDevices::DeviceGrabStack<BDevices::MouseDevice>* Window::getButtonGrabStack () {return &buttonGrabStack_;}$/;"	f	class:BWidgets::Window
getButtonText	BWidgets/FileChooser.cpp	/^std::string FileChooser::getButtonText () {return okButtonText;}$/;"	f	class:BWidgets::FileChooser
getButtonText	BWidgets/MessageBox.cpp	/^std::string MessageBox::getButtonText (const double value) const$/;"	f	class:BWidgets::MessageBox
getButtonValue	BWidgets/MessageBox.cpp	/^double MessageBox::getButtonValue  (const std::string& label) const$/;"	f	class:BWidgets::MessageBox
getCairoSurface	BWidgets/BStyles.cpp	/^cairo_surface_t* Fill::getCairoSurface () {return fillSurface;}$/;"	f	class:BStyles::Fill
getChildren	BWidgets/Widget.cpp	/^std::vector<Widget*> Widget::getChildren () const {return children_;}$/;"	f	class:BWidgets::Widget
getColor	BWidgets/BColors.cpp	/^Color* ColorSet::getColor (const State state)$/;"	f	class:BColors::ColorSet
getColor	BWidgets/BStyles.cpp	/^BColors::Color* Fill::getColor () {return &fillColor;}$/;"	f	class:BStyles::Fill
getColor	BWidgets/BStyles.cpp	/^BColors::Color* Line::getColor () {return &lineColor;}$/;"	f	class:BStyles::Line
getContent	BWidgets/BEvents.hpp	/^	BUtilities::Any getContent () const$/;"	f	class:BEvents::MessageEvent
getContext	BWidgets/pugl/types.h	/^  void* (*getContext)(PuglView*);$/;"	m	struct:PuglBackendImpl
getCursorFromCoords	BWidgets/Label.cpp	/^size_t Label::getCursorFromCoords (const BUtilities::Point& position)$/;"	f	class:BWidgets::Label
getDelta	BWidgets/BEvents.hpp	/^	BUtilities::Point getDelta () const$/;"	f	class:BEvents::PointerEvent
getDelta	BWidgets/BEvents.hpp	/^	BUtilities::Point getDelta () const$/;"	f	class:BEvents::WheelEvent
getDepth	BWidgets/Knob.cpp	/^double Knob::getDepth () const {return knobDepth;}$/;"	f	class:BWidgets::Knob
getDevices	BWidgets/BDevices.hpp	/^	std::set<T> getDevices () const {return devices_;}$/;"	f	class:BDevices::DeviceGrab
getDevices	BWidgets/BDevices.hpp	/^	std::set<T> getDevices (BWidgets::Widget* widget)$/;"	f	class:BDevices::DeviceGrabStack
getDisplayLabel	BWidgets/DialValue.cpp	/^Label* DialValue::getDisplayLabel () {return &valueDisplay;}$/;"	f	class:BWidgets::DialValue
getDisplayLabel	BWidgets/HSliderValue.cpp	/^Label* HSliderValue::getDisplayLabel () {return &valueDisplay;}$/;"	f	class:BWidgets::HSliderValue
getDisplayLabel	BWidgets/VSliderValue.cpp	/^Label* VSliderValue::getDisplayLabel () {return &valueDisplay;}$/;"	f	class:BWidgets::VSliderValue
getDrawingSurface	BWidgets/DrawingSurface.cpp	/^cairo_surface_t* DrawingSurface::getDrawingSurface () {return drawingSurface;}$/;"	f	class:BWidgets::DrawingSurface
getEditMode	BWidgets/Label.cpp	/^bool Label::getEditMode () const {return editMode;}$/;"	f	class:BWidgets::Label
getEffectiveArea	BWidgets/Widget.cpp	/^BUtilities::RectArea Widget::getEffectiveArea ()$/;"	f	class:BWidgets::Widget
getEffectiveHeight	BWidgets/Widget.cpp	/^double Widget::getEffectiveHeight ()$/;"	f	class:BWidgets::Widget
getEffectiveWidth	BWidgets/Widget.cpp	/^double Widget::getEffectiveWidth ()$/;"	f	class:BWidgets::Widget
getEventType	BWidgets/BEvents.hpp	/^	EventType getEventType () const$/;"	f	class:BEvents::Event
getExtends	BUtilities/RectArea.hpp	/^	Point getExtends () const {return Point (p2.x - p1.x, p2.y - p1.y);}$/;"	f	class:BUtilities::RectArea
getExtends	BWidgets/Widget.cpp	/^BUtilities::Point Widget::getExtends () const {return BUtilities::Point (area_.getWidth (), area_.getHeight ());}$/;"	f	class:BWidgets::Widget
getFileListBoxClickedCallback	BWidgets/FileChooser.cpp	/^std::function<void (BEvents::Event*)> FileChooser::getFileListBoxClickedCallback()$/;"	f	class:BWidgets::FileChooser
getFileName	BWidgets/FileChooser.cpp	/^std::string FileChooser::getFileName () const {return fileNameBox.getText();}$/;"	f	class:BWidgets::FileChooser
getFilters	BWidgets/FileChooser.cpp	/^std::vector<FileFilter> FileChooser::getFilters () const {return filters;}$/;"	f	class:BWidgets::FileChooser
getFocusInMilliseconds	BWidgets/Focusable.hpp	/^	std::chrono::milliseconds getFocusInMilliseconds () const {return focusInMs;}$/;"	f	class:BWidgets::Focusable
getFocusOutMilliseconds	BWidgets/Focusable.hpp	/^	std::chrono::milliseconds getFocusOutMilliseconds () const {return focusOutMs;}$/;"	f	class:BWidgets::Focusable
getFont	BWidgets/Label.cpp	/^BStyles::Font* Label::getFont () {return &labelFont;}$/;"	f	class:BWidgets::Label
getFont	BWidgets/MessageBox.cpp	/^BStyles::Font* MessageBox::getFont () {return textBox.getFont ();}$/;"	f	class:BWidgets::MessageBox
getFont	BWidgets/Text.cpp	/^BStyles::Font* Text::getFont () {return &textFont;}$/;"	f	class:BWidgets::Text
getFontFamily	BWidgets/BStyles.cpp	/^std::string Font::getFontFamily () const {return fontFamily;}$/;"	f	class:BStyles::Font
getFontSize	BWidgets/BStyles.cpp	/^double Font::getFontSize () const {return fontSize;}$/;"	f	class:BStyles::Font
getFontSlant	BWidgets/BStyles.cpp	/^cairo_font_slant_t Font::getFontSlant () const {return fontSlant;}$/;"	f	class:BStyles::Font
getFontWeight	BWidgets/BStyles.cpp	/^cairo_font_weight_t Font::getFontWeight () const {return fontWeight;}$/;"	f	class:BStyles::Font
getGrab	BWidgets/BDevices.hpp	/^	DeviceGrab<T>* getGrab (const T& device)$/;"	f	class:BDevices::DeviceGrabStack
getGreen	BWidgets/BColors.cpp	/^double Color::getGreen() const {return green_;}$/;"	f	class:BColors::Color
getHeight	BUtilities/RectArea.hpp	/^	double getHeight () const {return (p2.y - p1.y);}$/;"	f	class:BUtilities::RectArea
getHeight	BWidgets/Widget.cpp	/^double Widget::getHeight () const {return area_.getHeight ();}$/;"	f	class:BWidgets::Widget
getIconSurface	BWidgets/Icon.cpp	/^cairo_surface_t* Icon::getIconSurface (BColors::State state) const$/;"	f	class:BWidgets::Icon
getItem	BWidgets/BItems.cpp	/^Item* ItemList::getItem (const double value)$/;"	f	class:BItems::ItemList
getItem	BWidgets/ChoiceBox.cpp	/^BItems::Item* ChoiceBox::getItem (const double val)$/;"	f	class:BWidgets::ChoiceBox
getItem	BWidgets/ItemBox.cpp	/^BItems::Item* ItemBox::getItem () {return &item;}$/;"	f	class:BWidgets::ItemBox
getItemList	BWidgets/ChoiceBox.cpp	/^BItems::ItemList* ChoiceBox::getItemList () {return &items;}$/;"	f	class:BWidgets::ChoiceBox
getItemList	BWidgets/PopupListBox.cpp	/^BItems::ItemList* PopupListBox::getItemList () {return listBox.getItemList ();}$/;"	f	class:BWidgets::PopupListBox
getKey	BWidgets/BEvents.hpp	/^	 uint32_t getKey () const$/;"	f	class:BEvents::KeyEvent
getKey	BWidgets/HPianoRoll.cpp	/^int HPianoRoll::getKey (const BUtilities::Point position)$/;"	f	class:BWidgets::HPianoRoll
getKeyGrabStack	BWidgets/Window.cpp	/^BDevices::DeviceGrabStack<uint32_t>* Window::getKeyGrabStack () {return &keyGrabStack_;}$/;"	f	class:BWidgets::Window
getKeyUTF8	BWidgets/BEvents.hpp	/^	 std::string getKeyUTF8 () const$/;"	f	class:BEvents::KeyEvent
getLabel	BWidgets/TextButton.cpp	/^Label* TextButton::getLabel () {return &buttonLabel;}$/;"	f	class:BWidgets::TextButton
getLabel	BWidgets/TextToggleButton.cpp	/^Label* TextToggleButton::getLabel () {return &buttonLabel;}$/;"	f	class:BWidgets::TextToggleButton
getLine	BWidgets/BStyles.cpp	/^Line* Border::getLine () {return &borderLine;}$/;"	f	class:BStyles::Border
getLineSpacing	BWidgets/BStyles.cpp	/^double Font::getLineSpacing () const {return textLineSpacing;}$/;"	f	class:BStyles::Font
getLines	BWidgets/ChoiceBox.cpp	/^int ChoiceBox::getLines () {return 1.0;}$/;"	f	class:BWidgets::ChoiceBox
getLines	BWidgets/ListBox.cpp	/^int ListBox::getLines ()$/;"	f	class:BWidgets::ListBox
getListBox	BWidgets/PopupListBox.cpp	/^ListBox* PopupListBox::getListBox () {return &listBox;}$/;"	f	class:BWidgets::PopupListBox
getMainWindow	BWidgets/Widget.cpp	/^Window* Widget::getMainWindow () const {return main_;}$/;"	f	class:BWidgets::Widget
getMargin	BWidgets/BStyles.cpp	/^double Border::getMargin () const {return borderMargin;}$/;"	f	class:BStyles::Border
getMax	BWidgets/RangeWidget.cpp	/^double RangeWidget::getMax () const {return rangeMax;}$/;"	f	class:BWidgets::RangeWidget
getMin	BWidgets/RangeWidget.cpp	/^double RangeWidget::getMin () const {return rangeMin;}$/;"	f	class:BWidgets::RangeWidget
getModifiers	BWidgets/pugl/win.c	/^getModifiers(void)$/;"	f	file:
getName	BWidgets/BEvents.hpp	/^	std::string getName () const$/;"	f	class:BEvents::MessageEvent
getName	BWidgets/BStyles.cpp	/^std::string StyleSet::getName () const {return stylesetName;}$/;"	f	class:BStyles::StyleSet
getName	BWidgets/Widget.cpp	/^std::string Widget::getName () const {return name_;}$/;"	f	class:BWidgets::Widget
getNextValue	BWidgets/BItems.cpp	/^double ItemList::getNextValue () const$/;"	f	class:BItems::ItemList
getOrigin	BWidgets/BEvents.hpp	/^	BUtilities::Point getOrigin () const$/;"	f	class:BEvents::PointerEvent
getPadding	BWidgets/BStyles.cpp	/^double Border::getPadding () const {return borderPadding;}$/;"	f	class:BStyles::Border
getParent	BWidgets/Widget.cpp	/^Widget* Widget::getParent () const {return parent_;}$/;"	f	class:BWidgets::Widget
getPath	BWidgets/FileChooser.cpp	/^std::string FileChooser::getPath () const {return pathNameBox.getText();}$/;"	f	class:BWidgets::FileChooser
getPosition	BUtilities/RectArea.hpp	/^	Point getPosition () const {return p1;}$/;"	f	class:BUtilities::RectArea
getPosition	BWidgets/BEvents.hpp	/^	 BUtilities::Point getPosition () const$/;"	f	class:BEvents::KeyEvent
getPosition	BWidgets/BEvents.hpp	/^	BUtilities::Point getPosition () const$/;"	f	class:BEvents::FocusEvent
getPosition	BWidgets/BEvents.hpp	/^	BUtilities::Point getPosition () const$/;"	f	class:BEvents::PointerEvent
getPosition	BWidgets/BEvents.hpp	/^	BUtilities::Point getPosition () const$/;"	f	class:BEvents::WheelEvent
getPosition	BWidgets/Widget.cpp	/^BUtilities::Point Widget::getPosition () const {return area_.getPosition();}$/;"	f	class:BWidgets::Widget
getPressedKeys	BWidgets/PianoWidget.cpp	/^std::vector<bool> PianoWidget::getPressedKeys () const {return pressedKeys;}$/;"	f	class:BWidgets::PianoWidget
getPuglContext	BWidgets/Window.cpp	/^cairo_t* Window::getPuglContext ()$/;"	f	class:BWidgets::Window
getPuglView	BWidgets/Window.cpp	/^PuglView* Window::getPuglView () {return view_;}$/;"	f	class:BWidgets::Window
getRadius	BWidgets/BStyles.cpp	/^double Border::getRadius () const {return borderRadius;}$/;"	f	class:BStyles::Border
getRed	BWidgets/BColors.cpp	/^double Color::getRed() const {return red_;}$/;"	f	class:BColors::Color
getRelativeValue	BWidgets/RangeWidget.cpp	/^double RangeWidget::getRelativeValue () const$/;"	f	class:BWidgets::RangeWidget
getRequestWidget	BWidgets/BEvents.hpp	/^ 	BWidgets::Widget* getRequestWidget ()$/;"	f	class:BEvents::WidgetEvent
getStacking	BWidgets/Widget.cpp	/^WidgetStacking Widget::getStacking () const {return stacking_;};$/;"	f	class:BWidgets::Widget
getState	BWidgets/Widget.cpp	/^BColors::State Widget::getState () const {return widgetState_;}$/;"	f	class:BWidgets::Widget
getStep	BWidgets/RangeWidget.cpp	/^double RangeWidget::getStep () const {return rangeStep;}$/;"	f	class:BWidgets::RangeWidget
getStyle	BWidgets/BStyles.cpp	/^void* StyleSet::getStyle (const std::string& styleName)$/;"	f	class:BStyles::StyleSet
getStyle	BWidgets/BStyles.cpp	/^void* Theme::getStyle (const std::string& setName, const std::string& styleName)$/;"	f	class:BStyles::Theme
getText	BWidgets/Label.cpp	/^std::string Label::getText () const {return labelText;}$/;"	f	class:BWidgets::Label
getText	BWidgets/MessageBox.cpp	/^std::string MessageBox::getText () const {return textBox.getText ();}$/;"	f	class:BWidgets::MessageBox
getText	BWidgets/Text.cpp	/^std::string Text::getText () const {return textString;}$/;"	f	class:BWidgets::Text
getTextAlign	BWidgets/BStyles.cpp	/^TextAlign Font::getTextAlign () const {return textAlign;}$/;"	f	class:BStyles::Font
getTextBlock	BWidgets/Text.cpp	/^std::vector<std::string> Text::getTextBlock ()$/;"	f	class:BWidgets::Text
getTextBlockHeight	BWidgets/Text.cpp	/^double Text::getTextBlockHeight (std::vector<std::string> textBlock)$/;"	f	class:BWidgets::Text
getTextColors	BWidgets/Label.cpp	/^BColors::ColorSet* Label::getTextColors () {return &labelColors;}$/;"	f	class:BWidgets::Label
getTextColors	BWidgets/MessageBox.cpp	/^BColors::ColorSet* MessageBox::getTextColors () {return textBox.getTextColors ();}$/;"	f	class:BWidgets::MessageBox
getTextColors	BWidgets/Text.cpp	/^BColors::ColorSet* Text::getTextColors () {return &textColors;}$/;"	f	class:BWidgets::Text
getTextExtents	BWidgets/BStyles.cpp	/^cairo_text_extents_t Font::getTextExtents (cairo_t* cr, const std::string& text) const$/;"	f	class:BStyles::Font
getTextVAlign	BWidgets/BStyles.cpp	/^TextVAlign Font::getTextVAlign () const {return textVAlign;}$/;"	f	class:BStyles::Font
getTextWidth	BWidgets/Label.cpp	/^double Label::getTextWidth (std::string& text)$/;"	f	class:BWidgets::Label
getTime	BWidgets/BDevices.hpp	/^	std::chrono::steady_clock::time_point getTime () const {return time_;}$/;"	f	class:BDevices::MouseDevice
getTitle	BWidgets/MessageBox.cpp	/^std::string MessageBox::getTitle () const {return titleBox.getText ();}$/;"	f	class:BWidgets::MessageBox
getTop	BWidgets/ChoiceBox.cpp	/^int ChoiceBox::getTop () const {return activeNr;}$/;"	f	class:BWidgets::ChoiceBox
getTop	BWidgets/ListBox.cpp	/^int ListBox::getTop () const {return listTop;}$/;"	f	class:BWidgets::ListBox
getTotalArea	BWidgets/Widget.cpp	/^BUtilities::RectArea Widget::getTotalArea (std::function<bool (Widget* widget)> func)$/;"	f	class:BWidgets::Widget
getValue	BWidgets/BEvents.hpp	/^	double getValue () const$/;"	f	class:BEvents::ValueChangedEvent
getValue	BWidgets/BItems.cpp	/^double Item::getValue () const {return this->value;}$/;"	f	class:BItems::Item
getValue	BWidgets/ValueWidget.cpp	/^double ValueWidget::getValue () const {return value;}$/;"	f	class:BWidgets::ValueWidget
getValueFormat	BWidgets/DialValue.cpp	/^std::string DialValue::getValueFormat () const {return valFormat;}$/;"	f	class:BWidgets::DialValue
getValueFormat	BWidgets/HSliderValue.cpp	/^std::string HSliderValue::getValueFormat () const {return valFormat;}$/;"	f	class:BWidgets::HSliderValue
getValueFormat	BWidgets/VSliderValue.cpp	/^std::string VSliderValue::getValueFormat () const {return valFormat;}$/;"	f	class:BWidgets::VSliderValue
getValuePosition	BWidgets/HSliderValue.cpp	/^LabelPosition HSliderValue::getValuePosition () const {return valPosition;}$/;"	f	class:BWidgets::HSliderValue
getValuePosition	BWidgets/VSliderValue.cpp	/^LabelPosition VSliderValue::getValuePosition () const {return valPosition;}$/;"	f	class:BWidgets::VSliderValue
getWidget	BWidgets/BDevices.hpp	/^	BWidgets::Widget* getWidget () const {return widget_;}$/;"	f	class:BDevices::DeviceGrab
getWidget	BWidgets/BEvents.hpp	/^	BWidgets::Widget* getWidget ()$/;"	f	class:BEvents::Event
getWidget	BWidgets/BItems.cpp	/^BWidgets::Widget* Item::getWidget () const {return widget;}$/;"	f	class:BItems::Item
getWidgetAt	BWidgets/Widget.cpp	/^Widget* Widget::getWidgetAt (const BUtilities::Point& abspos, const BUtilities::RectArea& outerArea,$/;"	f	class:BWidgets::Widget
getWidgetAt	BWidgets/Widget.cpp	/^Widget* Widget::getWidgetAt (const BUtilities::Point& position, std::function<bool (Widget* widget)> func)$/;"	f	class:BWidgets::Widget
getWidth	BUtilities/RectArea.hpp	/^	double getWidth () const {return (p2.x - p1.x);}$/;"	f	class:BUtilities::RectArea
getWidth	BWidgets/BStyles.cpp	/^double Line::getWidth () const {return lineWidth;}$/;"	f	class:BStyles::Line
getWidth	BWidgets/Widget.cpp	/^double Widget::getWidth () const {return area_.getWidth ();}$/;"	f	class:BWidgets::Widget
getX	BUtilities/RectArea.hpp	/^	double getX () const {return p1.x;}$/;"	f	class:BUtilities::RectArea
getXOffset	BWidgets/Widget.cpp	/^double Widget::getXOffset () {return border_.getMargin () + border_.getLine()->getWidth() + border_.getPadding ();}$/;"	f	class:BWidgets::Widget
getY	BUtilities/RectArea.hpp	/^	double getY () const {return p1.y;}$/;"	f	class:BUtilities::RectArea
getYOffset	BWidgets/Widget.cpp	/^double Widget::getYOffset () {return border_.getMargin () + border_.getLine()->getWidth() + border_.getPadding ();}$/;"	f	class:BWidgets::Widget
green	BWidgets/BColors.hpp	/^const Color green = Color (0.0, 1.0, 0.0, 1.0);$/;"	m	namespace:BColors
green	BWidgets/cairoplus.h	/^	double green;$/;"	m	struct:__anon42
greenFill	BWidgets/BStyles.hpp	/^const Fill greenFill = Fill (BColors::green);$/;"	m	namespace:BStyles
green_	BWidgets/BColors.hpp	/^	double red_, green_, blue_, alpha_;$/;"	m	class:BColors::Color
greens	BWidgets/BColors.hpp	/^const ColorSet greens = ColorSet ({green, lightgreen, darkgreen, black});$/;"	m	namespace:BColors
grey	BWidgets/BColors.hpp	/^const Color grey = Color (0.5, 0.5, 0.5, 1.0);$/;"	m	namespace:BColors
grey20	BWidgets/BColors.hpp	/^const Color grey20 = Color (0.2, 0.2, 0.2, 1.0);$/;"	m	namespace:BColors
grey20Fill	BWidgets/BStyles.hpp	/^const Fill grey20Fill = Fill (BColors::grey20);$/;"	m	namespace:BStyles
grey40	BWidgets/BColors.hpp	/^const Color grey40 = Color (0.4, 0.4, 0.4, 1.0);$/;"	m	namespace:BColors
grey60	BWidgets/BColors.hpp	/^const Color grey60 = Color (0.6, 0.6, 0.6, 1.0);$/;"	m	namespace:BColors
grey80	BWidgets/BColors.hpp	/^const Color grey80 = Color (0.8, 0.8, 0.8, 1.0);$/;"	m	namespace:BColors
greyBorder1pt	BWidgets/BStyles.hpp	/^const Border greyBorder1pt = Border (greyLine1pt);$/;"	m	namespace:BStyles
greyFill	BWidgets/BStyles.hpp	/^const Fill greyFill = Fill (BColors::grey);$/;"	m	namespace:BStyles
greyLine1pt	BWidgets/BStyles.hpp	/^const Line greyLine1pt = Line (BColors::grey, 1.0);$/;"	m	namespace:BStyles
greys	BWidgets/BColors.hpp	/^const ColorSet greys = ColorSet ({grey, lightgrey, darkgrey, black});$/;"	m	namespace:BColors
guiDescriptor	BAmp_GUI.cpp	/^static const LV2UI_Descriptor guiDescriptor = {$/;"	v	file:
h	BWidgets/pugl_cairo_test.c	/^	int         h;$/;"	m	struct:__anon1	file:
handle	BWidgets/pugl/types.h	/^  PuglHandle         handle;$/;"	m	struct:PuglViewImpl
handle	BWidgets/pugl/types.h	/^  PuglWorldHandle     handle;$/;"	m	struct:PuglWorldImpl
handleButtonClicked	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::handleButtonClicked (BEvents::Event* event)$/;"	f	class:BWidgets::ChoiceBox
handleButtonClicked	BWidgets/ListBox.cpp	/^void ListBox::handleButtonClicked (BEvents::Event* event)$/;"	f	class:BWidgets::ListBox
handleConfigure	BWidgets/pugl/win.c	/^handleConfigure(PuglView* view, PuglEvent* event)$/;"	f	file:
handleCrossing	BWidgets/pugl/win.c	/^handleCrossing(PuglView* view, const PuglEventType type, POINT pos)$/;"	f	file:
handleDownButtonClicked	BWidgets/PopupListBox.cpp	/^void PopupListBox::handleDownButtonClicked (BEvents::Event* event)$/;"	f	class:BWidgets::PopupListBox
handleEvents	BWidgets/Window.cpp	/^void Window::handleEvents ()$/;"	f	class:BWidgets::Window
handleItemClicked	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::handleItemClicked (BEvents::Event* event)$/;"	f	class:BWidgets::ChoiceBox
handleMessage	BWidgets/pugl/win.c	/^handleMessage(PuglView* view, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	file:
handleSelectionNotify	BWidgets/pugl/x11.c	/^handleSelectionNotify(const PuglWorld* world, PuglView* view)$/;"	f	file:
handleSelectionRequest	BWidgets/pugl/x11.c	/^handleSelectionRequest(const PuglWorld*              world,$/;"	f	file:
handleTimerEvent	BWidgets/pugl/x11.c	/^handleTimerEvent(PuglWorld* world, XEvent xevent)$/;"	f	file:
handleValueChanged	BWidgets/PopupListBox.cpp	/^void PopupListBox::handleValueChanged (BEvents::Event* event)$/;"	f	class:BWidgets::PopupListBox
hardChangeable	BWidgets/ValueWidget.hpp	/^	bool hardChangeable;$/;"	m	class:BWidgets::ValueWidget
hasChildren	BWidgets/Widget.cpp	/^bool Widget::hasChildren () const {return (children_.size () > 0 ? true : false);}$/;"	f	class:BWidgets::Widget
hdc	BWidgets/pugl/win.h	/^  HDC          hdc;$/;"	m	struct:PuglInternalsImpl
hdc	BWidgets/pugl/win_gl.c	/^  HDC  hdc;$/;"	m	struct:__anon14	file:
height	BWidgets/pugl/pugl/pugl.h	/^  double         height; \/\/\/< Height of exposed region$/;"	m	struct:__anon24
height	BWidgets/pugl/pugl/pugl.h	/^  double         height; \/\/\/< New height$/;"	m	struct:__anon23
height	BWidgets/pugl/pugl/pugl.h	/^  double height;$/;"	m	struct:__anon15
hglrc	BWidgets/pugl/win_gl.c	/^  HGLRC          hglrc;$/;"	m	struct:__anon13	file:
hide	BWidgets/Widget.cpp	/^void Widget::hide ()$/;"	f	class:BWidgets::Widget
hints	BWidgets/pugl/types.h	/^  PuglHints          hints;$/;"	m	struct:PuglViewImpl
hwnd	BWidgets/pugl/win.h	/^  HWND         hwnd;$/;"	m	struct:PuglInternalsImpl
hwnd	BWidgets/pugl/win_gl.c	/^  HWND hwnd;$/;"	m	struct:__anon14	file:
iconSurface	BWidgets/Icon.hpp	/^	std::vector<cairo_surface_t*> iconSurface;$/;"	m	class:BWidgets::Icon
id	BWidgets/pugl/pugl/pugl.h	/^  uintptr_t      id;    \/\/\/< Timer ID$/;"	m	struct:__anon33
id	BWidgets/pugl/x11.h	/^  uintptr_t id;$/;"	m	struct:__anon8
idle	BAmp_GUI.cpp	/^static const LV2UI_Idle_Interface idle = {callIdle};$/;"	v	file:
ignoreKeyEvent	BWidgets/pugl/win.c	/^ignoreKeyEvent(PuglView* view, LPARAM lParam)$/;"	f	file:
impl	BWidgets/pugl/types.h	/^  PuglInternals*     impl;$/;"	m	struct:PuglViewImpl
impl	BWidgets/pugl/types.h	/^  PuglWorldInternals* impl;$/;"	m	struct:PuglWorldImpl
includes	BUtilities/RectArea.hpp	/^	bool includes (const RectArea& ra) const$/;"	f	class:BUtilities::RectArea
initCharEvent	BWidgets/pugl/win.c	/^initCharEvent(PuglEvent* event, PuglView* view, WPARAM wParam, LPARAM lParam)$/;"	f	file:
initItem	BWidgets/PopupListBox.cpp	/^void PopupListBox::initItem ()$/;"	f	class:BWidgets::PopupListBox
initKeyEvent	BWidgets/pugl/win.c	/^initKeyEvent(PuglEventKey* event,$/;"	f	file:
initMouseEvent	BWidgets/pugl/win.c	/^initMouseEvent(PuglEvent* event,$/;"	f	file:
initScrollEvent	BWidgets/pugl/win.c	/^initScrollEvent(PuglEvent* event, PuglView* view, LPARAM lParam)$/;"	f	file:
instantiate	BAmp.cpp	/^instantiate(const LV2_Descriptor* descriptor, double rate,$/;"	f	file:
instantiate	BAmp_GUI.cpp	/^static LV2UI_Handle instantiate (const LV2UI_Descriptor *descriptor, const char *plugin_uri, const char *bundle_path,$/;"	f	file:
internal	BWidgets/BItems.hpp	/^        BWidgets::Widget* internal;$/;"	m	class:BItems::Item
intersect	BUtilities/RectArea.hpp	/^	void intersect (const RectArea& ra)$/;"	f	class:BUtilities::RectArea
invisible	BWidgets/BColors.hpp	/^const Color invisible = Color (0.0, 0.0, 0.0, 0.0);$/;"	m	namespace:BColors
isChild	BWidgets/Widget.cpp	/^bool Widget::isChild (Widget* child)$/;"	f	class:BWidgets::Widget
isClickable	BWidgets/Widget.cpp	/^bool Widget::isClickable () const {return clickable_;}$/;"	f	class:BWidgets::Widget
isClicklable	BWidgets/Widget.cpp	/^bool isClicklable (Widget* widget) {return widget->isClickable();}$/;"	f	namespace:BWidgets
isDraggable	BWidgets/Widget.cpp	/^bool Widget::isDraggable () const {return draggable_;}$/;"	f	class:BWidgets::Widget
isDraggable	BWidgets/Widget.cpp	/^bool isDraggable (Widget* widget) {return widget->isDraggable();}$/;"	f	namespace:BWidgets
isEditable	BWidgets/Label.cpp	/^bool Label::isEditable () const {return editable;}$/;"	f	class:BWidgets::Label
isFocusActive	BWidgets/Focusable.hpp	/^        bool isFocusActive (const std::chrono::milliseconds diffMs) const {return ((diffMs >= focusInMs) && (diffMs < focusOutMs));}$/;"	f	class:BWidgets::Focusable
isFocusable	BWidgets/Widget.cpp	/^bool Widget::isFocusable () const {return focusable_;}$/;"	f	class:BWidgets::Widget
isFocusable	BWidgets/Widget.cpp	/^bool isFocusable (Widget* widget) {return widget->isFocusable();}$/;"	f	namespace:BWidgets
isHardChangeable	BWidgets/ValueWidget.cpp	/^bool ValueWidget::isHardChangeable () const {return hardChangeable;}$/;"	f	class:BWidgets::ValueWidget
isKeysToggleable	BWidgets/HPianoRoll.cpp	/^bool HPianoRoll::isKeysToggleable () const {return toggleKeys;}$/;"	f	class:BWidgets::HPianoRoll
isMergeable	BWidgets/Widget.cpp	/^bool Widget::isMergeable (const BEvents::EventType eventType) const {return mergeable_[eventType];}$/;"	f	class:BWidgets::Widget
isScrollable	BWidgets/Widget.cpp	/^bool Widget::isScrollable () const {return scrollable_;}$/;"	f	class:BWidgets::Widget
isScrollable	BWidgets/Widget.cpp	/^bool isScrollable (Widget* widget) {return widget->isScrollable();}$/;"	f	namespace:BWidgets
isValueable	BWidgets/ValueWidget.cpp	/^bool ValueWidget::isValueable () const {return valueable_;}$/;"	f	class:BWidgets::ValueWidget
isVisible	BWidgets/Widget.cpp	/^bool Widget::isVisible()$/;"	f	class:BWidgets::Widget
isVisible	BWidgets/Widget.cpp	/^bool isVisible (Widget* widget) {return widget->isVisible();}$/;"	f	namespace:BWidgets
isYResizable	BWidgets/Text.cpp	/^bool Text::isYResizable () const {return yResizable;}$/;"	f	class:BWidgets::Text
item	BWidgets/ItemBox.hpp	/^	BItems::Item item;$/;"	m	class:BWidgets::ItemBox
items	BWidgets/ChoiceBox.hpp	/^	BItems::ItemList items;$/;"	m	class:BWidgets::ChoiceBox
key	BWidgets/BEvents.hpp	/^	uint32_t key;$/;"	m	class:BEvents::KeyEvent
key	BWidgets/pugl/pugl/pugl.h	/^  PuglEventKey       key;       \/\/\/< #PUGL_KEY_PRESS, #PUGL_KEY_RELEASE$/;"	m	union:__anon34
key	BWidgets/pugl/pugl/pugl.h	/^  uint32_t       key;     \/\/\/< Unshifted Unicode character code, or 0$/;"	m	struct:__anon26
keyCoords	BWidgets/PianoWidget.hpp	/^const std::array<KeyCoords, 12> keyCoords=$/;"	m	namespace:BWidgets
keyGrabStack_	BWidgets/Window.hpp	/^	BDevices::DeviceGrabStack<uint32_t> keyGrabStack_;$/;"	m	class:BWidgets::Window
keySymToSpecial	BWidgets/pugl/win.c	/^keySymToSpecial(WPARAM sym)$/;"	f	file:
keySymToSpecial	BWidgets/pugl/x11.c	/^keySymToSpecial(KeySym sym)$/;"	f	file:
keycode	BWidgets/pugl/pugl/pugl.h	/^  uint32_t       keycode;   \/\/\/< Raw key code$/;"	m	struct:__anon27
keycode	BWidgets/pugl/pugl/pugl.h	/^  uint32_t       keycode; \/\/\/< Raw key code$/;"	m	struct:__anon26
knob	BWidgets/Dial.hpp	/^	Knob knob;$/;"	m	class:BWidgets::Dial
knob	BWidgets/HSlider.hpp	/^	Knob knob;$/;"	m	class:BWidgets::HSlider
knob	BWidgets/VSlider.hpp	/^	Knob knob;$/;"	m	class:BWidgets::VSlider
knobDepth	BWidgets/Knob.hpp	/^	double knobDepth;$/;"	m	class:BWidgets::Knob
knobPosition	BWidgets/HSlider.hpp	/^	BUtilities::Point knobPosition;$/;"	m	class:BWidgets::HSlider
knobPosition	BWidgets/VSlider.hpp	/^	BUtilities::Point knobPosition;$/;"	m	class:BWidgets::VSlider
knobRadius	BWidgets/HSlider.hpp	/^	double knobRadius;$/;"	m	class:BWidgets::HSlider
knobRadius	BWidgets/VSlider.hpp	/^	double knobRadius;$/;"	m	class:BWidgets::VSlider
label	BWidgets/pugl_cairo_test.c	/^	const char* label;$/;"	m	struct:__anon1	file:
labelColors	BWidgets/Label.hpp	/^	BColors::ColorSet labelColors;$/;"	m	class:BWidgets::Label
labelFont	BWidgets/Label.hpp	/^	BStyles::Font labelFont;$/;"	m	class:BWidgets::Label
labelText	BWidgets/Label.hpp	/^	std::string labelText;$/;"	m	class:BWidgets::Label
lastConfigure	BWidgets/pugl/types.h	/^  PuglEventConfigure lastConfigure;$/;"	m	struct:PuglViewImpl
leave	BWidgets/pugl/types.h	/^  PuglStatus (*leave)(PuglView*, const PuglEventExpose*);$/;"	m	struct:PuglBackendImpl
len	BWidgets/pugl/types.h	/^  size_t len;  \/\/\/< Length of data in bytes$/;"	m	struct:__anon10
libvulkan	BWidgets/pugl/win_vulkan.c	/^  HMODULE                   libvulkan;$/;"	m	struct:PuglVulkanLoaderImpl	file:
libvulkan	BWidgets/pugl/x11_vulkan.c	/^  void*                     libvulkan;$/;"	m	struct:PuglVulkanLoaderImpl	file:
lightblue	BWidgets/BColors.hpp	/^const Color lightblue = Color (0.5, 0.5, 1.0, 1.0);$/;"	m	namespace:BColors
lightgreen	BWidgets/BColors.hpp	/^const Color lightgreen = Color (0.5, 1.0, 0.5, 1.0);$/;"	m	namespace:BColors
lightgrey	BWidgets/BColors.hpp	/^const Color lightgrey = Color (0.75, 0.75, 0.75, 1.0);$/;"	m	namespace:BColors
lightgreyBorder1pt	BWidgets/BStyles.hpp	/^const Border lightgreyBorder1pt = Border (lightgreyLine1pt);$/;"	m	namespace:BStyles
lightgreyLine1pt	BWidgets/BStyles.hpp	/^const Line lightgreyLine1pt = Line (BColors::lightgrey, 1.0);$/;"	m	namespace:BStyles
lightred	BWidgets/BColors.hpp	/^const Color lightred = Color (1.0, 0.5, 0.5, 1.0);$/;"	m	namespace:BColors
lights	BWidgets/BColors.hpp	/^const ColorSet lights = ColorSet ({lightgrey, white, grey, darkgrey});$/;"	m	namespace:BColors
lineColor	BWidgets/BStyles.hpp	/^	BColors::Color lineColor;$/;"	m	class:BStyles::Line
lineWidth	BWidgets/BStyles.hpp	/^	int lineWidth;$/;"	m	class:BStyles::Line
listBox	BWidgets/PopupListBox.hpp	/^	ListBox listBox;$/;"	m	class:BWidgets::PopupListBox
listTop	BWidgets/ListBox.hpp	/^	int listTop;$/;"	m	class:BWidgets::ListBox
loadFillFromCairoSurface	BWidgets/BStyles.cpp	/^void Fill::loadFillFromCairoSurface (cairo_surface_t* surface)$/;"	f	class:BStyles::Fill
loadFillFromFile	BWidgets/BStyles.cpp	/^void Fill::loadFillFromFile (const std::string& filename)$/;"	f	class:BStyles::Fill
loadImage	BWidgets/ImageIcon.cpp	/^void ImageIcon::loadImage (BColors::State state, cairo_surface_t* surface)$/;"	f	class:BWidgets::ImageIcon
loadImage	BWidgets/ImageIcon.cpp	/^void ImageIcon::loadImage (BColors::State state, const std::string& filename)$/;"	f	class:BWidgets::ImageIcon
lookupString	BWidgets/pugl/x11.c	/^lookupString(XIC xic, XEvent* xevent, char* str, KeySym* sym)$/;"	f	file:
lv2_descriptor	BAmp.cpp	/^lv2_descriptor(uint32_t index)$/;"	f
lv2ui_descriptor	BAmp_GUI.cpp	/^LV2_SYMBOL_EXPORT const LV2UI_Descriptor *lv2ui_descriptor(uint32_t index)$/;"	f
main	BWidgets/pugl_cairo_test.c	/^main(int argc, char** argv)$/;"	f
main_	BWidgets/Widget.hpp	/^	Window* main_;$/;"	m	class:BWidgets::Widget
makeAny	BUtilities/Any.hpp	/^template <class T> Any makeAny (const T& t)$/;"	f	namespace:BUtilities
maxAspectX	BWidgets/pugl/types.h	/^  int                maxAspectX;$/;"	m	struct:PuglViewImpl
maxAspectY	BWidgets/pugl/types.h	/^  int                maxAspectY;$/;"	m	struct:PuglViewImpl
maxHeight	BWidgets/pugl/types.h	/^  int                maxHeight;$/;"	m	struct:PuglViewImpl
maxWidth	BWidgets/pugl/types.h	/^  int                maxWidth;$/;"	m	struct:PuglViewImpl
mergeExposeEvents	BWidgets/pugl/x11.c	/^mergeExposeEvents(PuglEventExpose* dst, const PuglEventExpose* src)$/;"	f	file:
mergeable_	BWidgets/Widget.hpp	/^	std::array<bool, BEvents::EventType::NO_EVENT> mergeable_;$/;"	m	class:BWidgets::Widget
messageContent	BWidgets/BEvents.hpp	/^	BUtilities::Any messageContent;$/;"	m	class:BEvents::MessageEvent
messageName	BWidgets/BEvents.hpp	/^	std::string messageName;$/;"	m	class:BEvents::MessageEvent
minAspectX	BWidgets/pugl/types.h	/^  int                minAspectX;$/;"	m	struct:PuglViewImpl
minAspectY	BWidgets/pugl/types.h	/^  int                minAspectY;$/;"	m	struct:PuglViewImpl
minHeight	BWidgets/pugl/types.h	/^  int                minHeight;$/;"	m	struct:PuglViewImpl
minWidth	BWidgets/pugl/types.h	/^  int                minWidth;$/;"	m	struct:PuglViewImpl
mix	BUtilities/mix.hpp	/^template <class T> inline T mix (const T& t0, const T& t1, const double ratio)$/;"	f	namespace:BUtilities
mode	BWidgets/pugl/pugl/pugl.h	/^  PuglCrossingMode mode;  \/\/\/< Reason for crossing$/;"	m	struct:__anon28
mode	BWidgets/pugl/pugl/pugl.h	/^  PuglCrossingMode mode;  \/\/\/< Reason for focus change$/;"	m	struct:__anon25
mods	BWidgets/pugl/mac.h	/^  uint32_t         mods;$/;"	m	struct:PuglInternalsImpl
motion	BWidgets/pugl/pugl/pugl.h	/^  PuglEventMotion    motion;    \/\/\/< #PUGL_MOTION$/;"	m	union:__anon34
mouseTracked	BWidgets/pugl/mac.h	/^  bool             mouseTracked;$/;"	m	struct:PuglInternalsImpl
mouseTracked	BWidgets/pugl/win.h	/^  bool         mouseTracked;$/;"	m	struct:PuglInternalsImpl
moveListBox	BWidgets/PopupListBox.cpp	/^void PopupListBox::moveListBox (const BUtilities::Point& offset)$/;"	f	class:BWidgets::PopupListBox
moveTo	BUtilities/RectArea.hpp	/^	void moveTo (const Point& position)$/;"	f	class:BUtilities::RectArea
moveTo	BUtilities/RectArea.hpp	/^	void moveTo (const double x, const double y) {moveTo (Point (x, y));}$/;"	f	class:BUtilities::RectArea
moveTo	BWidgets/Widget.cpp	/^void Widget::moveTo (const BUtilities::Point& position)$/;"	f	class:BWidgets::Widget
moveTo	BWidgets/Widget.cpp	/^void Widget::moveTo (const double x, const double y) {moveTo (BUtilities::Point (x, y));}$/;"	f	class:BWidgets::Widget
name	BWidgets/BStyles.hpp	/^	std::string name;$/;"	m	struct:BStyles::__anon4
name	BWidgets/FileChooser.hpp	/^	std::string name;$/;"	m	struct:BWidgets::FileFilter
name_	BWidgets/Widget.hpp	/^	std::string name_;$/;"	m	class:BWidgets::Widget
nativeWindow_	BWidgets/Window.hpp	/^	PuglNativeView nativeWindow_;$/;"	m	class:BWidgets::Window
noBorder	BWidgets/BStyles.hpp	/^const Border noBorder = Border (noLine);$/;"	m	namespace:BStyles
noColor	BWidgets/BColors.hpp	/^	Color noColor = invisible;$/;"	m	class:BColors::ColorSet
noFill	BWidgets/BStyles.hpp	/^const Fill noFill = Fill (BColors::invisible);$/;"	m	namespace:BStyles
noLine	BWidgets/BStyles.hpp	/^const Line noLine = Line (BColors::invisible, 0.0);$/;"	m	namespace:BStyles
numTimers	BWidgets/pugl/x11.h	/^  size_t       numTimers;$/;"	m	struct:PuglWorldInternalsImpl
numViews	BWidgets/pugl/types.h	/^  size_t              numViews;$/;"	m	struct:PuglWorldImpl
okButton	BWidgets/FileChooser.hpp	/^	TextButton okButton;$/;"	m	class:BWidgets::FileChooser
okButton	BWidgets/MessageBox.hpp	/^	TextButton okButton;$/;"	m	class:BWidgets::MessageBox
okButtonClickedCallback	BWidgets/FileChooser.cpp	/^void FileChooser::okButtonClickedCallback (BEvents::Event* event)$/;"	f	class:BWidgets::FileChooser
okButtonText	BWidgets/FileChooser.hpp	/^	std::string okButtonText;$/;"	m	class:BWidgets::FileChooser
oldText	BWidgets/Label.hpp	/^	std::string oldText;$/;"	m	class:BWidgets::Label
onButtonClicked	BWidgets/Label.cpp	/^void Label::onButtonClicked (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::Label
onButtonClicked	BWidgets/Widget.cpp	/^void Widget::onButtonClicked (BEvents::PointerEvent* event) {cbfunction_[BEvents::EventType::BUTTON_CLICK_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onButtonPressed	BWidgets/Button.cpp	/^void Button::onButtonPressed (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::Button
onButtonPressed	BWidgets/Dial.cpp	/^void Dial::onButtonPressed (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::Dial
onButtonPressed	BWidgets/HPianoRoll.cpp	/^void HPianoRoll::onButtonPressed (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::HPianoRoll
onButtonPressed	BWidgets/HScale.cpp	/^void HScale::onButtonPressed (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::HScale
onButtonPressed	BWidgets/HSwitch.cpp	/^void HSwitch::onButtonPressed (BEvents::PointerEvent* event) {dragged = false;}$/;"	f	class:BWidgets::HSwitch
onButtonPressed	BWidgets/PopupListBox.cpp	/^void PopupListBox::onButtonPressed (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::PopupListBox
onButtonPressed	BWidgets/ToggleButton.cpp	/^void ToggleButton::onButtonPressed (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::ToggleButton
onButtonPressed	BWidgets/VScale.cpp	/^void VScale::onButtonPressed (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::VScale
onButtonPressed	BWidgets/VSwitch.cpp	/^void VSwitch::onButtonPressed (BEvents::PointerEvent* event) {dragged = false;}$/;"	f	class:BWidgets::VSwitch
onButtonPressed	BWidgets/Widget.cpp	/^void Widget::onButtonPressed (BEvents::PointerEvent* event) {cbfunction_[BEvents::EventType::BUTTON_PRESS_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onButtonReleased	BWidgets/Button.cpp	/^void Button::onButtonReleased (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::Button
onButtonReleased	BWidgets/Dial.cpp	/^void Dial::onButtonReleased (BEvents::PointerEvent* event) {softValue = 0.0;}$/;"	f	class:BWidgets::Dial
onButtonReleased	BWidgets/HPianoRoll.cpp	/^void HPianoRoll::onButtonReleased (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::HPianoRoll
onButtonReleased	BWidgets/HScale.cpp	/^void HScale::onButtonReleased (BEvents::PointerEvent* event) {softValue = 0.0;}$/;"	f	class:BWidgets::HScale
onButtonReleased	BWidgets/HSwitch.cpp	/^void HSwitch::onButtonReleased (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::HSwitch
onButtonReleased	BWidgets/ToggleButton.cpp	/^void ToggleButton::onButtonReleased (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::ToggleButton
onButtonReleased	BWidgets/VScale.cpp	/^void VScale::onButtonReleased (BEvents::PointerEvent* event) {softValue = 0.0;}$/;"	f	class:BWidgets::VScale
onButtonReleased	BWidgets/VSwitch.cpp	/^void VSwitch::onButtonReleased (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::VSwitch
onButtonReleased	BWidgets/Widget.cpp	/^void Widget::onButtonReleased (BEvents::PointerEvent* event) {cbfunction_[BEvents::EventType::BUTTON_RELEASE_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onClose	BWidgets/pugl_cairo_test.c	/^onClose(PuglView* view)$/;"	f	file:
onCloseRequest	BWidgets/Widget.cpp	/^void Widget::onCloseRequest (BEvents::WidgetEvent* event)$/;"	f	class:BWidgets::Widget
onCloseRequest	BWidgets/Window.cpp	/^void Window::onCloseRequest (BEvents::WidgetEvent* event)$/;"	f	class:BWidgets::Window
onConfigureRequest	BAmp_GUI.cpp	/^void BAmp_GUI::onConfigureRequest (BEvents::ExposeEvent* event)$/;"	f	class:BAmp_GUI
onConfigureRequest	BWidgets/Widget.cpp	/^void Widget::onConfigureRequest (BEvents::ExposeEvent* event) {cbfunction_[BEvents::EventType::CONFIGURE_REQUEST_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onConfigureRequest	BWidgets/Window.cpp	/^void Window::onConfigureRequest (BEvents::ExposeEvent* event)$/;"	f	class:BWidgets::Window
onDisplay	BWidgets/pugl_cairo_test.c	/^onDisplay(PuglView* view)$/;"	f	file:
onEvent	BWidgets/pugl_cairo_test.c	/^onEvent(PuglView* view, const PuglEvent* event)$/;"	f	file:
onExposeRequest	BWidgets/Widget.cpp	/^void Widget::onExposeRequest (BEvents::ExposeEvent* event) {cbfunction_[BEvents::EventType::EXPOSE_REQUEST_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onExposeRequest	BWidgets/Window.cpp	/^void Window::onExposeRequest (BEvents::ExposeEvent* event)$/;"	f	class:BWidgets::Window
onFocusIn	BWidgets/Dial.cpp	/^void Dial::onFocusIn (BEvents::FocusEvent* event)$/;"	f	class:BWidgets::Dial
onFocusIn	BWidgets/HSlider.cpp	/^void HSlider::onFocusIn (BEvents::FocusEvent* event)$/;"	f	class:BWidgets::HSlider
onFocusIn	BWidgets/VSlider.cpp	/^void VSlider::onFocusIn (BEvents::FocusEvent* event)$/;"	f	class:BWidgets::VSlider
onFocusIn	BWidgets/Widget.cpp	/^void Widget::onFocusIn (BEvents::FocusEvent* event) {cbfunction_[BEvents::EventType::FOCUS_IN_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onFocusOut	BWidgets/Dial.cpp	/^void Dial::onFocusOut (BEvents::FocusEvent* event)$/;"	f	class:BWidgets::Dial
onFocusOut	BWidgets/HSlider.cpp	/^void HSlider::onFocusOut (BEvents::FocusEvent* event)$/;"	f	class:BWidgets::HSlider
onFocusOut	BWidgets/VSlider.cpp	/^void VSlider::onFocusOut (BEvents::FocusEvent* event)$/;"	f	class:BWidgets::VSlider
onFocusOut	BWidgets/Widget.cpp	/^void Widget::onFocusOut (BEvents::FocusEvent* event) {cbfunction_[BEvents::EventType::FOCUS_OUT_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onKeyPressed	BWidgets/Label.cpp	/^void Label::onKeyPressed (BEvents::KeyEvent* event)$/;"	f	class:BWidgets::Label
onKeyPressed	BWidgets/Widget.cpp	/^void Widget::onKeyPressed (BEvents::KeyEvent* event) {cbfunction_[BEvents::EventType::KEY_PRESS_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onKeyReleased	BWidgets/Label.cpp	/^void Label::onKeyReleased (BEvents::KeyEvent* event) {cbfunction_[BEvents::EventType::KEY_RELEASE_EVENT] (event);}$/;"	f	class:BWidgets::Label
onKeyReleased	BWidgets/Widget.cpp	/^void Widget::onKeyReleased (BEvents::KeyEvent* event) {cbfunction_[BEvents::EventType::KEY_RELEASE_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onMessage	BWidgets/Widget.cpp	/^void Widget::onMessage (BEvents::MessageEvent* event) {cbfunction_[BEvents::EventType::MESSAGE_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onPointerDragged	BWidgets/Dial.cpp	/^void Dial::onPointerDragged (BEvents::PointerEvent* event) {onButtonPressed (event);}$/;"	f	class:BWidgets::Dial
onPointerDragged	BWidgets/HPianoRoll.cpp	/^void HPianoRoll::onPointerDragged (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::HPianoRoll
onPointerDragged	BWidgets/HScale.cpp	/^void HScale::onPointerDragged (BEvents::PointerEvent* event) {onButtonPressed (event);}$/;"	f	class:BWidgets::HScale
onPointerDragged	BWidgets/HSwitch.cpp	/^void HSwitch::onPointerDragged (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::HSwitch
onPointerDragged	BWidgets/Label.cpp	/^void Label::onPointerDragged (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::Label
onPointerDragged	BWidgets/VScale.cpp	/^void VScale::onPointerDragged (BEvents::PointerEvent* event) {onButtonPressed (event);}$/;"	f	class:BWidgets::VScale
onPointerDragged	BWidgets/VSwitch.cpp	/^void VSwitch::onPointerDragged (BEvents::PointerEvent* event)$/;"	f	class:BWidgets::VSwitch
onPointerDragged	BWidgets/Widget.cpp	/^void Widget::onPointerDragged (BEvents::PointerEvent* event) {cbfunction_[BEvents::EventType::POINTER_DRAG_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onPointerMotion	BWidgets/Widget.cpp	/^void Widget::onPointerMotion (BEvents::PointerEvent* event) {cbfunction_[BEvents::EventType::POINTER_MOTION_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onValueChanged	BWidgets/Widget.cpp	/^void Widget::onValueChanged (BEvents::ValueChangedEvent* event) {cbfunction_[BEvents::EventType::VALUE_CHANGED_EVENT] (event);}$/;"	f	class:BWidgets::Widget
onWheelScrolled	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::onWheelScrolled (BEvents::WheelEvent* event)$/;"	f	class:BWidgets::ChoiceBox
onWheelScrolled	BWidgets/Dial.cpp	/^void Dial::onWheelScrolled (BEvents::WheelEvent* event)$/;"	f	class:BWidgets::Dial
onWheelScrolled	BWidgets/HScale.cpp	/^void HScale::onWheelScrolled (BEvents::WheelEvent* event)$/;"	f	class:BWidgets::HScale
onWheelScrolled	BWidgets/ListBox.cpp	/^void ListBox::onWheelScrolled (BEvents::WheelEvent* event)$/;"	f	class:BWidgets::ListBox
onWheelScrolled	BWidgets/PopupListBox.cpp	/^void PopupListBox::onWheelScrolled (BEvents::WheelEvent* event)$/;"	f	class:BWidgets::PopupListBox
onWheelScrolled	BWidgets/VScale.cpp	/^void VScale::onWheelScrolled (BEvents::WheelEvent* event)$/;"	f	class:BWidgets::VScale
onWheelScrolled	BWidgets/Widget.cpp	/^void Widget::onWheelScrolled (BEvents::WheelEvent* event){cbfunction_[BEvents::EventType::WHEEL_SCROLL_EVENT] (event);}$/;"	f	class:BWidgets::Widget
operator !=	BUtilities/Point.hpp	/^	friend bool operator!= (const Point& lhs, const Point& rhs) {return !(lhs == rhs);}$/;"	f	struct:BUtilities::Point
operator !=	BUtilities/RectArea.hpp	/^	friend bool operator!= (const RectArea& lhs, const RectArea& rhs) {return !(lhs == rhs);}$/;"	f	class:BUtilities::RectArea
operator !=	BWidgets/BColors.cpp	/^bool Color::operator!= (const Color& that) const {return !(0 == compare (that));}$/;"	f	class:BColors::Color
operator !=	BWidgets/BColors.cpp	/^bool ColorSet::operator!= (const ColorSet& that) const {return (colors != that.colors);}$/;"	f	class:BColors::ColorSet
operator !=	BWidgets/BDevices.hpp	/^	friend inline bool operator!=(const MouseDevice& lhs, const MouseDevice& rhs) {return !(lhs==rhs);}$/;"	f	class:BDevices::MouseDevice
operator *	BUtilities/RectArea.hpp	/^	friend RectArea operator* (RectArea lhs, const RectArea& rhs) {return (lhs *= rhs);}$/;"	f	class:BUtilities::RectArea
operator *=	BUtilities/RectArea.hpp	/^	RectArea& operator*= (const RectArea& rhs)$/;"	f	class:BUtilities::RectArea
operator +	BUtilities/Point.hpp	/^	friend Point operator+ (Point lhs, const Point& rhs) {return (lhs += rhs);}$/;"	f	struct:BUtilities::Point
operator +	BUtilities/RectArea.hpp	/^	friend RectArea operator+ (RectArea lhs, const RectArea& rhs) {return (lhs += rhs);}$/;"	f	class:BUtilities::RectArea
operator +=	BUtilities/Point.hpp	/^	Point& operator+= (const Point& rhs)$/;"	f	struct:BUtilities::Point
operator +=	BUtilities/RectArea.hpp	/^	RectArea& operator+= (const RectArea& rhs)$/;"	f	class:BUtilities::RectArea
operator -	BUtilities/Point.hpp	/^	friend Point operator- (Point lhs, const Point& rhs) {return (lhs -= rhs);}$/;"	f	struct:BUtilities::Point
operator -=	BUtilities/Point.hpp	/^	Point& operator-= (const Point& rhs)$/;"	f	struct:BUtilities::Point
operator <	BWidgets/BDevices.hpp	/^	friend inline bool operator< (const MouseDevice& lhs, const MouseDevice& rhs)$/;"	f	class:BDevices::MouseDevice
operator <=	BWidgets/BDevices.hpp	/^	friend inline bool operator<=(const MouseDevice& lhs, const MouseDevice& rhs) {return !(lhs > rhs);}$/;"	f	class:BDevices::MouseDevice
operator =	BUtilities/Any.hpp	/^        Any& operator= (const Any& that)$/;"	f	class:BUtilities::Any
operator =	BUtilities/Path.hpp	/^        Path& operator= (const std::string& path)$/;"	f	class:BUtilities::Path
operator =	BWidgets/BItems.cpp	/^Item& Item::operator= (const Item& that)$/;"	f	class:BItems::Item
operator =	BWidgets/BStyles.cpp	/^Fill& Fill::operator= (const Fill& that)$/;"	f	class:BStyles::Fill
operator =	BWidgets/Button.cpp	/^Button& Button::operator= (const Button& that)$/;"	f	class:BWidgets::Button
operator =	BWidgets/ChoiceBox.cpp	/^ChoiceBox& ChoiceBox::operator= (const ChoiceBox& that)$/;"	f	class:BWidgets::ChoiceBox
operator =	BWidgets/Dial.cpp	/^Dial& Dial::operator= (const Dial& that)$/;"	f	class:BWidgets::Dial
operator =	BWidgets/DialValue.cpp	/^DialValue& DialValue::operator= (const DialValue& that)$/;"	f	class:BWidgets::DialValue
operator =	BWidgets/DrawingSurface.cpp	/^DrawingSurface& DrawingSurface::operator= (const DrawingSurface& that)$/;"	f	class:BWidgets::DrawingSurface
operator =	BWidgets/FileChooser.cpp	/^FileChooser& FileChooser::operator= (const FileChooser& that)$/;"	f	class:BWidgets::FileChooser
operator =	BWidgets/HScale.cpp	/^HScale& HScale::operator= (const HScale& that)$/;"	f	class:BWidgets::HScale
operator =	BWidgets/HSlider.cpp	/^HSlider& HSlider::operator= (const HSlider& that)$/;"	f	class:BWidgets::HSlider
operator =	BWidgets/HSliderValue.cpp	/^HSliderValue& HSliderValue::operator= (const HSliderValue& that)$/;"	f	class:BWidgets::HSliderValue
operator =	BWidgets/Icon.cpp	/^Icon& Icon::operator= (const Icon& that)$/;"	f	class:BWidgets::Icon
operator =	BWidgets/ItemBox.cpp	/^ItemBox& ItemBox::operator= (const ItemBox& that)$/;"	f	class:BWidgets::ItemBox
operator =	BWidgets/Knob.cpp	/^Knob& Knob::operator= (const Knob& that)$/;"	f	class:BWidgets::Knob
operator =	BWidgets/Label.cpp	/^Label& Label::operator= (const Label& that)$/;"	f	class:BWidgets::Label
operator =	BWidgets/ListBox.cpp	/^ListBox& ListBox::operator= (const ListBox& that)$/;"	f	class:BWidgets::ListBox
operator =	BWidgets/MessageBox.cpp	/^MessageBox& MessageBox::operator= (const MessageBox& that)$/;"	f	class:BWidgets::MessageBox
operator =	BWidgets/PopupListBox.cpp	/^PopupListBox& PopupListBox::operator= (const PopupListBox& that)$/;"	f	class:BWidgets::PopupListBox
operator =	BWidgets/RangeWidget.cpp	/^RangeWidget& RangeWidget::operator= (const RangeWidget& that)$/;"	f	class:BWidgets::RangeWidget
operator =	BWidgets/Text.cpp	/^Text& Text::operator= (const Text& that)$/;"	f	class:BWidgets::Text
operator =	BWidgets/TextButton.cpp	/^TextButton& TextButton::operator= (const TextButton& that)$/;"	f	class:BWidgets::TextButton
operator =	BWidgets/TextToggleButton.cpp	/^TextToggleButton& TextToggleButton::operator= (const TextToggleButton& that)$/;"	f	class:BWidgets::TextToggleButton
operator =	BWidgets/VScale.cpp	/^VScale& VScale::operator= (const VScale& that)$/;"	f	class:BWidgets::VScale
operator =	BWidgets/VSlider.cpp	/^VSlider& VSlider::operator= (const VSlider& that)$/;"	f	class:BWidgets::VSlider
operator =	BWidgets/VSliderValue.cpp	/^VSliderValue& VSliderValue::operator= (const VSliderValue& that)$/;"	f	class:BWidgets::VSliderValue
operator =	BWidgets/ValueWidget.cpp	/^ValueWidget& ValueWidget::operator= (const ValueWidget& that)$/;"	f	class:BWidgets::ValueWidget
operator =	BWidgets/Widget.cpp	/^Widget& Widget::operator= (const Widget& that)$/;"	f	class:BWidgets::Widget
operator ==	BUtilities/Point.hpp	/^	friend bool operator== (const Point& lhs, const Point& rhs) {return ((lhs.x == rhs.x) && (lhs.y == rhs.y));}$/;"	f	struct:BUtilities::Point
operator ==	BUtilities/RectArea.hpp	/^	friend bool operator== (const RectArea& lhs, const RectArea& rhs)$/;"	f	class:BUtilities::RectArea
operator ==	BWidgets/BColors.cpp	/^bool Color::operator== (const Color& that) const {return (0 == compare (that));}$/;"	f	class:BColors::Color
operator ==	BWidgets/BColors.cpp	/^bool ColorSet::operator== (const ColorSet& that) const {return (colors == that.colors);}$/;"	f	class:BColors::ColorSet
operator ==	BWidgets/BDevices.hpp	/^	friend inline bool operator== (const MouseDevice& lhs, const MouseDevice& rhs)$/;"	f	class:BDevices::MouseDevice
operator >	BWidgets/BDevices.hpp	/^	friend inline bool operator> (const MouseDevice& lhs, const MouseDevice& rhs) {return rhs < lhs;}$/;"	f	class:BDevices::MouseDevice
operator >=	BWidgets/BDevices.hpp	/^	friend inline bool operator>=(const MouseDevice& lhs, const MouseDevice& rhs) {return !(lhs < rhs);}$/;"	f	class:BDevices::MouseDevice
operator std::string	BUtilities/Path.hpp	/^        operator std::string() const {return (dir().empty() || (dir() == BUTILITIES_PATH_SLASH) ? dir() : dir() + BUTILITIES_PATH_SLASH) + filename();}$/;"	f	class:BUtilities::Path
origin	BWidgets/BEvents.hpp	/^	BUtilities::Point point, origin, delta;$/;"	m	class:BEvents::PointerEvent
overlaps	BUtilities/RectArea.hpp	/^	bool overlaps (const RectArea& ra) const$/;"	f	class:BUtilities::RectArea
override	BAmp_GUI.cpp	/^	virtual void onConfigureRequest (BEvents::ExposeEvent* event) override;$/;"	m	class:BAmp_GUI	file:
override	BWidgets/Button.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::Button
override	BWidgets/Button.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::Button
override	BWidgets/Button.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::Button
override	BWidgets/Button.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::Button
override	BWidgets/Button.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::Button
override	BWidgets/Button.hpp	/^	virtual void onButtonReleased (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::Button
override	BWidgets/ChoiceBox.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::ChoiceBox
override	BWidgets/ChoiceBox.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::ChoiceBox
override	BWidgets/ChoiceBox.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::ChoiceBox
override	BWidgets/ChoiceBox.hpp	/^	virtual void onWheelScrolled (BEvents::WheelEvent* event) override;$/;"	m	class:BWidgets::ChoiceBox
override	BWidgets/ChoiceBox.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::ChoiceBox
override	BWidgets/ChoiceBox.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::ChoiceBox
override	BWidgets/Dial.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void onButtonReleased (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void onFocusIn (BEvents::FocusEvent* event) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void onFocusOut (BEvents::FocusEvent* event) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void onPointerDragged (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void onWheelScrolled (BEvents::WheelEvent* event) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::Dial
override	BWidgets/Dial.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::Dial
override	BWidgets/DialValue.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::DialValue
override	BWidgets/DialValue.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::DialValue
override	BWidgets/DialValue.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::DialValue
override	BWidgets/DialValue.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::DialValue
override	BWidgets/DialValue.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::DialValue
override	BWidgets/DialValue.hpp	/^	virtual void updateCoords () override;$/;"	m	class:BWidgets::DialValue
override	BWidgets/Display.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::Display
override	BWidgets/Display.hpp	/^	virtual bool filter (Widget* widget) override;$/;"	m	class:BWidgets::Display
override	BWidgets/DownButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::DownButton
override	BWidgets/DownButton.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::DownButton
override	BWidgets/DrawingSurface.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::DrawingSurface
override	BWidgets/DrawingSurface.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::DrawingSurface
override	BWidgets/DrawingSurface.hpp	/^	virtual void resize () override;$/;"	m	class:BWidgets::DrawingSurface
override	BWidgets/DrawingSurface.hpp	/^	virtual void resize (const BUtilities::Point extends) override;$/;"	m	class:BWidgets::DrawingSurface
override	BWidgets/DrawingSurface.hpp	/^	virtual void resize (const double width, const double height) override;$/;"	m	class:BWidgets::DrawingSurface
override	BWidgets/DrawingSurface.hpp	/^	virtual void setBorder (const BStyles::Border& border) override;$/;"	m	class:BWidgets::DrawingSurface
override	BWidgets/DrawingSurface.hpp	/^	virtual void setHeight (const double height) override;$/;"	m	class:BWidgets::DrawingSurface
override	BWidgets/DrawingSurface.hpp	/^	virtual void setWidth (const double width) override;$/;"	m	class:BWidgets::DrawingSurface
override	BWidgets/FileChooser.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::FileChooser
override	BWidgets/FileChooser.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::FileChooser
override	BWidgets/FileChooser.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::FileChooser
override	BWidgets/FileChooser.hpp	/^	virtual void resize () override;$/;"	m	class:BWidgets::FileChooser
override	BWidgets/FileChooser.hpp	/^	virtual void resize (const BUtilities::Point extends) override;$/;"	m	class:BWidgets::FileChooser
override	BWidgets/FileChooser.hpp	/^	virtual void resize (const double width, const double height) override;$/;"	m	class:BWidgets::FileChooser
override	BWidgets/FileChooser.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::FileChooser
override	BWidgets/HPianoRoll.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::HPianoRoll
override	BWidgets/HPianoRoll.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::HPianoRoll
override	BWidgets/HPianoRoll.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HPianoRoll
override	BWidgets/HPianoRoll.hpp	/^	virtual void onButtonReleased (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HPianoRoll
override	BWidgets/HPianoRoll.hpp	/^	virtual void onPointerDragged (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HPianoRoll
override	BWidgets/HScale.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HScale.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HScale.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HScale.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HScale.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HScale.hpp	/^	virtual void onButtonReleased (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HScale.hpp	/^	virtual void onPointerDragged (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HScale.hpp	/^	virtual void onWheelScrolled (BEvents::WheelEvent* event) override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HScale.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::HScale
override	BWidgets/HSlider.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::HSlider
override	BWidgets/HSlider.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::HSlider
override	BWidgets/HSlider.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::HSlider
override	BWidgets/HSlider.hpp	/^	virtual void onFocusIn (BEvents::FocusEvent* event) override;$/;"	m	class:BWidgets::HSlider
override	BWidgets/HSlider.hpp	/^	virtual void onFocusOut (BEvents::FocusEvent* event) override;$/;"	m	class:BWidgets::HSlider
override	BWidgets/HSlider.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::HSlider
override	BWidgets/HSlider.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::HSlider
override	BWidgets/HSlider.hpp	/^	virtual void updateCoords () override;$/;"	m	class:BWidgets::HSlider
override	BWidgets/HSliderValue.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::HSliderValue
override	BWidgets/HSliderValue.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::HSliderValue
override	BWidgets/HSliderValue.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::HSliderValue
override	BWidgets/HSliderValue.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::HSliderValue
override	BWidgets/HSliderValue.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::HSliderValue
override	BWidgets/HSliderValue.hpp	/^	virtual void updateCoords () override;$/;"	m	class:BWidgets::HSliderValue
override	BWidgets/HSwitch.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::HSwitch
override	BWidgets/HSwitch.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HSwitch
override	BWidgets/HSwitch.hpp	/^	virtual void onButtonReleased (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HSwitch
override	BWidgets/HSwitch.hpp	/^	virtual void onPointerDragged (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::HSwitch
override	BWidgets/HSwitch.hpp	/^	virtual void updateCoords () override;$/;"	m	class:BWidgets::HSwitch
override	BWidgets/Icon.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::Icon
override	BWidgets/Icon.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::Icon
override	BWidgets/ImageIcon.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::ImageIcon
override	BWidgets/ItemBox.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::ItemBox
override	BWidgets/ItemBox.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::ItemBox
override	BWidgets/ItemBox.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::ItemBox
override	BWidgets/ItemBox.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::ItemBox
override	BWidgets/Knob.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::Knob
override	BWidgets/Knob.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::Knob
override	BWidgets/Knob.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::Knob
override	BWidgets/Knob.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::Knob
override	BWidgets/Label.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void onButtonClicked (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void onKeyPressed (BEvents::KeyEvent* event) override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void onKeyReleased (BEvents::KeyEvent* event) override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void onPointerDragged (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void resize () override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void resize (const BUtilities::Point extends) override;$/;"	m	class:BWidgets::Label
override	BWidgets/Label.hpp	/^	virtual void resize (const double width, const double height) override;$/;"	m	class:BWidgets::Label
override	BWidgets/LeftButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::LeftButton
override	BWidgets/LeftButton.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::LeftButton
override	BWidgets/ListBox.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::ListBox
override	BWidgets/ListBox.hpp	/^	virtual int getLines () override;$/;"	m	class:BWidgets::ListBox
override	BWidgets/ListBox.hpp	/^	virtual int getTop () const override;$/;"	m	class:BWidgets::ListBox
override	BWidgets/ListBox.hpp	/^	virtual void onWheelScrolled (BEvents::WheelEvent* event) override;$/;"	m	class:BWidgets::ListBox
override	BWidgets/ListBox.hpp	/^	virtual void updateItems () override;$/;"	m	class:BWidgets::ListBox
override	BWidgets/MessageBox.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::MessageBox
override	BWidgets/MessageBox.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::MessageBox
override	BWidgets/MessageBox.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::MessageBox
override	BWidgets/MessageBox.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::MessageBox
override	BWidgets/MinusButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::MinusButton
override	BWidgets/MinusButton.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::MinusButton
override	BWidgets/PianoWidget.hpp	/^ 	virtual Widget* clone () const override;$/;"	m	class:BWidgets::PianoWidget
override	BWidgets/PlusButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::PlusButton
override	BWidgets/PlusButton.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::PlusButton
override	BWidgets/PopupListBox.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::PopupListBox
override	BWidgets/PopupListBox.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::PopupListBox
override	BWidgets/PopupListBox.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::PopupListBox
override	BWidgets/PopupListBox.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::PopupListBox
override	BWidgets/PopupListBox.hpp	/^	virtual void onWheelScrolled (BEvents::WheelEvent* event) override;$/;"	m	class:BWidgets::PopupListBox
override	BWidgets/PopupListBox.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::PopupListBox
override	BWidgets/PopupListBox.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::PopupListBox
override	BWidgets/RangeWidget.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::RangeWidget
override	BWidgets/RangeWidget.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::RangeWidget
override	BWidgets/RightButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::RightButton
override	BWidgets/RightButton.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::RightButton
override	BWidgets/StateDisplay.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::StateDisplay
override	BWidgets/StateDisplay.hpp	/^	virtual bool filter (Widget* widget) override;$/;"	m	class:BWidgets::StateDisplay
override	BWidgets/Text.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::Text
override	BWidgets/Text.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::Text
override	BWidgets/Text.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::Text
override	BWidgets/Text.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::Text
override	BWidgets/Text.hpp	/^	virtual void resize () override;$/;"	m	class:BWidgets::Text
override	BWidgets/Text.hpp	/^	virtual void resize (const BUtilities::Point extends) override;$/;"	m	class:BWidgets::Text
override	BWidgets/Text.hpp	/^	virtual void resize (const double width, const double height) override;$/;"	m	class:BWidgets::Text
override	BWidgets/TextButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextButton.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextButton.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextButton.hpp	/^	virtual void resize () override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextButton.hpp	/^	virtual void resize (const BUtilities::Point extends) override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextButton.hpp	/^	virtual void resize (const double width, const double height) override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextButton.hpp	/^	virtual void setHeight (const double height) override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextButton.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextButton.hpp	/^	virtual void setWidth (const double width) override;$/;"	m	class:BWidgets::TextButton
override	BWidgets/TextToggleButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/TextToggleButton.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/TextToggleButton.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/TextToggleButton.hpp	/^	virtual void resize () override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/TextToggleButton.hpp	/^	virtual void resize (const BUtilities::Point extends) override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/TextToggleButton.hpp	/^	virtual void resize (const double width, const double height) override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/TextToggleButton.hpp	/^	virtual void setHeight (const double height) override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/TextToggleButton.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/TextToggleButton.hpp	/^	virtual void setWidth (const double width) override;$/;"	m	class:BWidgets::TextToggleButton
override	BWidgets/ToggleButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::ToggleButton
override	BWidgets/ToggleButton.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::ToggleButton
override	BWidgets/ToggleButton.hpp	/^	virtual void onButtonReleased (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::ToggleButton
override	BWidgets/UpButton.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::UpButton
override	BWidgets/UpButton.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::UpButton
override	BWidgets/VScale.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VScale.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VScale.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VScale.hpp	/^	virtual void draw (const BUtilities::RectArea& area) override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VScale.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VScale.hpp	/^	virtual void onButtonReleased (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VScale.hpp	/^	virtual void onPointerDragged (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VScale.hpp	/^	virtual void onWheelScrolled (BEvents::WheelEvent* event) override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VScale.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::VScale
override	BWidgets/VSlider.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::VSlider
override	BWidgets/VSlider.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::VSlider
override	BWidgets/VSlider.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::VSlider
override	BWidgets/VSlider.hpp	/^	virtual void onFocusIn (BEvents::FocusEvent* event) override;$/;"	m	class:BWidgets::VSlider
override	BWidgets/VSlider.hpp	/^	virtual void onFocusOut (BEvents::FocusEvent* event) override;$/;"	m	class:BWidgets::VSlider
override	BWidgets/VSlider.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::VSlider
override	BWidgets/VSlider.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::VSlider
override	BWidgets/VSlider.hpp	/^	virtual void updateCoords () override;$/;"	m	class:BWidgets::VSlider
override	BWidgets/VSliderValue.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::VSliderValue
override	BWidgets/VSliderValue.hpp	/^	virtual void applyTheme (BStyles::Theme& theme) override;$/;"	m	class:BWidgets::VSliderValue
override	BWidgets/VSliderValue.hpp	/^	virtual void applyTheme (BStyles::Theme& theme, const std::string& name) override;$/;"	m	class:BWidgets::VSliderValue
override	BWidgets/VSliderValue.hpp	/^	virtual void setValue (const double val) override;$/;"	m	class:BWidgets::VSliderValue
override	BWidgets/VSliderValue.hpp	/^	virtual void update () override;$/;"	m	class:BWidgets::VSliderValue
override	BWidgets/VSliderValue.hpp	/^	virtual void updateCoords () override;$/;"	m	class:BWidgets::VSliderValue
override	BWidgets/VSwitch.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::VSwitch
override	BWidgets/VSwitch.hpp	/^	virtual void onButtonPressed (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::VSwitch
override	BWidgets/VSwitch.hpp	/^	virtual void onButtonReleased (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::VSwitch
override	BWidgets/VSwitch.hpp	/^	virtual void onPointerDragged (BEvents::PointerEvent* event) override;$/;"	m	class:BWidgets::VSwitch
override	BWidgets/VSwitch.hpp	/^	virtual void updateCoords () override;$/;"	m	class:BWidgets::VSwitch
override	BWidgets/ValueWidget.hpp	/^	virtual Widget* clone () const override;$/;"	m	class:BWidgets::ValueWidget
override	BWidgets/Window.hpp	/^	virtual void onCloseRequest (BEvents::WidgetEvent* event) override;$/;"	m	class:BWidgets::Window
override	BWidgets/Window.hpp	/^	virtual void onConfigureRequest (BEvents::ExposeEvent* event) override;$/;"	m	class:BWidgets::Window
override	BWidgets/Window.hpp	/^	virtual void onExposeRequest (BEvents::ExposeEvent* event) override;$/;"	m	class:BWidgets::Window
p1	BUtilities/RectArea.hpp	/^	Point p1, p2;$/;"	m	class:BUtilities::RectArea
p2	BUtilities/RectArea.hpp	/^	Point p1, p2;$/;"	m	class:BUtilities::RectArea
parent	BWidgets/pugl/types.h	/^  PuglNativeView     parent;$/;"	m	struct:PuglViewImpl
parent_	BWidgets/Widget.hpp	/^	Widget* parent_;$/;"	m	class:BWidgets::Widget
pathNameBox	BWidgets/FileChooser.hpp	/^	Label pathNameBox;$/;"	m	class:BWidgets::FileChooser
pendingConfigure	BWidgets/pugl/x11.h	/^  PuglEvent    pendingConfigure;$/;"	m	struct:PuglInternalsImpl
pendingExpose	BWidgets/pugl/x11.h	/^  PuglEvent    pendingExpose;$/;"	m	struct:PuglInternalsImpl
pfId	BWidgets/pugl/win.h	/^  int          pfId;$/;"	m	struct:PuglInternalsImpl
pfd	BWidgets/pugl/win.h	/^  PuglWinPFD   pfd;$/;"	m	struct:PuglInternalsImpl
point	BWidgets/BEvents.hpp	/^	BUtilities::Point point, origin, delta;$/;"	m	class:BEvents::PointerEvent
point	BWidgets/BEvents.hpp	/^	BUtilities::Point point;$/;"	m	class:BEvents::FocusEvent
point	BWidgets/BEvents.hpp	/^	BUtilities::Point point;$/;"	m	class:BEvents::KeyEvent
point	BWidgets/BEvents.hpp	/^	BUtilities::Point point;$/;"	m	class:BEvents::WheelEvent
pointer_	BWidgets/Window.hpp	/^	BUtilities::Point pointer_;$/;"	m	class:BWidgets::Window
port	BAmp.cpp	/^	std::array<float*, AMP_N_PORTS> port;$/;"	m	class:Amp	file:
portEvent	BAmp_GUI.cpp	/^static void portEvent(LV2UI_Handle ui, uint32_t port_index, uint32_t buffer_size, uint32_t format, const void* buffer)$/;"	f	file:
portEvent	BAmp_GUI.cpp	/^void BAmp_GUI::portEvent (uint32_t port_index, uint32_t buffer_size, uint32_t format, const void* buffer)$/;"	f	class:BAmp_GUI
position	BWidgets/BDevices.hpp	/^	BUtilities::Point position;$/;"	m	class:BDevices::MouseDevice
postCloseRequest	BWidgets/Widget.cpp	/^void Widget::postCloseRequest () {postCloseRequest (main_);}$/;"	f	class:BWidgets::Widget
postCloseRequest	BWidgets/Widget.cpp	/^void Widget::postCloseRequest (Widget* handle)$/;"	f	class:BWidgets::Widget
postMessage	BWidgets/Widget.cpp	/^void Widget::postMessage (const std::string& name, const BUtilities::Any content)$/;"	f	class:BWidgets::Widget
postRedisplay	BWidgets/Widget.cpp	/^void Widget::postRedisplay ()$/;"	f	class:BWidgets::Widget
postRedisplay	BWidgets/Widget.cpp	/^void Widget::postRedisplay (const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Widget
postValueChanged	BWidgets/ValueWidget.cpp	/^void ValueWidget::postValueChanged ()$/;"	f	class:BWidgets::ValueWidget
pressKeys	BWidgets/PianoWidget.cpp	/^void PianoWidget::pressKeys (std::vector<bool>& keys)$/;"	f	class:BWidgets::PianoWidget
pressed	BWidgets/pugl_cairo_test.c	/^	bool        pressed;$/;"	m	struct:__anon1	file:
pressedKeys	BWidgets/PianoWidget.hpp	/^	std::vector<bool> pressedKeys;$/;"	m	class:BWidgets::PianoWidget
procs	BWidgets/pugl/win_gl.c	/^  PuglWinGlProcs procs;$/;"	m	struct:__anon13	file:
puglCairoBackend	BWidgets/pugl/win_cairo.c	/^puglCairoBackend()$/;"	f
puglCairoBackend	BWidgets/pugl/x11_cairo.c	/^puglCairoBackend(void)$/;"	f
puglCreateSurface	BWidgets/pugl/win_vulkan.c	/^puglCreateSurface(PFN_vkGetInstanceProcAddr          vkGetInstanceProcAddr,$/;"	f
puglCreateSurface	BWidgets/pugl/x11_vulkan.c	/^puglCreateSurface(PFN_vkGetInstanceProcAddr          vkGetInstanceProcAddr,$/;"	f
puglCreateWindow	BWidgets/pugl/pugl/pugl.h	/^puglCreateWindow(PuglView* view, const char* title)$/;"	f
puglDecodeUTF16	BWidgets/pugl/win.c	/^puglDecodeUTF16(const wchar_t* buf, const int len)$/;"	f	file:
puglDecodeUTF8	BWidgets/pugl/implementation.c	/^puglDecodeUTF8(const uint8_t* buf)$/;"	f
puglDefineCursorShape	BWidgets/pugl/x11.c	/^puglDefineCursorShape(PuglView* view, unsigned shape)$/;"	f	file:
puglDestroy	BWidgets/pugl/pugl/pugl.h	/^puglDestroy(PuglView* view)$/;"	f
puglDispatchEvent	BWidgets/pugl/implementation.c	/^puglDispatchEvent(PuglView* view, const PuglEvent* event)$/;"	f
puglDispatchEventInContext	BWidgets/pugl/implementation.c	/^puglDispatchEventInContext(PuglView* view, const PuglEvent* event)$/;"	f
puglDispatchEvents	BWidgets/pugl/implementation.c	/^puglDispatchEvents(PuglWorld* world)$/;"	f
puglDispatchSimpleEvent	BWidgets/pugl/implementation.c	/^puglDispatchSimpleEvent(PuglView* view, const PuglEventType type)$/;"	f
puglDispatchViewEvents	BWidgets/pugl/win.c	/^puglDispatchViewEvents(PuglView* view)$/;"	f	file:
puglDispatchWinEvents	BWidgets/pugl/win.c	/^puglDispatchWinEvents(PuglWorld* world)$/;"	f	file:
puglDispatchX11Events	BWidgets/pugl/x11.c	/^puglDispatchX11Events(PuglWorld* world)$/;"	f	file:
puglEnterContext	BWidgets/pugl/win_gl.c	/^puglEnterContext(PuglView* view)$/;"	f
puglEnterContext	BWidgets/pugl/x11_gl.c	/^puglEnterContext(PuglView* view)$/;"	f
puglEventToX	BWidgets/pugl/x11.c	/^puglEventToX(PuglView* view, const PuglEvent* event)$/;"	f	file:
puglFindView	BWidgets/pugl/x11.c	/^puglFindView(PuglWorld* world, const Window window)$/;"	f	file:
puglFreeView	BWidgets/pugl/implementation.c	/^puglFreeView(PuglView* view)$/;"	f
puglFreeViewInternals	BWidgets/pugl/win.c	/^puglFreeViewInternals(PuglView* view)$/;"	f
puglFreeViewInternals	BWidgets/pugl/x11.c	/^puglFreeViewInternals(PuglView* view)$/;"	f
puglFreeVulkanLoader	BWidgets/pugl/win_vulkan.c	/^puglFreeVulkanLoader(PuglVulkanLoader* loader)$/;"	f
puglFreeVulkanLoader	BWidgets/pugl/x11_vulkan.c	/^puglFreeVulkanLoader(PuglVulkanLoader* loader)$/;"	f
puglFreeWorld	BWidgets/pugl/implementation.c	/^puglFreeWorld(PuglWorld* const world)$/;"	f
puglFreeWorldInternals	BWidgets/pugl/win.c	/^puglFreeWorldInternals(PuglWorld* world)$/;"	f
puglFreeWorldInternals	BWidgets/pugl/x11.c	/^puglFreeWorldInternals(PuglWorld* world)$/;"	f
puglGetClipboard	BWidgets/pugl/win.c	/^puglGetClipboard(PuglView* const    view,$/;"	f
puglGetClipboard	BWidgets/pugl/x11.c	/^puglGetClipboard(PuglView* const    view,$/;"	f
puglGetContext	BWidgets/pugl/implementation.c	/^puglGetContext(PuglView* view)$/;"	f
puglGetDeviceProcAddrFunc	BWidgets/pugl/win_vulkan.c	/^puglGetDeviceProcAddrFunc(const PuglVulkanLoader* loader)$/;"	f
puglGetDeviceProcAddrFunc	BWidgets/pugl/x11_vulkan.c	/^puglGetDeviceProcAddrFunc(const PuglVulkanLoader* loader)$/;"	f
puglGetFrame	BWidgets/pugl/implementation.c	/^puglGetFrame(const PuglView* view)$/;"	f
puglGetHandle	BWidgets/pugl/implementation.c	/^puglGetHandle(PuglView* view)$/;"	f
puglGetInstanceExtensions	BWidgets/pugl/win_vulkan.c	/^puglGetInstanceExtensions(uint32_t* const count)$/;"	f
puglGetInstanceExtensions	BWidgets/pugl/x11_vulkan.c	/^puglGetInstanceExtensions(uint32_t* const count)$/;"	f
puglGetInstanceProcAddrFunc	BWidgets/pugl/win_vulkan.c	/^puglGetInstanceProcAddrFunc(const PuglVulkanLoader* loader)$/;"	f
puglGetInstanceProcAddrFunc	BWidgets/pugl/x11_vulkan.c	/^puglGetInstanceProcAddrFunc(const PuglVulkanLoader* loader)$/;"	f
puglGetInternalClipboard	BWidgets/pugl/implementation.c	/^puglGetInternalClipboard(const PuglView* const view,$/;"	f
puglGetNativeWindow	BWidgets/pugl/win.c	/^puglGetNativeWindow(PuglView* view)$/;"	f
puglGetNativeWindow	BWidgets/pugl/x11.c	/^puglGetNativeWindow(PuglView* view)$/;"	f
puglGetNativeWorld	BWidgets/pugl/x11.c	/^puglGetNativeWorld(PuglWorld* world)$/;"	f
puglGetProcAddress	BWidgets/pugl/win_gl.c	/^puglGetProcAddress(const char* name)$/;"	f
puglGetProcAddress	BWidgets/pugl/x11_gl.c	/^puglGetProcAddress(const char* name)$/;"	f
puglGetSize	BWidgets/pugl/pugl/pugl.h	/^puglGetSize(PuglView* view, int* width, int* height)$/;"	f
puglGetTime	BWidgets/pugl/win.c	/^puglGetTime(const PuglWorld* world)$/;"	f
puglGetTime	BWidgets/pugl/x11.c	/^puglGetTime(const PuglWorld* world)$/;"	f
puglGetViewHint	BWidgets/pugl/implementation.c	/^puglGetViewHint(const PuglView* view, PuglViewHint hint)$/;"	f
puglGetVisible	BWidgets/pugl/implementation.c	/^puglGetVisible(const PuglView* view)$/;"	f
puglGetWorld	BWidgets/pugl/implementation.c	/^puglGetWorld(PuglView* view)$/;"	f
puglGetWorldHandle	BWidgets/pugl/implementation.c	/^puglGetWorldHandle(PuglWorld* world)$/;"	f
puglGlBackend	BWidgets/pugl/win_gl.c	/^puglGlBackend(void)$/;"	f
puglGlBackend	BWidgets/pugl/x11_gl.c	/^puglGlBackend(void)$/;"	f
puglGrabFocus	BWidgets/pugl/win.c	/^puglGrabFocus(PuglView* view)$/;"	f
puglGrabFocus	BWidgets/pugl/x11.c	/^puglGrabFocus(PuglView* view)$/;"	f
puglHasFocus	BWidgets/pugl/win.c	/^puglHasFocus(const PuglView* view)$/;"	f
puglHasFocus	BWidgets/pugl/x11.c	/^puglHasFocus(const PuglView* view)$/;"	f
puglHide	BWidgets/pugl/win.c	/^puglHide(PuglView* view)$/;"	f
puglHide	BWidgets/pugl/x11.c	/^puglHide(PuglView* view)$/;"	f
puglHideWindow	BWidgets/pugl/implementation.c	/^puglHideWindow(PuglView* view)$/;"	f
puglIgnoreKeyRepeat	BWidgets/pugl/pugl/pugl.h	/^puglIgnoreKeyRepeat(PuglView* view, bool ignore)$/;"	f
puglInit	BWidgets/pugl/pugl/pugl.h	/^puglInit(const int* pargc, char** argv)$/;"	f
puglInitBackend	BWidgets/pugl/pugl/pugl.h	/^puglInitBackend(PuglView* view, const PuglBackend* backend)$/;"	f
puglInitResizable	BWidgets/pugl/pugl/pugl.h	/^puglInitResizable(PuglView* view, bool resizable)$/;"	f
puglInitTransientFor	BWidgets/pugl/pugl/pugl.h	/^puglInitTransientFor(PuglView* view, uintptr_t parent)$/;"	f
puglInitViewInternals	BWidgets/pugl/win.c	/^puglInitViewInternals(void)$/;"	f
puglInitViewInternals	BWidgets/pugl/x11.c	/^puglInitViewInternals(void)$/;"	f
puglInitWindowAspectRatio	BWidgets/pugl/pugl/pugl.h	/^puglInitWindowAspectRatio(PuglView* view,$/;"	f
puglInitWindowClass	BWidgets/pugl/pugl/pugl.h	/^puglInitWindowClass(PuglView* view, const char* name)$/;"	f
puglInitWindowHint	BWidgets/pugl/pugl/pugl.h	/^puglInitWindowHint(PuglView* view, PuglViewHint hint, int value)$/;"	f
puglInitWindowMinSize	BWidgets/pugl/pugl/pugl.h	/^puglInitWindowMinSize(PuglView* view, int width, int height)$/;"	f
puglInitWindowParent	BWidgets/pugl/pugl/pugl.h	/^puglInitWindowParent(PuglView* view, PuglNativeWindow parent)$/;"	f
puglInitWindowSize	BWidgets/pugl/pugl/pugl.h	/^puglInitWindowSize(PuglView* view, int width, int height)$/;"	f
puglInitWorldInternals	BWidgets/pugl/x11.c	/^puglInitWorldInternals(PuglWorldType type, PuglWorldFlags flags)$/;"	f
puglInitXSync	BWidgets/pugl/x11.c	/^puglInitXSync(PuglWorldInternals* impl)$/;"	f	file:
puglLeaveContext	BWidgets/pugl/win_gl.c	/^puglLeaveContext(PuglView* view)$/;"	f
puglLeaveContext	BWidgets/pugl/x11_gl.c	/^puglLeaveContext(PuglView* view)$/;"	f
puglMustConfigure	BWidgets/pugl/implementation.c	/^puglMustConfigure(PuglView* view, const PuglEventConfigure* configure)$/;"	f	file:
puglNewView	BWidgets/pugl/implementation.c	/^puglNewView(PuglWorld* const world)$/;"	f
puglNewWorld	BWidgets/pugl/implementation.c	/^puglNewWorld(PuglWorldType type, PuglWorldFlags flags)$/;"	f
puglPollEvents	BWidgets/pugl/implementation.c	/^puglPollEvents(PuglWorld* world, double timeout)$/;"	f
puglPollWinEvents	BWidgets/pugl/win.c	/^puglPollWinEvents(PuglWorld* world, const double timeout)$/;"	f	file:
puglPollX11Socket	BWidgets/pugl/x11.c	/^puglPollX11Socket(PuglWorld* world, const double timeout)$/;"	f	file:
puglPostRedisplay	BWidgets/pugl/win.c	/^puglPostRedisplay(PuglView* view)$/;"	f
puglPostRedisplay	BWidgets/pugl/x11.c	/^puglPostRedisplay(PuglView* view)$/;"	f
puglPostRedisplayRect	BWidgets/pugl/win.c	/^puglPostRedisplayRect(PuglView* view, const PuglRect rect)$/;"	f
puglPostRedisplayRect	BWidgets/pugl/x11.c	/^puglPostRedisplayRect(PuglView* view, PuglRect rect)$/;"	f
puglProcessEvents	BWidgets/pugl/win.c	/^puglProcessEvents(PuglView* view)$/;"	f
puglProcessEvents	BWidgets/pugl/x11.c	/^puglProcessEvents(PuglView* view)$/;"	f
puglRealize	BWidgets/pugl/win.c	/^puglRealize(PuglView* view)$/;"	f
puglRealize	BWidgets/pugl/x11.c	/^puglRealize(PuglView* view)$/;"	f
puglRegisterWindowClass	BWidgets/pugl/win.c	/^puglRegisterWindowClass(const char* name)$/;"	f	file:
puglRequestAttention	BWidgets/pugl/win.c	/^puglRequestAttention(PuglView* view)$/;"	f
puglRequestAttention	BWidgets/pugl/x11.c	/^puglRequestAttention(PuglView* view)$/;"	f
puglSendEvent	BWidgets/pugl/win.c	/^puglSendEvent(PuglView* view, const PuglEvent* event)$/;"	f
puglSendEvent	BWidgets/pugl/x11.c	/^puglSendEvent(PuglView* view, const PuglEvent* event)$/;"	f
puglSetAspectRatio	BWidgets/pugl/win.c	/^puglSetAspectRatio(PuglView* const view,$/;"	f
puglSetAspectRatio	BWidgets/pugl/x11.c	/^puglSetAspectRatio(PuglView* const view,$/;"	f
puglSetBackend	BWidgets/pugl/implementation.c	/^puglSetBackend(PuglView* view, const PuglBackend* backend)$/;"	f
puglSetBlob	BWidgets/pugl/implementation.c	/^puglSetBlob(PuglBlob* const dest, const void* const data, const size_t len)$/;"	f
puglSetClassName	BWidgets/pugl/implementation.c	/^puglSetClassName(PuglWorld* const world, const char* const name)$/;"	f
puglSetClipboard	BWidgets/pugl/win.c	/^puglSetClipboard(PuglView* const   view,$/;"	f
puglSetClipboard	BWidgets/pugl/x11.c	/^puglSetClipboard(PuglView* const   view,$/;"	f
puglSetCursor	BWidgets/pugl/win.c	/^puglSetCursor(PuglView* view, PuglCursor cursor)$/;"	f
puglSetCursor	BWidgets/pugl/x11.c	/^puglSetCursor(PuglView* view, PuglCursor cursor)$/;"	f
puglSetDefaultHints	BWidgets/pugl/implementation.c	/^puglSetDefaultHints(PuglHints hints)$/;"	f	file:
puglSetDefaultSize	BWidgets/pugl/win.c	/^puglSetDefaultSize(PuglView* const view, const int width, const int height)$/;"	f
puglSetDefaultSize	BWidgets/pugl/x11.c	/^puglSetDefaultSize(PuglView* const view, const int width, const int height)$/;"	f
puglSetEventFunc	BWidgets/pugl/implementation.c	/^puglSetEventFunc(PuglView* view, PuglEventFunc eventFunc)$/;"	f
puglSetFrame	BWidgets/pugl/win.c	/^puglSetFrame(PuglView* view, const PuglRect frame)$/;"	f
puglSetFrame	BWidgets/pugl/x11.c	/^puglSetFrame(PuglView* view, const PuglRect frame)$/;"	f
puglSetHandle	BWidgets/pugl/implementation.c	/^puglSetHandle(PuglView* view, PuglHandle handle)$/;"	f
puglSetInternalClipboard	BWidgets/pugl/implementation.c	/^puglSetInternalClipboard(PuglView* const   view,$/;"	f
puglSetMaxSize	BWidgets/pugl/win.c	/^puglSetMaxSize(PuglView* const view, const int width, const int height)$/;"	f
puglSetMaxSize	BWidgets/pugl/x11.c	/^puglSetMaxSize(PuglView* const view, const int width, const int height)$/;"	f
puglSetMinSize	BWidgets/pugl/win.c	/^puglSetMinSize(PuglView* const view, const int width, const int height)$/;"	f
puglSetMinSize	BWidgets/pugl/x11.c	/^puglSetMinSize(PuglView* const view, const int width, const int height)$/;"	f
puglSetParentWindow	BWidgets/pugl/implementation.c	/^puglSetParentWindow(PuglView* view, PuglNativeView parent)$/;"	f
puglSetString	BWidgets/pugl/implementation.c	/^puglSetString(char** dest, const char* string)$/;"	f
puglSetTransientFor	BWidgets/pugl/win.c	/^puglSetTransientFor(PuglView* view, PuglNativeView parent)$/;"	f
puglSetTransientFor	BWidgets/pugl/x11.c	/^puglSetTransientFor(PuglView* view, PuglNativeView parent)$/;"	f
puglSetViewHint	BWidgets/pugl/implementation.c	/^puglSetViewHint(PuglView* view, PuglViewHint hint, int value)$/;"	f
puglSetWindowTitle	BWidgets/pugl/win.c	/^puglSetWindowTitle(PuglView* view, const char* title)$/;"	f
puglSetWindowTitle	BWidgets/pugl/x11.c	/^puglSetWindowTitle(PuglView* view, const char* title)$/;"	f
puglSetWorldHandle	BWidgets/pugl/implementation.c	/^puglSetWorldHandle(PuglWorld* world, PuglWorldHandle handle)$/;"	f
puglShow	BWidgets/pugl/win.c	/^puglShow(PuglView* view)$/;"	f
puglShow	BWidgets/pugl/x11.c	/^puglShow(PuglView* view)$/;"	f
puglShowWindow	BWidgets/pugl/implementation.c	/^puglShowWindow(PuglView* view)$/;"	f
puglStartTimer	BWidgets/pugl/win.c	/^puglStartTimer(PuglView* view, uintptr_t id, double timeout)$/;"	f
puglStartTimer	BWidgets/pugl/x11.c	/^puglStartTimer(PuglView* view, uintptr_t id, double timeout)$/;"	f
puglStopTimer	BWidgets/pugl/win.c	/^puglStopTimer(PuglView* view, uintptr_t id)$/;"	f
puglStopTimer	BWidgets/pugl/x11.c	/^puglStopTimer(PuglView* view, uintptr_t id)$/;"	f
puglStrerror	BWidgets/pugl/implementation.c	/^puglStrerror(const PuglStatus status)$/;"	f
puglStubBackend	BWidgets/pugl/win_stub.c	/^puglStubBackend(void)$/;"	f
puglStubBackend	BWidgets/pugl/x11_stub.c	/^puglStubBackend(void)$/;"	f
puglStubConfigure	BWidgets/pugl/stub.h	/^puglStubConfigure(PuglView* view)$/;"	f
puglStubCreate	BWidgets/pugl/stub.h	/^puglStubCreate(PuglView* view)$/;"	f
puglStubDestroy	BWidgets/pugl/stub.h	/^puglStubDestroy(PuglView* view)$/;"	f
puglStubEnter	BWidgets/pugl/stub.h	/^puglStubEnter(PuglView* view, const PuglEventExpose* expose)$/;"	f
puglStubGetContext	BWidgets/pugl/stub.h	/^puglStubGetContext(PuglView* view)$/;"	f
puglStubLeave	BWidgets/pugl/stub.h	/^puglStubLeave(PuglView* view, const PuglEventExpose* expose)$/;"	f
puglUpdate	BWidgets/pugl/win.c	/^puglUpdate(PuglWorld* world, double timeout)$/;"	f
puglUpdate	BWidgets/pugl/x11.c	/^puglUpdate(PuglWorld* world, double timeout)$/;"	f
puglUtf8ToWideChar	BWidgets/pugl/win.c	/^puglUtf8ToWideChar(const char* const utf8)$/;"	f	file:
puglVulkanBackend	BWidgets/pugl/win_vulkan.c	/^puglVulkanBackend()$/;"	f
puglVulkanBackend	BWidgets/pugl/x11_vulkan.c	/^puglVulkanBackend(void)$/;"	f
puglWaitForEvent	BWidgets/pugl/x11.c	/^puglWaitForEvent(PuglView* view)$/;"	f
puglWideCharToUtf8	BWidgets/pugl/win.c	/^puglWideCharToUtf8(const wchar_t* const wstr, size_t* len)$/;"	f	file:
puglWinCairoClose	BWidgets/pugl/win_cairo.c	/^puglWinCairoClose(PuglView* view)$/;"	f	file:
puglWinCairoConfigure	BWidgets/pugl/win_cairo.c	/^puglWinCairoConfigure(PuglView* view)$/;"	f	file:
puglWinCairoCreateDrawContext	BWidgets/pugl/win_cairo.c	/^puglWinCairoCreateDrawContext(PuglView* view)$/;"	f	file:
puglWinCairoDestroy	BWidgets/pugl/win_cairo.c	/^puglWinCairoDestroy(PuglView* view)$/;"	f	file:
puglWinCairoDestroyDrawContext	BWidgets/pugl/win_cairo.c	/^puglWinCairoDestroyDrawContext(PuglView* view)$/;"	f	file:
puglWinCairoEnter	BWidgets/pugl/win_cairo.c	/^puglWinCairoEnter(PuglView* view, const PuglEventExpose* expose)$/;"	f	file:
puglWinCairoGetContext	BWidgets/pugl/win_cairo.c	/^puglWinCairoGetContext(PuglView* view)$/;"	f	file:
puglWinCairoLeave	BWidgets/pugl/win_cairo.c	/^puglWinCairoLeave(PuglView* view, const PuglEventExpose* expose)$/;"	f	file:
puglWinCairoOpen	BWidgets/pugl/win_cairo.c	/^puglWinCairoOpen(PuglView* view)$/;"	f	file:
puglWinCreateWindow	BWidgets/pugl/win.h	/^puglWinCreateWindow(PuglView* const   view,$/;"	f
puglWinError	BWidgets/pugl/win_gl.c	/^puglWinError(PuglFakeWindow* fakeWin, const PuglStatus status)$/;"	f	file:
puglWinGetPixelFormatDescriptor	BWidgets/pugl/win.h	/^puglWinGetPixelFormatDescriptor(const PuglHints hints)$/;"	f
puglWinGetWindowExFlags	BWidgets/pugl/win.h	/^puglWinGetWindowExFlags(const PuglView* const view)$/;"	f
puglWinGetWindowFlags	BWidgets/pugl/win.h	/^puglWinGetWindowFlags(const PuglView* const view)$/;"	f
puglWinGlConfigure	BWidgets/pugl/win_gl.c	/^puglWinGlConfigure(PuglView* view)$/;"	f	file:
puglWinGlCreate	BWidgets/pugl/win_gl.c	/^puglWinGlCreate(PuglView* view)$/;"	f	file:
puglWinGlDestroy	BWidgets/pugl/win_gl.c	/^puglWinGlDestroy(PuglView* view)$/;"	f	file:
puglWinGlEnter	BWidgets/pugl/win_gl.c	/^puglWinGlEnter(PuglView* view, const PuglEventExpose* expose)$/;"	f	file:
puglWinGlGetProcs	BWidgets/pugl/win_gl.c	/^puglWinGlGetProcs(void)$/;"	f	file:
puglWinGlLeave	BWidgets/pugl/win_gl.c	/^puglWinGlLeave(PuglView* view, const PuglEventExpose* expose)$/;"	f	file:
puglWinStubConfigure	BWidgets/pugl/win_stub.c	/^puglWinStubConfigure(PuglView* view)$/;"	f
puglWinStubEnter	BWidgets/pugl/win_stub.c	/^puglWinStubEnter(PuglView* view, const PuglEventExpose* expose)$/;"	f
puglWinStubLeave	BWidgets/pugl/win_stub.c	/^puglWinStubLeave(PuglView* view, const PuglEventExpose* expose)$/;"	f
puglX11CairoClose	BWidgets/pugl/x11_cairo.c	/^puglX11CairoClose(PuglView* view)$/;"	f	file:
puglX11CairoCreate	BWidgets/pugl/x11_cairo.c	/^puglX11CairoCreate(PuglView* view)$/;"	f	file:
puglX11CairoDestroy	BWidgets/pugl/x11_cairo.c	/^puglX11CairoDestroy(PuglView* view)$/;"	f	file:
puglX11CairoEnter	BWidgets/pugl/x11_cairo.c	/^puglX11CairoEnter(PuglView* view, const PuglEventExpose* expose)$/;"	f	file:
puglX11CairoGetContext	BWidgets/pugl/x11_cairo.c	/^puglX11CairoGetContext(PuglView* view)$/;"	f	file:
puglX11CairoLeave	BWidgets/pugl/x11_cairo.c	/^puglX11CairoLeave(PuglView* view, const PuglEventExpose* expose)$/;"	f	file:
puglX11CairoOpen	BWidgets/pugl/x11_cairo.c	/^puglX11CairoOpen(PuglView* view)$/;"	f	file:
puglX11GlConfigure	BWidgets/pugl/x11_gl.c	/^puglX11GlConfigure(PuglView* view)$/;"	f	file:
puglX11GlCreate	BWidgets/pugl/x11_gl.c	/^puglX11GlCreate(PuglView* view)$/;"	f	file:
puglX11GlDestroy	BWidgets/pugl/x11_gl.c	/^puglX11GlDestroy(PuglView* view)$/;"	f	file:
puglX11GlEnter	BWidgets/pugl/x11_gl.c	/^puglX11GlEnter(PuglView* view, const PuglEventExpose* PUGL_UNUSED(expose))$/;"	f	file:
puglX11GlGetAttrib	BWidgets/pugl/x11_gl.c	/^puglX11GlGetAttrib(Display* const display,$/;"	f	file:
puglX11GlHintValue	BWidgets/pugl/x11_gl.c	/^puglX11GlHintValue(const int value)$/;"	f	file:
puglX11GlLeave	BWidgets/pugl/x11_gl.c	/^puglX11GlLeave(PuglView* view, const PuglEventExpose* expose)$/;"	f	file:
puglX11StubConfigure	BWidgets/pugl/x11_stub.c	/^puglX11StubConfigure(PuglView* view)$/;"	f
purgeEventQueue	BWidgets/Window.cpp	/^void Window::purgeEventQueue (Widget* widget)$/;"	f	class:BWidgets::Window
pushBackwards	BWidgets/Widget.cpp	/^void Widget::pushBackwards ()$/;"	f	class:BWidgets::Widget
push_back	BWidgets/BItems.cpp	/^void ItemList::push_back (BWidgets::Widget* widget)$/;"	f	class:BItems::ItemList
push_back	BWidgets/BItems.cpp	/^void ItemList::push_back (const Item& item) {std::list<Item>::push_back (item);}$/;"	f	class:BItems::ItemList
push_back	BWidgets/BItems.cpp	/^void ItemList::push_back (const std::string& text)$/;"	f	class:BItems::ItemList
quit	BWidgets/pugl_cairo_test.c	/^static int  quit    = 0;$/;"	v	file:
quit_	BWidgets/Window.hpp	/^	bool quit_;$/;"	m	class:BWidgets::Window
raiseFrontwards	BWidgets/Widget.cpp	/^void Widget::raiseFrontwards ()$/;"	f	class:BWidgets::Widget
raiseToTop	BWidgets/Widget.cpp	/^void Widget::raiseToTop ()$/;"	f	class:BWidgets::Widget
rangeMax	BWidgets/RangeWidget.hpp	/^	double rangeMax;$/;"	m	class:BWidgets::RangeWidget
rangeMin	BWidgets/RangeWidget.hpp	/^	double rangeMin;$/;"	m	class:BWidgets::RangeWidget
rangeStep	BWidgets/RangeWidget.hpp	/^	double rangeStep;$/;"	m	class:BWidgets::RangeWidget
red	BWidgets/BColors.hpp	/^const Color red = Color (1.0, 0.0, 0.0, 1.0);$/;"	m	namespace:BColors
red	BWidgets/cairoplus.h	/^	double red;$/;"	m	struct:__anon42
redFill	BWidgets/BStyles.hpp	/^const Fill redFill = Fill (BColors::red);$/;"	m	namespace:BStyles
red_	BWidgets/BColors.hpp	/^	double red_, green_, blue_, alpha_;$/;"	m	class:BColors::Color
redirectPostValueChanged	BWidgets/MessageBox.cpp	/^void MessageBox::redirectPostValueChanged (BEvents::Event* event)$/;"	f	class:BWidgets::MessageBox
redisplay	BWidgets/Widget.cpp	/^void Widget::redisplay (cairo_surface_t* surface, const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Widget
redisplay	BWidgets/Widget.cpp	/^void Widget::redisplay (cairo_surface_t* surface, const BUtilities::RectArea& outerArea, const BUtilities::RectArea& area)$/;"	f	class:BWidgets::Widget
reds	BWidgets/BColors.hpp	/^const ColorSet reds = ColorSet ({red, lightred, darkred, black});$/;"	m	namespace:BColors
regex	BWidgets/FileChooser.hpp	/^	std::regex regex;$/;"	m	struct:BWidgets::FileFilter
release	BWidgets/Widget.cpp	/^void Widget::release (Widget* child)$/;"	f	class:BWidgets::Widget
remove	BWidgets/BDevices.hpp	/^	void remove (BWidgets::Widget* widget) {remove (DeviceGrab<T> (widget));}$/;"	f	class:BDevices::DeviceGrabStack
remove	BWidgets/BDevices.hpp	/^	void remove (const DeviceGrab<T>& deviceGrab)$/;"	f	class:BDevices::DeviceGrabStack
remove	BWidgets/BDevices.hpp	/^	void remove (const T& device) {remove (DeviceGrab<T> (nullptr, device));}$/;"	f	class:BDevices::DeviceGrabStack
remove	BWidgets/BDevices.hpp	/^	void remove (const std::set<T>& devices) {remove (DeviceGrab<T> (nullptr, devices));}$/;"	f	class:BDevices::DeviceGrabStack
removeButton	BWidgets/MessageBox.cpp	/^void MessageBox::removeButton  (const std::string& label)$/;"	f	class:BWidgets::MessageBox
removeColor	BWidgets/BColors.cpp	/^void ColorSet::removeColor (const State state)$/;"	f	class:BColors::ColorSet
removeItems	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::removeItems ()$/;"	f	class:BWidgets::ChoiceBox
removeStyle	BWidgets/BStyles.cpp	/^void StyleSet::removeStyle (const std::string& styleName)$/;"	f	class:BStyles::StyleSet
removeStyle	BWidgets/BStyles.cpp	/^void Theme::removeStyle (const std::string& setName, const std::string& styleName)$/;"	f	class:BStyles::Theme
rename	BWidgets/Widget.cpp	/^void Widget::rename (const std::string& name) {name_ = name;}$/;"	f	class:BWidgets::Widget
requestWidget	BWidgets/BEvents.hpp	/^ 	BWidgets::Widget* requestWidget;$/;"	m	class:BEvents::WidgetEvent
resize	BAmp_GUI.cpp	/^static const LV2UI_Resize resize = {nullptr, callResize} ;$/;"	v	file:
resize	BUtilities/RectArea.hpp	/^	void resize (const Point& extends) {p2 = p1 + extends;}$/;"	f	class:BUtilities::RectArea
resize	BUtilities/RectArea.hpp	/^	void resize (const double width, const double height) {resize (Point (width, height));}$/;"	f	class:BUtilities::RectArea
resize	BWidgets/DrawingSurface.cpp	/^void DrawingSurface::resize () {} \/\/ Do not auto resize$/;"	f	class:BWidgets::DrawingSurface
resize	BWidgets/DrawingSurface.cpp	/^void DrawingSurface::resize (const BUtilities::Point extends)$/;"	f	class:BWidgets::DrawingSurface
resize	BWidgets/DrawingSurface.cpp	/^void DrawingSurface::resize (const double width, const double height) {DrawingSurface::resize (BUtilities::Point (width, height));}$/;"	f	class:BWidgets::DrawingSurface
resize	BWidgets/FileChooser.cpp	/^void FileChooser::resize () {resize (BWIDGETS_DEFAULT_FILECHOOSER_WIDTH, BWIDGETS_DEFAULT_FILECHOOSER_HEIGHT);}$/;"	f	class:BWidgets::FileChooser
resize	BWidgets/FileChooser.cpp	/^void FileChooser::resize (const BUtilities::Point extends) {Widget::resize (extends);}$/;"	f	class:BWidgets::FileChooser
resize	BWidgets/FileChooser.cpp	/^void FileChooser::resize (const double width, const double height) {resize (BUtilities::Point (width, height));}$/;"	f	class:BWidgets::FileChooser
resize	BWidgets/Label.cpp	/^void Label::resize ()$/;"	f	class:BWidgets::Label
resize	BWidgets/Label.cpp	/^void Label::resize (const BUtilities::Point extends) {Widget::resize (extends);}$/;"	f	class:BWidgets::Label
resize	BWidgets/Label.cpp	/^void Label::resize (const double width, const double height) {Label::resize (BUtilities::Point (width, height));}$/;"	f	class:BWidgets::Label
resize	BWidgets/Text.cpp	/^void Text::resize () {resize (getExtends());}$/;"	f	class:BWidgets::Text
resize	BWidgets/Text.cpp	/^void Text::resize (const BUtilities::Point extends)$/;"	f	class:BWidgets::Text
resize	BWidgets/Text.cpp	/^void Text::resize (const double width, const double height) {resize (BUtilities::Point (width, height));}$/;"	f	class:BWidgets::Text
resize	BWidgets/TextButton.cpp	/^void TextButton::resize ()$/;"	f	class:BWidgets::TextButton
resize	BWidgets/TextButton.cpp	/^void TextButton::resize (const BUtilities::Point extends)$/;"	f	class:BWidgets::TextButton
resize	BWidgets/TextButton.cpp	/^void TextButton::resize (const double width, const double height) {TextButton::resize (BUtilities::Point (width, height));}$/;"	f	class:BWidgets::TextButton
resize	BWidgets/TextToggleButton.cpp	/^void TextToggleButton::resize ()$/;"	f	class:BWidgets::TextToggleButton
resize	BWidgets/TextToggleButton.cpp	/^void TextToggleButton::resize (const BUtilities::Point extends)$/;"	f	class:BWidgets::TextToggleButton
resize	BWidgets/TextToggleButton.cpp	/^void TextToggleButton::resize (const double width, const double height) {TextToggleButton::resize (BUtilities::Point (width, height));}$/;"	f	class:BWidgets::TextToggleButton
resize	BWidgets/Widget.cpp	/^void Widget::resize ()$/;"	f	class:BWidgets::Widget
resize	BWidgets/Widget.cpp	/^void Widget::resize (const BUtilities::Point extends)$/;"	f	class:BWidgets::Widget
resize	BWidgets/Widget.cpp	/^void Widget::resize (const double width, const double height) {Widget::resize (BUtilities::Point (width, height));}$/;"	f	class:BWidgets::Widget
resizeItem	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::resizeItem (const double value, const BUtilities::Point& extends)$/;"	f	class:BWidgets::ChoiceBox
resizeItems	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::resizeItems (const BUtilities::Point& extends)$/;"	f	class:BWidgets::ChoiceBox
resizeListBox	BWidgets/PopupListBox.cpp	/^void PopupListBox::resizeListBox (const BUtilities::Point& extends)$/;"	f	class:BWidgets::PopupListBox
resizeListBoxItem	BWidgets/PopupListBox.cpp	/^void PopupListBox::resizeListBoxItem (const double value, const BUtilities::Point& extends)$/;"	f	class:BWidgets::PopupListBox
resizeListBoxItems	BWidgets/PopupListBox.cpp	/^void PopupListBox::resizeListBoxItems (const BUtilities::Point& extends)$/;"	f	class:BWidgets::PopupListBox
roundedBox	BWidgets/pugl_cairo_test.c	/^roundedBox(cairo_t* cr, double x, double y, double w, double h)$/;"	f	file:
run	BAmp.cpp	/^run(LV2_Handle instance, uint32_t n_samples)$/;"	f	file:
run	BAmp.cpp	/^void Amp::run (uint32_t n_samples)$/;"	f	class:Amp
run	BWidgets/Window.cpp	/^void Window::run ()$/;"	f	class:BWidgets::Window
sans12pt	BWidgets/BStyles.hpp	/^const Font sans12pt = Font ("Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL, 12.0);$/;"	m	namespace:BStyles
scaleArea	BWidgets/HScale.hpp	/^	BUtilities::RectArea scaleArea;$/;"	m	class:BWidgets::HScale
scaleArea	BWidgets/VScale.hpp	/^	BUtilities::RectArea scaleArea;$/;"	m	class:BWidgets::VScale
scaleXValue	BWidgets/HScale.hpp	/^	double scaleXValue;$/;"	m	class:BWidgets::HScale
scaleYValue	BWidgets/VScale.hpp	/^	double scaleYValue;$/;"	m	class:BWidgets::VScale
scheduleDraw_	BWidgets/Widget.hpp	/^	bool scheduleDraw_;$/;"	m	class:BWidgets::Widget
screen	BWidgets/pugl/x11.h	/^  int          screen;$/;"	m	struct:PuglInternalsImpl
scroll	BWidgets/pugl/pugl/pugl.h	/^  PuglEventScroll    scroll;    \/\/\/< #PUGL_SCROLL$/;"	m	union:__anon34
scrollable_	BWidgets/Widget.hpp	/^	bool scrollable_;$/;"	m	class:BWidgets::Widget
selectFilter	BWidgets/FileChooser.cpp	/^void FileChooser::selectFilter (const std::string& name)$/;"	f	class:BWidgets::FileChooser
serverTimeCounter	BWidgets/pugl/x11.h	/^  XID          serverTimeCounter;$/;"	m	struct:PuglWorldInternalsImpl
set	BUtilities/Any.hpp	/^        template <class T> void set (const T& t)$/;"	f	class:BUtilities::Any
setAlpha	BWidgets/BColors.cpp	/^void Color::setAlpha (const double alpha)$/;"	f	class:BColors::Color
setArea	BWidgets/BEvents.hpp	/^	void setArea (const BUtilities::RectArea& area)$/;"	f	class:BEvents::ExposeEvent
setBackground	BWidgets/Widget.cpp	/^void Widget::setBackground (const BStyles::Fill& background)$/;"	f	class:BWidgets::Widget
setBorder	BWidgets/DrawingSurface.cpp	/^void DrawingSurface::setBorder (const BStyles::Border& border)$/;"	f	class:BWidgets::DrawingSurface
setBorder	BWidgets/Widget.cpp	/^void Widget::setBorder (const BStyles::Border& border)$/;"	f	class:BWidgets::Widget
setButton	BWidgets/BEvents.hpp	/^	void setButton (const BDevices::ButtonCode button)$/;"	f	class:BEvents::PointerEvent
setButtonText	BWidgets/FileChooser.cpp	/^void FileChooser::setButtonText (const std::string& buttonText)$/;"	f	class:BWidgets::FileChooser
setCallbackFunction	BWidgets/Widget.cpp	/^void Widget::setCallbackFunction (const BEvents::EventType eventType, const std::function<void (BEvents::Event*)>& callbackFunction)$/;"	f	class:BWidgets::Widget
setClickable	BWidgets/Widget.cpp	/^void Widget::setClickable (const bool status) {clickable_ = status;}$/;"	f	class:BWidgets::Widget
setColor	BWidgets/BStyles.cpp	/^void Fill::setColor (const BColors::Color& color) {fillColor = color;}$/;"	f	class:BStyles::Fill
setColor	BWidgets/BStyles.cpp	/^void Line::setColor (const BColors::Color& color) {lineColor = color;}$/;"	f	class:BStyles::Line
setContent	BWidgets/BEvents.hpp	/^	void setContent (const BUtilities::Any& content)$/;"	f	class:BEvents::MessageEvent
setCursor	BWidgets/Label.cpp	/^void Label::setCursor (const size_t from, const size_t to)$/;"	f	class:BWidgets::Label
setCursor	BWidgets/Label.cpp	/^void Label::setCursor (const size_t pos) {setCursor (pos, pos);}$/;"	f	class:BWidgets::Label
setDelta	BWidgets/BEvents.hpp	/^	void setDelta (const BUtilities::Point& coords)$/;"	f	class:BEvents::PointerEvent
setDelta	BWidgets/BEvents.hpp	/^	void setDelta (const BUtilities::Point& coords)$/;"	f	class:BEvents::WheelEvent
setDepth	BWidgets/Knob.cpp	/^void Knob::setDepth (const double depth)$/;"	f	class:BWidgets::Knob
setDraggable	BWidgets/Widget.cpp	/^void Widget::setDraggable (const bool status) {draggable_ = status;}$/;"	f	class:BWidgets::Widget
setEditMode	BWidgets/Label.cpp	/^void Label::setEditMode (const bool mode)$/;"	f	class:BWidgets::Label
setEditable	BWidgets/Label.cpp	/^void Label::setEditable (const bool status)$/;"	f	class:BWidgets::Label
setFileName	BWidgets/FileChooser.cpp	/^void FileChooser::setFileName (const std::string& filename)$/;"	f	class:BWidgets::FileChooser
setFilters	BWidgets/FileChooser.cpp	/^void FileChooser::setFilters (const std::vector<FileFilter>& filters)$/;"	f	class:BWidgets::FileChooser
setFocusInMilliseconds	BWidgets/Focusable.hpp	/^        void setFocusInMilliseconds (const std::chrono::milliseconds ms) {focusInMs = ms;}$/;"	f	class:BWidgets::Focusable
setFocusOutMilliseconds	BWidgets/Focusable.hpp	/^	void setFocusOutMilliseconds (const std::chrono::milliseconds ms) {focusOutMs = ms;}$/;"	f	class:BWidgets::Focusable
setFocusable	BWidgets/Widget.cpp	/^void Widget::setFocusable (const bool status) {focusable_ = status;}$/;"	f	class:BWidgets::Widget
setFont	BWidgets/Label.cpp	/^void Label::setFont (const BStyles::Font& font)$/;"	f	class:BWidgets::Label
setFont	BWidgets/MessageBox.cpp	/^void MessageBox::setFont (const BStyles::Font& font) {textBox.setFont (font);}$/;"	f	class:BWidgets::MessageBox
setFont	BWidgets/Text.cpp	/^void Text::setFont (const BStyles::Font& font)$/;"	f	class:BWidgets::Text
setFontFamily	BWidgets/BStyles.cpp	/^void Font::setFontFamily (const std::string& family) {fontFamily = family;}$/;"	f	class:BStyles::Font
setFontSize	BWidgets/BStyles.cpp	/^void Font::setFontSize (const double size) {fontSize = size;}$/;"	f	class:BStyles::Font
setFontSlant	BWidgets/BStyles.cpp	/^void Font::setFontSlant (const cairo_font_slant_t slant) {fontSlant = slant;}$/;"	f	class:BStyles::Font
setFontWeight	BWidgets/BStyles.cpp	/^void Font::setFontWeight (const cairo_font_weight_t weight) {fontWeight = weight;}$/;"	f	class:BStyles::Font
setHardChangeable	BWidgets/ValueWidget.cpp	/^void ValueWidget::setHardChangeable (const bool status) {hardChangeable = status;}$/;"	f	class:BWidgets::ValueWidget
setHeight	BUtilities/RectArea.hpp	/^	void setHeight (const double height) {resize (getWidth(), height);}$/;"	f	class:BUtilities::RectArea
setHeight	BWidgets/DrawingSurface.cpp	/^void DrawingSurface::setHeight (const double height)$/;"	f	class:BWidgets::DrawingSurface
setHeight	BWidgets/TextButton.cpp	/^void TextButton::setHeight (const double height)$/;"	f	class:BWidgets::TextButton
setHeight	BWidgets/TextToggleButton.cpp	/^void TextToggleButton::setHeight (const double height)$/;"	f	class:BWidgets::TextToggleButton
setHeight	BWidgets/Widget.cpp	/^void Widget::setHeight (const double height)$/;"	f	class:BWidgets::Widget
setItem	BWidgets/ItemBox.cpp	/^void ItemBox::setItem (const BItems::Item item)$/;"	f	class:BWidgets::ItemBox
setKeysToggleable	BWidgets/HPianoRoll.cpp	/^void HPianoRoll::setKeysToggleable (const bool toggle) {toggleKeys = toggle;}$/;"	f	class:BWidgets::HPianoRoll
setLimits	BWidgets/RangeWidget.cpp	/^void RangeWidget::setLimits (const double min, const double max, const double step)$/;"	f	class:BWidgets::RangeWidget
setLine	BWidgets/BStyles.cpp	/^void Border::setLine (const Line& line) {borderLine = line;}$/;"	f	class:BStyles::Border
setLineSpacing	BWidgets/BStyles.cpp	/^void Font::setLineSpacing (const double lineSpacing) {textLineSpacing = lineSpacing;}$/;"	f	class:BStyles::Font
setMargin	BWidgets/BStyles.cpp	/^void Border::setMargin (const double margin) {borderMargin = margin;}$/;"	f	class:BStyles::Border
setMax	BWidgets/RangeWidget.cpp	/^void RangeWidget::setMax (const double max)$/;"	f	class:BWidgets::RangeWidget
setMergeable	BWidgets/Widget.cpp	/^void Widget::setMergeable (const BEvents::EventType eventType, const bool status) {mergeable_[eventType] = status;}$/;"	f	class:BWidgets::Widget
setMin	BWidgets/RangeWidget.cpp	/^void RangeWidget::setMin (const double min)$/;"	f	class:BWidgets::RangeWidget
setName	BWidgets/BEvents.hpp	/^	void setName (const std::string& name)$/;"	f	class:BEvents::MessageEvent
setName	BWidgets/BStyles.cpp	/^void StyleSet::setName (const std::string& name) {stylesetName = name;}$/;"	f	class:BStyles::StyleSet
setOrigin	BWidgets/BEvents.hpp	/^	void setOrigin (const BUtilities::Point& coords)$/;"	f	class:BEvents::PointerEvent
setPadding	BWidgets/BStyles.cpp	/^void Border::setPadding (const double padding) {borderPadding = padding;}$/;"	f	class:BStyles::Border
setPath	BWidgets/FileChooser.cpp	/^void FileChooser::setPath (const std::string& path)$/;"	f	class:BWidgets::FileChooser
setPosition	BWidgets/BEvents.hpp	/^	 void setPosition (const BUtilities::Point& coords)$/;"	f	class:BEvents::KeyEvent
setPosition	BWidgets/BEvents.hpp	/^	void setPosition (const BUtilities::Point& coords)$/;"	f	class:BEvents::FocusEvent
setPosition	BWidgets/BEvents.hpp	/^	void setPosition (const BUtilities::Point& coords)$/;"	f	class:BEvents::PointerEvent
setPosition	BWidgets/BEvents.hpp	/^	void setPosition (const BUtilities::Point& coords)$/;"	f	class:BEvents::WheelEvent
setRGB	BWidgets/BColors.cpp	/^void Color::setRGB (const double red, const double green, const double blue)$/;"	f	class:BColors::Color
setRGBA	BWidgets/BColors.cpp	/^void Color::setRGBA (const double red, const double green, const double blue, const double alpha)$/;"	f	class:BColors::Color
setRadius	BWidgets/BStyles.cpp	/^void Border::setRadius (const double radius) {borderRadius = radius;}$/;"	f	class:BStyles::Border
setScrollable	BWidgets/Widget.cpp	/^void Widget::setScrollable (const bool status) {scrollable_ = status;}$/;"	f	class:BWidgets::Widget
setStacking	BWidgets/Widget.cpp	/^void Widget::setStacking (const WidgetStacking stacking) {stacking_ = stacking;}$/;"	f	class:BWidgets::Widget
setState	BWidgets/Widget.cpp	/^void Widget::setState (const BColors::State state)$/;"	f	class:BWidgets::Widget
setStep	BWidgets/RangeWidget.cpp	/^void RangeWidget::setStep (const double step) {rangeStep = step;}$/;"	f	class:BWidgets::RangeWidget
setText	BWidgets/Label.cpp	/^void Label::setText (const std::string& text)$/;"	f	class:BWidgets::Label
setText	BWidgets/MessageBox.cpp	/^void MessageBox::setText (const std::string& text) {textBox.setText (text);}$/;"	f	class:BWidgets::MessageBox
setText	BWidgets/Text.cpp	/^void Text::setText (const std::string& text)$/;"	f	class:BWidgets::Text
setTextAlign	BWidgets/BStyles.cpp	/^void Font::setTextAlign (const TextAlign align) {textAlign = align;}$/;"	f	class:BStyles::Font
setTextColors	BWidgets/Label.cpp	/^void Label::setTextColors (const BColors::ColorSet& colorset)$/;"	f	class:BWidgets::Label
setTextColors	BWidgets/MessageBox.cpp	/^void MessageBox::setTextColors (const BColors::ColorSet& colorset) {textBox.setTextColors (colorset);}$/;"	f	class:BWidgets::MessageBox
setTextColors	BWidgets/Text.cpp	/^void Text::setTextColors (const BColors::ColorSet& colorset)$/;"	f	class:BWidgets::Text
setTextVAlign	BWidgets/BStyles.cpp	/^void Font::setTextVAlign (const TextVAlign valign) {textVAlign = valign;}$/;"	f	class:BStyles::Font
setTitle	BWidgets/MessageBox.cpp	/^void MessageBox::setTitle (const std::string& title) {titleBox.setText (title);}$/;"	f	class:BWidgets::MessageBox
setTop	BWidgets/ListBox.cpp	/^void ListBox::setTop (const int top)$/;"	f	class:BWidgets::ListBox
setValue	BWidgets/BEvents.hpp	/^	void setValue (const double val)$/;"	f	class:BEvents::ValueChangedEvent
setValue	BWidgets/BItems.cpp	/^void Item::setValue (const double value) {this->value = value;}$/;"	f	class:BItems::Item
setValue	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::setValue (const double val)$/;"	f	class:BWidgets::ChoiceBox
setValue	BWidgets/Dial.cpp	/^void Dial::setValue (const double val)$/;"	f	class:BWidgets::Dial
setValue	BWidgets/DialValue.cpp	/^void DialValue::setValue (const double val)$/;"	f	class:BWidgets::DialValue
setValue	BWidgets/HSlider.cpp	/^void HSlider::setValue (const double val)$/;"	f	class:BWidgets::HSlider
setValue	BWidgets/HSliderValue.cpp	/^void HSliderValue::setValue (const double val)$/;"	f	class:BWidgets::HSliderValue
setValue	BWidgets/PopupListBox.cpp	/^void PopupListBox::setValue (const double val)$/;"	f	class:BWidgets::PopupListBox
setValue	BWidgets/RangeWidget.cpp	/^void RangeWidget::setValue (const double val)$/;"	f	class:BWidgets::RangeWidget
setValue	BWidgets/TextButton.cpp	/^void TextButton::setValue (const double val)$/;"	f	class:BWidgets::TextButton
setValue	BWidgets/TextToggleButton.cpp	/^void TextToggleButton::setValue (const double val)$/;"	f	class:BWidgets::TextToggleButton
setValue	BWidgets/VSlider.cpp	/^void VSlider::setValue (const double val)$/;"	f	class:BWidgets::VSlider
setValue	BWidgets/VSliderValue.cpp	/^void VSliderValue::setValue (const double val)$/;"	f	class:BWidgets::VSliderValue
setValue	BWidgets/ValueWidget.cpp	/^void ValueWidget::setValue (const double val)$/;"	f	class:BWidgets::ValueWidget
setValueFormat	BWidgets/DialValue.cpp	/^void DialValue::setValueFormat (const std::string& valueFormat)$/;"	f	class:BWidgets::DialValue
setValueFormat	BWidgets/HSliderValue.cpp	/^void HSliderValue::setValueFormat (const std::string& valueFormat) {valFormat = valueFormat;}$/;"	f	class:BWidgets::HSliderValue
setValueFormat	BWidgets/VSliderValue.cpp	/^void VSliderValue::setValueFormat (const std::string& valueFormat)$/;"	f	class:BWidgets::VSliderValue
setValuePosition	BWidgets/HSliderValue.cpp	/^void HSliderValue::setValuePosition (const LabelPosition pos)$/;"	f	class:BWidgets::HSliderValue
setValuePosition	BWidgets/VSliderValue.cpp	/^void VSliderValue::setValuePosition (const LabelPosition pos)$/;"	f	class:BWidgets::VSliderValue
setValueable	BWidgets/ValueWidget.cpp	/^void ValueWidget::setValueable (const bool status) {valueable_ = status;}$/;"	f	class:BWidgets::ValueWidget
setWidget	BWidgets/BItems.cpp	/^void Item::setWidget (BWidgets::Widget* widget)$/;"	f	class:BItems::Item
setWidget	BWidgets/BItems.cpp	/^void Item::setWidget (const std::string& text)$/;"	f	class:BItems::Item
setWidth	BUtilities/RectArea.hpp	/^	void setWidth (const double width) {resize (width, getHeight());}$/;"	f	class:BUtilities::RectArea
setWidth	BWidgets/BStyles.cpp	/^void Line::setWidth (const double width) {lineWidth = width;}$/;"	f	class:BStyles::Line
setWidth	BWidgets/DrawingSurface.cpp	/^void DrawingSurface::setWidth (const double width)$/;"	f	class:BWidgets::DrawingSurface
setWidth	BWidgets/Text.cpp	/^void Text::setWidth (const double width)$/;"	f	class:BWidgets::Text
setWidth	BWidgets/TextButton.cpp	/^void TextButton::setWidth (const double width)$/;"	f	class:BWidgets::TextButton
setWidth	BWidgets/TextToggleButton.cpp	/^void TextToggleButton::setWidth (const double width)$/;"	f	class:BWidgets::TextToggleButton
setWidth	BWidgets/Widget.cpp	/^void Widget::setWidth (const double width)$/;"	f	class:BWidgets::Widget
setX	BUtilities/RectArea.hpp	/^	void setX (const double x) {moveTo (x, getY());}$/;"	f	class:BUtilities::RectArea
setY	BUtilities/RectArea.hpp	/^	void setY (const double y) {moveTo (getX(), y);}$/;"	f	class:BUtilities::RectArea
setYResizable	BWidgets/Text.cpp	/^void Text::setYResizable (const bool resizable) {yResizable = resizable;}$/;"	f	class:BWidgets::Text
show	BWidgets/Widget.cpp	/^void Widget::show ()$/;"	f	class:BWidgets::Widget
size	BWidgets/cairoplus.h	/^	double size;$/;"	m	struct:__anon43
slant	BWidgets/cairoplus.h	/^	cairo_font_slant_t slant;$/;"	m	struct:__anon43
softValue	BWidgets/ValueWidget.hpp	/^	double softValue;$/;"	m	class:BWidgets::ValueWidget
split	BUtilities/Path.hpp	/^        void split (const std::string& path)$/;"	f	class:BUtilities::Path
stack_	BWidgets/BDevices.hpp	/^	std::list<DeviceGrab<T>> stack_;$/;"	m	class:BDevices::DeviceGrabStack
stackingCatch	BWidgets/Widget.cpp	/^void Widget::stackingCatch ()$/;"	f	class:BWidgets::Widget
stacking_	BWidgets/Widget.hpp	/^	WidgetStacking stacking_;$/;"	m	class:BWidgets::Widget
startMidiKey	BWidgets/PianoWidget.hpp	/^	int startMidiKey;$/;"	m	class:BWidgets::PianoWidget
startTime	BWidgets/pugl/types.h	/^  double              startTime;$/;"	m	struct:PuglWorldImpl
state	BWidgets/pugl/pugl/pugl.h	/^  PuglMods            state;     \/\/\/< Bitwise OR of #PuglMod flags$/;"	m	struct:__anon31
state	BWidgets/pugl/pugl/pugl.h	/^  PuglMods         state; \/\/\/< Bitwise OR of #PuglMod flags$/;"	m	struct:__anon28
state	BWidgets/pugl/pugl/pugl.h	/^  PuglMods       state;     \/\/\/< Bitwise OR of #PuglMod flags$/;"	m	struct:__anon27
state	BWidgets/pugl/pugl/pugl.h	/^  PuglMods       state;   \/\/\/< Bitwise OR of #PuglMod flags$/;"	m	struct:__anon26
state	BWidgets/pugl/pugl/pugl.h	/^  PuglMods       state;  \/\/\/< Bitwise OR of #PuglMod flags$/;"	m	struct:__anon29
state	BWidgets/pugl/pugl/pugl.h	/^  PuglMods       state; \/\/\/< Bitwise OR of #PuglMod flags$/;"	m	struct:__anon30
stof	BUtilities/stof.cpp	/^float stof (const std::string& str, size_t* idx)$/;"	f	namespace:BUtilities
string	BWidgets/pugl/pugl/pugl.h	/^  char           string[8]; \/\/\/< UTF-8 string$/;"	m	struct:__anon27
stylePtr	BWidgets/BStyles.hpp	/^	void* stylePtr;$/;"	m	struct:BStyles::__anon4
styleVector	BWidgets/BStyles.hpp	/^	std::vector<Style> styleVector;$/;"	m	class:BStyles::StyleSet
stylesetName	BWidgets/BStyles.hpp	/^	std::string stylesetName;$/;"	m	class:BStyles::StyleSet
stylesetVector	BWidgets/BStyles.hpp	/^	std::vector<StyleSet> stylesetVector;$/;"	m	class:BStyles::Theme
surface	BWidgets/pugl/win.h	/^  PuglSurface* surface;$/;"	m	struct:PuglInternalsImpl
surface	BWidgets/pugl/win_cairo.c	/^  cairo_surface_t* surface;$/;"	m	struct:__anon41	file:
surface	BWidgets/pugl/x11.h	/^  PuglSurface* surface;$/;"	m	struct:PuglInternalsImpl
syncEventBase	BWidgets/pugl/x11.h	/^  int          syncEventBase;$/;"	m	struct:PuglWorldInternalsImpl
syncSupported	BWidgets/pugl/x11.h	/^  bool         syncSupported;$/;"	m	struct:PuglWorldInternalsImpl
text	BWidgets/pugl/pugl/pugl.h	/^  PuglEventText      text;      \/\/\/< #PUGL_TEXT$/;"	m	union:__anon34
textAlign	BWidgets/BStyles.hpp	/^	TextAlign textAlign;$/;"	m	class:BStyles::Font
textBox	BWidgets/MessageBox.hpp	/^	Text textBox;$/;"	m	class:BWidgets::MessageBox
textColors	BWidgets/Text.hpp	/^	BColors::ColorSet textColors;$/;"	m	class:BWidgets::Text
textFont	BWidgets/Text.hpp	/^	BStyles::Font textFont;$/;"	m	class:BWidgets::Text
textLineSpacing	BWidgets/BStyles.hpp	/^	double textLineSpacing;$/;"	m	class:BStyles::Font
textString	BWidgets/Text.hpp	/^	std::string textString;$/;"	m	class:BWidgets::Text
textVAlign	BWidgets/BStyles.hpp	/^	TextVAlign textVAlign;$/;"	m	class:BStyles::Font
that	BWidgets/Window.hpp	/^	Window (const Window& that) = delete;			\/\/ Only one window in this version$/;"	m	class:BWidgets::Window
that	BWidgets/Window.hpp	/^	Window& operator= (const Window& that) = delete;	\/\/ Only one Window in this version$/;"	m	class:BWidgets::Window
time	BWidgets/pugl/pugl/pugl.h	/^  double              time;      \/\/\/< Time in seconds$/;"	m	struct:__anon31
time	BWidgets/pugl/pugl/pugl.h	/^  double           time;  \/\/\/< Time in seconds$/;"	m	struct:__anon28
time	BWidgets/pugl/pugl/pugl.h	/^  double         time;      \/\/\/< Time in seconds$/;"	m	struct:__anon27
time	BWidgets/pugl/pugl/pugl.h	/^  double         time;    \/\/\/< Time in seconds$/;"	m	struct:__anon26
time	BWidgets/pugl/pugl/pugl.h	/^  double         time;   \/\/\/< Time in seconds$/;"	m	struct:__anon29
time	BWidgets/pugl/pugl/pugl.h	/^  double         time;  \/\/\/< Time in seconds$/;"	m	struct:__anon30
time_	BWidgets/BDevices.hpp	/^	std::chrono::steady_clock::time_point time_;$/;"	m	class:BDevices::MouseDevice
timer	BWidgets/pugl/pugl/pugl.h	/^  PuglEventTimer     timer;     \/\/\/< #PUGL_TIMER$/;"	m	union:__anon34
timerFrequency	BWidgets/pugl/win.h	/^  double timerFrequency;$/;"	m	struct:PuglWorldInternalsImpl
timers	BWidgets/pugl/x11.h	/^  PuglTimer*   timers;$/;"	m	struct:PuglWorldInternalsImpl
title	BWidgets/pugl/types.h	/^  char*              title;$/;"	m	struct:PuglViewImpl
titleBox	BWidgets/MessageBox.hpp	/^	Text titleBox;$/;"	m	class:BWidgets::MessageBox
title_	BWidgets/Window.hpp	/^	std::string title_;$/;"	m	class:BWidgets::Window
to_string	BUtilities/to_string.cpp	/^std::string to_string (const double value)$/;"	f	namespace:BUtilities
to_string	BUtilities/to_string.cpp	/^std::string to_string (const double value, const std::string& format)$/;"	f	namespace:BUtilities
toggleKeys	BWidgets/HPianoRoll.hpp	/^	bool toggleKeys;$/;"	m	class:BWidgets::HPianoRoll
toggle_button	BWidgets/pugl_cairo_test.c	/^static Button toggle_button = { 16, 16, 128, 64, false, "Test" };$/;"	v	file:
transientParent	BWidgets/pugl/types.h	/^  uintptr_t          transientParent;$/;"	m	struct:PuglViewImpl
translateEvent	BWidgets/pugl/x11.c	/^translateEvent(PuglView* view, XEvent xevent)$/;"	f	file:
translateKey	BWidgets/pugl/x11.c	/^translateKey(PuglView* view, XEvent* xevent, PuglEvent* event)$/;"	f	file:
translateModifiers	BWidgets/pugl/x11.c	/^translateModifiers(const unsigned xstate)$/;"	f	file:
translatePuglEvent	BWidgets/Window.cpp	/^PuglStatus Window::translatePuglEvent (PuglView* view, const PuglEvent* puglEvent)$/;"	f	class:BWidgets::Window
translateTimeEvent	BWidgets/Window.cpp	/^void Window::translateTimeEvent ()$/;"	f	class:BWidgets::Window
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType       type;      \/\/\/< #PUGL_SCROLL$/;"	m	struct:__anon31
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType      type;      \/\/\/< Event type$/;"	m	union:__anon34
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType    type;  \/\/\/< #PUGL_FOCUS_IN or #PUGL_FOCUS_OUT$/;"	m	struct:__anon25
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType    type;  \/\/\/< #PUGL_POINTER_IN or #PUGL_POINTER_OUT$/;"	m	struct:__anon28
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;      \/\/\/< #PUGL_TEXT$/;"	m	struct:__anon27
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;    \/\/\/< #PUGL_KEY_PRESS or #PUGL_KEY_RELEASE$/;"	m	struct:__anon26
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;   \/\/\/< #PUGL_BUTTON_PRESS or #PUGL_BUTTON_RELEASE$/;"	m	struct:__anon29
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;   \/\/\/< #PUGL_CONFIGURE$/;"	m	struct:__anon23
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;   \/\/\/< #PUGL_EXPOSE$/;"	m	struct:__anon24
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;  \/\/\/< #PUGL_CLIENT$/;"	m	struct:__anon32
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;  \/\/\/< #PUGL_MOTION$/;"	m	struct:__anon30
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;  \/\/\/< #PUGL_TIMER$/;"	m	struct:__anon33
type	BWidgets/pugl/pugl/pugl.h	/^  PuglEventType  type;  \/\/\/< Event type$/;"	m	struct:__anon22
u32labelText	BWidgets/Label.hpp	/^	std::u32string u32labelText;$/;"	m	class:BWidgets::Label
unfocus	BWidgets/Window.cpp	/^void Window::unfocus ()$/;"	f	class:BWidgets::Window
upButton	BWidgets/ChoiceBox.hpp	/^	UpButton upButton;$/;"	m	class:BWidgets::ChoiceBox
update	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::update ()$/;"	f	class:BWidgets::ChoiceBox
update	BWidgets/Dial.cpp	/^void Dial::update ()$/;"	f	class:BWidgets::Dial
update	BWidgets/DialValue.cpp	/^void DialValue::update ()$/;"	f	class:BWidgets::DialValue
update	BWidgets/FileChooser.cpp	/^void FileChooser::update ()$/;"	f	class:BWidgets::FileChooser
update	BWidgets/HScale.cpp	/^void HScale::update ()$/;"	f	class:BWidgets::HScale
update	BWidgets/HSlider.cpp	/^void HSlider::update ()$/;"	f	class:BWidgets::HSlider
update	BWidgets/HSliderValue.cpp	/^void HSliderValue::update ()$/;"	f	class:BWidgets::HSliderValue
update	BWidgets/ItemBox.cpp	/^void ItemBox::update ()$/;"	f	class:BWidgets::ItemBox
update	BWidgets/MessageBox.cpp	/^void MessageBox::update ()$/;"	f	class:BWidgets::MessageBox
update	BWidgets/PopupListBox.cpp	/^void PopupListBox::update ()$/;"	f	class:BWidgets::PopupListBox
update	BWidgets/VScale.cpp	/^void VScale::update ()$/;"	f	class:BWidgets::VScale
update	BWidgets/VSlider.cpp	/^void VSlider::update ()$/;"	f	class:BWidgets::VSlider
update	BWidgets/VSliderValue.cpp	/^void VSliderValue::update ()$/;"	f	class:BWidgets::VSliderValue
update	BWidgets/Widget.cpp	/^void Widget::update ()$/;"	f	class:BWidgets::Widget
updateCoords	BWidgets/Dial.cpp	/^void Dial::updateCoords ()$/;"	f	class:BWidgets::Dial
updateCoords	BWidgets/DialValue.cpp	/^void DialValue::updateCoords ()$/;"	f	class:BWidgets::DialValue
updateCoords	BWidgets/HScale.cpp	/^void HScale::updateCoords ()$/;"	f	class:BWidgets::HScale
updateCoords	BWidgets/HSlider.cpp	/^void HSlider::updateCoords ()$/;"	f	class:BWidgets::HSlider
updateCoords	BWidgets/HSliderValue.cpp	/^void HSliderValue::updateCoords ()$/;"	f	class:BWidgets::HSliderValue
updateCoords	BWidgets/HSwitch.cpp	/^void HSwitch::updateCoords ()$/;"	f	class:BWidgets::HSwitch
updateCoords	BWidgets/VScale.cpp	/^void VScale::updateCoords ()$/;"	f	class:BWidgets::VScale
updateCoords	BWidgets/VSlider.cpp	/^void VSlider::updateCoords ()$/;"	f	class:BWidgets::VSlider
updateCoords	BWidgets/VSliderValue.cpp	/^void VSliderValue::updateCoords ()$/;"	f	class:BWidgets::VSliderValue
updateCoords	BWidgets/VSwitch.cpp	/^void VSwitch::updateCoords ()$/;"	f	class:BWidgets::VSwitch
updateItems	BWidgets/ChoiceBox.cpp	/^void ChoiceBox::updateItems ()$/;"	f	class:BWidgets::ChoiceBox
updateItems	BWidgets/ListBox.cpp	/^void ListBox::updateItems ()$/;"	f	class:BWidgets::ListBox
updateSizeHints	BWidgets/pugl/x11.c	/^updateSizeHints(const PuglView* view)$/;"	f	file:
valFormat	BWidgets/DialValue.hpp	/^	std::string valFormat;$/;"	m	class:BWidgets::DialValue
valFormat	BWidgets/HSliderValue.hpp	/^	std::string valFormat;$/;"	m	class:BWidgets::HSliderValue
valFormat	BWidgets/VSliderValue.hpp	/^	std::string valFormat;$/;"	m	class:BWidgets::VSliderValue
valPosition	BWidgets/HSliderValue.hpp	/^	LabelPosition valPosition;$/;"	m	class:BWidgets::HSliderValue
valPosition	BWidgets/VSliderValue.hpp	/^	LabelPosition valPosition;$/;"	m	class:BWidgets::VSliderValue
value	BWidgets/BEvents.hpp	/^	double value;$/;"	m	class:BEvents::ValueChangedEvent
value	BWidgets/BItems.hpp	/^        double value;$/;"	m	class:BItems::Item
value	BWidgets/ValueWidget.hpp	/^	double value;$/;"	m	class:BWidgets::ValueWidget
valueChangedCallback	BAmp_GUI.cpp	/^void BAmp_GUI::valueChangedCallback (BEvents::Event* event)$/;"	f	class:BAmp_GUI
valueDisplay	BWidgets/DialValue.hpp	/^	Label valueDisplay;$/;"	m	class:BWidgets::DialValue
valueDisplay	BWidgets/HSliderValue.hpp	/^	Label valueDisplay;$/;"	m	class:BWidgets::HSliderValue
valueDisplay	BWidgets/VSliderValue.hpp	/^	Label valueDisplay;$/;"	m	class:BWidgets::VSliderValue
valueable_	BWidgets/ValueWidget.hpp	/^	bool valueable_;$/;"	m	class:BWidgets::ValueWidget
vi	BWidgets/pugl/x11.h	/^  XVisualInfo* vi;$/;"	m	struct:PuglInternalsImpl
view	BWidgets/pugl/x11.h	/^  PuglView* view;$/;"	m	struct:__anon8
view_	BWidgets/Window.hpp	/^	PuglView* view_;$/;"	m	class:BWidgets::Window
views	BWidgets/pugl/types.h	/^  PuglView**          views;$/;"	m	struct:PuglWorldImpl
visible	BWidgets/pugl/types.h	/^  bool               visible;$/;"	m	struct:PuglViewImpl
visible_	BWidgets/Widget.hpp	/^	bool visible_;$/;"	m	class:BWidgets::Widget
vkGetDeviceProcAddr	BWidgets/pugl/win_vulkan.c	/^  PFN_vkGetDeviceProcAddr   vkGetDeviceProcAddr;$/;"	m	struct:PuglVulkanLoaderImpl	file:
vkGetDeviceProcAddr	BWidgets/pugl/x11_vulkan.c	/^  PFN_vkGetDeviceProcAddr   vkGetDeviceProcAddr;$/;"	m	struct:PuglVulkanLoaderImpl	file:
vkGetInstanceProcAddr	BWidgets/pugl/win_vulkan.c	/^  PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr;$/;"	m	struct:PuglVulkanLoaderImpl	file:
vkGetInstanceProcAddr	BWidgets/pugl/x11_vulkan.c	/^  PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr;$/;"	m	struct:PuglVulkanLoaderImpl	file:
w	BWidgets/pugl_cairo_test.c	/^	int         w;$/;"	m	struct:__anon1	file:
weight	BWidgets/cairoplus.h	/^	cairo_font_weight_t weight;$/;"	m	struct:__anon43
wglChoosePixelFormat	BWidgets/pugl/win_gl.c	/^  WglChoosePixelFormat    wglChoosePixelFormat;$/;"	m	struct:__anon12	file:
wglCreateContextAttribs	BWidgets/pugl/win_gl.c	/^  WglCreateContextAttribs wglCreateContextAttribs;$/;"	m	struct:__anon12	file:
wglSwapInterval	BWidgets/pugl/win_gl.c	/^  WglSwapInterval         wglSwapInterval;$/;"	m	struct:__anon12	file:
white	BWidgets/BColors.hpp	/^const Color white = Color (1.0, 1.0, 1.0, 1.0);$/;"	m	namespace:BColors
whiteBgColors	BWidgets/HPianoRoll.hpp	/^	BColors::ColorSet whiteBgColors;$/;"	m	class:BWidgets::HPianoRoll
whiteBorder1pt	BWidgets/BStyles.hpp	/^const Border whiteBorder1pt = Border (whiteLine1pt);$/;"	m	namespace:BStyles
whiteFill	BWidgets/BStyles.hpp	/^const Fill whiteFill = Fill (BColors::white);$/;"	m	namespace:BStyles
whiteKey	BWidgets/PianoWidget.hpp	/^	bool whiteKey;$/;"	m	struct:BWidgets::__anon6
whiteLine1pt	BWidgets/BStyles.hpp	/^const Line whiteLine1pt = Line (BColors::white, 1.0);$/;"	m	namespace:BStyles
whites	BWidgets/BColors.hpp	/^const ColorSet whites = ColorSet ({lightgrey, white, grey, black});$/;"	m	namespace:BColors
widget	BWidgets/BItems.hpp	/^        BWidgets::Widget* widget;$/;"	m	class:BItems::Item
widgetState_	BWidgets/Widget.hpp	/^	BColors::State widgetState_;$/;"	m	class:BWidgets::Widget
widgetSurface_	BWidgets/Widget.hpp	/^	cairo_surface_t* widgetSurface_;$/;"	m	class:BWidgets::Widget
widget_	BWidgets/BDevices.hpp	/^	BWidgets::Widget* widget_;$/;"	m	class:BDevices::DeviceGrab
width	BWidgets/PianoWidget.hpp	/^	double width;$/;"	m	struct:BWidgets::__anon6
width	BWidgets/pugl/pugl/pugl.h	/^  double         width;  \/\/\/< New width$/;"	m	struct:__anon23
width	BWidgets/pugl/pugl/pugl.h	/^  double         width;  \/\/\/< Width of exposed region$/;"	m	struct:__anon24
width	BWidgets/pugl/pugl/pugl.h	/^  double width;$/;"	m	struct:__anon15
win	BWidgets/pugl/x11.h	/^  Window       win;$/;"	m	struct:PuglInternalsImpl
window	BWidgets/pugl/mac.h	/^  PuglWindow*      window;$/;"	m	struct:PuglInternalsImpl
wndProc	BWidgets/pugl/win.c	/^wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
world	BWidgets/pugl/types.h	/^  PuglWorld*         world;$/;"	m	struct:PuglViewImpl
world_	BWidgets/Window.hpp	/^	PuglWorld* world_;$/;"	m	class:BWidgets::Window
wrapperView	BWidgets/pugl/mac.h	/^  PuglWrapperView* wrapperView;$/;"	m	struct:PuglInternalsImpl
write_function	BAmp_GUI.cpp	/^	LV2UI_Write_Function write_function;$/;"	m	class:BAmp_GUI	file:
x	BUtilities/Point.hpp	/^	double x, y;$/;"	m	struct:BUtilities::Point
x	BWidgets/PianoWidget.hpp	/^	double x;$/;"	m	struct:BWidgets::__anon6
x	BWidgets/pugl/pugl/pugl.h	/^  double              x;         \/\/\/< View-relative X coordinate$/;"	m	struct:__anon31
x	BWidgets/pugl/pugl/pugl.h	/^  double           x;     \/\/\/< View-relative X coordinate$/;"	m	struct:__anon28
x	BWidgets/pugl/pugl/pugl.h	/^  double         x;         \/\/\/< View-relative X coordinate$/;"	m	struct:__anon27
x	BWidgets/pugl/pugl/pugl.h	/^  double         x;       \/\/\/< View-relative X coordinate$/;"	m	struct:__anon26
x	BWidgets/pugl/pugl/pugl.h	/^  double         x;      \/\/\/< New parent-relative X coordinate$/;"	m	struct:__anon23
x	BWidgets/pugl/pugl/pugl.h	/^  double         x;      \/\/\/< View-relative X coordinate$/;"	m	struct:__anon24
x	BWidgets/pugl/pugl/pugl.h	/^  double         x;      \/\/\/< View-relative X coordinate$/;"	m	struct:__anon29
x	BWidgets/pugl/pugl/pugl.h	/^  double         x;     \/\/\/< View-relative X coordinate$/;"	m	struct:__anon30
x	BWidgets/pugl/pugl/pugl.h	/^  double x;$/;"	m	struct:__anon15
x	BWidgets/pugl_cairo_test.c	/^	int         x;$/;"	m	struct:__anon1	file:
xRoot	BWidgets/pugl/pugl/pugl.h	/^  double              xRoot;     \/\/\/< Root-relative X coordinate$/;"	m	struct:__anon31
xRoot	BWidgets/pugl/pugl/pugl.h	/^  double           xRoot; \/\/\/< Root-relative X coordinate$/;"	m	struct:__anon28
xRoot	BWidgets/pugl/pugl/pugl.h	/^  double         xRoot;     \/\/\/< Root-relative X coordinate$/;"	m	struct:__anon27
xRoot	BWidgets/pugl/pugl/pugl.h	/^  double         xRoot;   \/\/\/< Root-relative X coordinate$/;"	m	struct:__anon26
xRoot	BWidgets/pugl/pugl/pugl.h	/^  double         xRoot;  \/\/\/< Root-relative X coordinate$/;"	m	struct:__anon29
xRoot	BWidgets/pugl/pugl/pugl.h	/^  double         xRoot; \/\/\/< Root-relative X coordinate$/;"	m	struct:__anon30
xic	BWidgets/pugl/x11.h	/^  XIC          xic;$/;"	m	struct:PuglInternalsImpl
xim	BWidgets/pugl/x11.h	/^  XIM          xim;$/;"	m	struct:PuglWorldInternalsImpl
y	BUtilities/Point.hpp	/^	double x, y;$/;"	m	struct:BUtilities::Point
y	BWidgets/pugl/pugl/pugl.h	/^  double              y;         \/\/\/< View-relative Y coordinate$/;"	m	struct:__anon31
y	BWidgets/pugl/pugl/pugl.h	/^  double           y;     \/\/\/< View-relative Y coordinate$/;"	m	struct:__anon28
y	BWidgets/pugl/pugl/pugl.h	/^  double         y;         \/\/\/< View-relative Y coordinate$/;"	m	struct:__anon27
y	BWidgets/pugl/pugl/pugl.h	/^  double         y;       \/\/\/< View-relative Y coordinate$/;"	m	struct:__anon26
y	BWidgets/pugl/pugl/pugl.h	/^  double         y;      \/\/\/< New parent-relative Y coordinate$/;"	m	struct:__anon23
y	BWidgets/pugl/pugl/pugl.h	/^  double         y;      \/\/\/< View-relative Y coordinate$/;"	m	struct:__anon24
y	BWidgets/pugl/pugl/pugl.h	/^  double         y;      \/\/\/< View-relative Y coordinate$/;"	m	struct:__anon29
y	BWidgets/pugl/pugl/pugl.h	/^  double         y;     \/\/\/< View-relative Y coordinate$/;"	m	struct:__anon30
y	BWidgets/pugl/pugl/pugl.h	/^  double y;$/;"	m	struct:__anon15
y	BWidgets/pugl_cairo_test.c	/^	int         y;$/;"	m	struct:__anon1	file:
yResizable	BWidgets/Text.hpp	/^	bool yResizable;$/;"	m	class:BWidgets::Text
yRoot	BWidgets/pugl/pugl/pugl.h	/^  double              yRoot;     \/\/\/< Root-relative Y coordinate$/;"	m	struct:__anon31
yRoot	BWidgets/pugl/pugl/pugl.h	/^  double           yRoot; \/\/\/< Root-relative Y coordinate$/;"	m	struct:__anon28
yRoot	BWidgets/pugl/pugl/pugl.h	/^  double         yRoot;     \/\/\/< Root-relative Y coordinate$/;"	m	struct:__anon27
yRoot	BWidgets/pugl/pugl/pugl.h	/^  double         yRoot;   \/\/\/< Root-relative Y coordinate$/;"	m	struct:__anon26
yRoot	BWidgets/pugl/pugl/pugl.h	/^  double         yRoot;  \/\/\/< Root-relative Y coordinate$/;"	m	struct:__anon29
yRoot	BWidgets/pugl/pugl/pugl.h	/^  double         yRoot; \/\/\/< Root-relative Y coordinate$/;"	m	struct:__anon30
yellow	BWidgets/BColors.hpp	/^const Color yellow = Color (1.0, 1.0, 0.0, 1.0);$/;"	m	namespace:BColors
~Any	BUtilities/Any.hpp	/^        ~Any () {if (dataptr) delete dataptr;}$/;"	f	class:BUtilities::Any
~Button	BWidgets/Button.cpp	/^Button:: ~Button () {}$/;"	f	class:BWidgets::Button
~ChoiceBox	BWidgets/ChoiceBox.cpp	/^ChoiceBox::~ChoiceBox () {}$/;"	f	class:BWidgets::ChoiceBox
~Data	BUtilities/Any.hpp	/^                virtual ~Data () {}$/;"	f	struct:BUtilities::Any::Data
~DialValue	BWidgets/DialValue.cpp	/^DialValue::~DialValue () {}$/;"	f	class:BWidgets::DialValue
~DrawingSurface	BWidgets/DrawingSurface.cpp	/^DrawingSurface::~DrawingSurface ()$/;"	f	class:BWidgets::DrawingSurface
~Envelope	BUtilities/Any.hpp	/^                virtual ~Envelope () {}$/;"	f	struct:BUtilities::Any::Envelope
~Event	BWidgets/BEvents.hpp	/^	virtual ~Event () {}$/;"	f	class:BEvents::Event
~Fill	BWidgets/BStyles.cpp	/^Fill::~Fill ()$/;"	f	class:BStyles::Fill
~Icon	BWidgets/Icon.cpp	/^Icon::~Icon ()$/;"	f	class:BWidgets::Icon
~Item	BWidgets/BItems.cpp	/^Item::~Item ()$/;"	f	class:BItems::Item
~ItemBox	BWidgets/ItemBox.cpp	/^ItemBox::~ItemBox () {}$/;"	f	class:BWidgets::ItemBox
~Knob	BWidgets/Knob.cpp	/^Knob::~Knob () {}$/;"	f	class:BWidgets::Knob
~ListBox	BWidgets/ListBox.cpp	/^ListBox::~ListBox () {}$/;"	f	class:BWidgets::ListBox
~MessageBox	BWidgets/MessageBox.cpp	/^MessageBox::~MessageBox ()$/;"	f	class:BWidgets::MessageBox
~RangeWidget	BWidgets/RangeWidget.cpp	/^RangeWidget::~RangeWidget () {}$/;"	f	class:BWidgets::RangeWidget
~Text	BWidgets/Text.cpp	/^Text::~Text () {}$/;"	f	class:BWidgets::Text
~TextButton	BWidgets/TextButton.cpp	/^TextButton:: ~TextButton () {}$/;"	f	class:BWidgets::TextButton
~TextToggleButton	BWidgets/TextToggleButton.cpp	/^TextToggleButton:: ~TextToggleButton () {}$/;"	f	class:BWidgets::TextToggleButton
~ValueWidget	BWidgets/ValueWidget.cpp	/^ValueWidget::~ValueWidget () {}$/;"	f	class:BWidgets::ValueWidget
~Widget	BWidgets/Widget.cpp	/^Widget::~Widget()$/;"	f	class:BWidgets::Widget
~Window	BWidgets/Window.cpp	/^Window::~Window ()$/;"	f	class:BWidgets::Window
